module analysis/main

imports
  signatures/Common-sig
  signatures/Declarations-sig
  signatures/Expressions-sig
  signatures/GoStatix-sig
  signatures/SortNames-sig
//  signatures/Statements-sig
  signatures/Types-sig

signature
  relations
    typeOfDecl : occurrence -> TYPE
  namespaces
    Type : string
  name-resolution
    labels P IMP PUB PRV FM
    // TODO: Is this correct?
    resolve Type filter P* (IMP? PUB? PUB? | PRV?) FM* min $ < P, P < PRV, P < PUB, P < FM

signature
  sorts TYPE
  // Built-in types
  constructors
    UINT        : TYPE
    UINT8       : TYPE
    UINT16      : TYPE
    UINT32      : TYPE
    UINT64      : TYPE
    UINTPTR     : TYPE
    
    INT         : TYPE
    INT8        : TYPE
    INT16       : TYPE
    INT32       : TYPE
    INT64       : TYPE
    INTPTR      : TYPE
    
    FLOAT64     : TYPE
    FLOAT128    : TYPE
    
    COMPLEX64   : TYPE
    COMPLEX128  : TYPE
    
    BYTE        : TYPE
    RUNE        : TYPE
    STRING      : TYPE


rules
  // Initializes the scope graph with built-in types
  init : scope
  
  init(s) :-
    // Declarations of built-in types
    declareTypeRaw(s, "uint",       UINT()),
    declareTypeRaw(s, "uint8",      UINT8()),
    declareTypeRaw(s, "uint16",     UINT16()),
    declareTypeRaw(s, "uint32",     UINT32()),
    declareTypeRaw(s, "uint64",     UINT64()),
    declareTypeRaw(s, "uintptr",    UINTPTR()),
    
    declareTypeRaw(s, "int",        INT()),
    declareTypeRaw(s, "int8",       INT8()),
    declareTypeRaw(s, "int16",      INT16()),
    declareTypeRaw(s, "int32",      INT32()),
    declareTypeRaw(s, "int64",      INT64()),
    declareTypeRaw(s, "intptr",     INTPTR()),
    
    declareTypeRaw(s, "float64",    FLOAT64()),
    declareTypeRaw(s, "float128",   FLOAT128()),
    
    declareTypeRaw(s, "complex64",  COMPLEX64()),
    declareTypeRaw(s, "complex128", COMPLEX128()),
    
    declareTypeRaw(s, "byte",       BYTE()),
    declareTypeRaw(s, "rune",       RUNE()),
    declareTypeRaw(s, "string",     STRING()).
    
rules

  // Used to declare built-in types
  declareTypeRaw : scope * string * TYPE
  
  declareTypeRaw(s, x, T) :-
    s -> Type{x} with typeOfDecl T,
    // Assert that the declaration is distinct
    typeOfDecl of Type{x} in s |-> [(_, (_, T))].
