module analysis/expressions

imports
  signatures/Common-sig
  signatures/Declarations-sig
  signatures/Expressions-sig
  signatures/GoStatix-sig
  signatures/SortNames-sig
  signatures/Statements-sig
  signatures/Types-sig
  
imports
  analysis/types

rules
  typeOfExpr : scope * Expr -> TYPE
  
  // Operands
  typeOfExpr(s, UnaryExpr2Expr(PrimaryExpr2UnaryExpr(BasicLit2PrimaryExpr(Int(_)))))            = _.
  typeOfExpr(s, UnaryExpr2Expr(PrimaryExpr2UnaryExpr(BasicLit2PrimaryExpr(Float(_)))))          = _.
  typeOfExpr(s, UnaryExpr2Expr(PrimaryExpr2UnaryExpr(BasicLit2PrimaryExpr(ImaginaryInt(_)))))   = _.
  typeOfExpr(s, UnaryExpr2Expr(PrimaryExpr2UnaryExpr(BasicLit2PrimaryExpr(ImaginaryFloat(_))))) = _.
  typeOfExpr(s, UnaryExpr2Expr(PrimaryExpr2UnaryExpr(BasicLit2PrimaryExpr(Rune(_)))))           = _.
  typeOfExpr(s, UnaryExpr2Expr(PrimaryExpr2UnaryExpr(BasicLit2PrimaryExpr(String(_)))))         = STRING().
  typeOfExpr(s, UnaryExpr2Expr(PrimaryExpr2UnaryExpr(BasicLit2PrimaryExpr(RawString(_)))))      = STRING().
  
  // Qualified identifiers
  typeOfExpr(s, UnaryExpr2Expr(PrimaryExpr2UnaryExpr(OperandName2PrimaryExpr(OperandName(name))))) = T :-
//    Var{name} -> s,
//    Var{name} |-> d,
//    d : ty.
    true.
    
  typeOfExpr(s, UnaryExpr2Expr(PrimaryExpr2UnaryExpr(OperandName2PrimaryExpr(QualifiedOperandName(QualifiedID(ID-LEX2ID(pkg), ID-LEX2ID(name))))))) = T :-
//    Pkg{pkg} -> s,
//    new s_qual,
//    Pkg{pkg} <=PUB= s_qual,
//    Var{name} -> s_qual,
//    Var{name} |-> d,
//    d : ty.
    true.