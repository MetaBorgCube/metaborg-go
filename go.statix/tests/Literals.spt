module Literals
language GoStatix
start symbol Expr

// Identifiers
test letter
[[ a ]] parse to OperandName("a")
test id starts with underscore
[[ _x9 ]] parse to OperandName("_x9")
test id camelcase
[[ ThisVariableIsExported ]] parse to OperandName("ThisVariableIsExported")
//test id unicode
//[[ αβ ]] parse to OperandName("αβ")

// Integers
test int zero number
[[ 0 ]] parse to Int("0")
test int dec number
[[ 42 ]] parse to Int("42")
test int dec number with underscore
[[ 4_2 ]] parse to Int("4_2")
test int octal number
[[ 0600 ]] parse to Int("0600")
test int octal number with underscore
[[ 0_600 ]] parse to Int("0_600")
test int octal number with prefix
[[ 0o600 ]] parse to Int("0o600")
test int octal number with capital O
[[ 0O600 ]] parse to Int("0O600")
test int hex number
[[ 0xBadFace ]] parse to Int("0xBadFace")
test int hex number with underscore separators
[[ 0xBad_Face ]] parse to Int("0xBad_Face")
test int big hex number with underscore separators
[[ 0x_67_7a_2f_cc_40_c6 ]] parse to Int("0x_67_7a_2f_cc_40_c6")

// NOTE: These take forever in JSGLR 1
//test big dec number
//[[ 170141183460469231731687303715884105727 ]] parse to Int("170141183460469231731687303715884105727")
//test big dec number with underscore separators
//[[ 170_141183_460469_231731_687303_715884_105727 ]] parse to Int("170_141183_460469_231731_687303_715884_105727")

test an identifier, not an integer literal
[[ _42 ]] parse to OperandName("_42")
test invalid: _ must separate successive digits
[[ 42_ ]] parse fails
test invalid: only one _ at a time
[[ 4__2 ]] parse fails
test invalid: _ must separate successive digits
[[ 0_xBadFace ]] parse fails

// Float
test dec float zero
[[ 0. ]] parse to Float("0.")
test dec float float number
[[ 72.40 ]] parse to Float("72.40")
test dec float zero prefix
[[ 072.40 ]] parse to Float("072.40")
test dec float many decimal digits
[[ 2.71828 ]] parse to Float("2.71828")
test dec float zero exponent
[[ 1.e+0 ]] parse to Float("1.e+0")
test dec float scientific notation 1
[[ 6.67428e-11 ]] parse to Float("6.67428e-11")
test dec float scientific notation 2
[[ 1E6 ]] parse to Float("1E6")
test dec float fraction
[[ .25 ]] parse to Float(".25")
test dec float fraction with exponent
[[ .12345E+5 ]] parse to Float(".12345E+5")
test dec float underscores in float number
[[ 1_5. ]] parse to Float("1_5.")
test dec float underscores in exponent
[[ 0.15e+0_2 ]] parse to Float("0.15e+0_2")

test hex float with exponent
[[ 0x1p-2 ]] parse to Float("0x1p-2")
test hex float with decimal dot and exponent
[[ 0x2.p10 ]] parse to Float("0x2.p10")
test hex float with positive exponent
[[ 0x1.Fp+0 ]] parse to Float("0x1.Fp+0")
test hex float with capital X and negative exponent
[[ 0X.8p-0 ]] parse to Float("0X.8p-0")
test hex float with underscore
[[ 0X_1FFFP-16 ]] parse to Float("0X_1FFFP-16")
test invalid: hex float with exponent letter e
[[ 0x15e-2 ]] parse to Sub(Int("0x15e"), Int("2"))

// Imaginary
test imaginary int: zero
[[ 0i ]] parse to ImaginaryInt("0i")
test imaginary int: is not octal
[[ 0123i ]] parse to ImaginaryInt("0123i")
test imaginary int: octal
[[ 0o123i ]] parse to ImaginaryInt("0o123i")
test imaginary int: hex
[[ 0xabci ]] parse to ImaginaryInt("0xabci")

test imaginary float: zero
[[ 0.i ]] parse to ImaginaryFloat("0.i")
test imaginary float
[[ 2.71828i ]] parse to ImaginaryFloat("2.71828i")
test imaginary float: with zero exponent
[[ 1.e+0i ]] parse to ImaginaryFloat("1.e+0i")
test imaginary float: with exponent
[[ 6.67428e-11i ]] parse to ImaginaryFloat("6.67428e-11i")
test imaginary float: with exponent
[[ 1E6i ]] parse to ImaginaryFloat("1E6i")
test imaginary float: fraction
[[ .25i ]] parse to ImaginaryFloat(".25i")
test imaginary float: small
[[ .12345E+5i ]] parse to ImaginaryFloat(".12345E+5i")
test imaginary float: hex
[[ 0x1p-2i ]] parse to ImaginaryFloat("0x1p-2i")

// Rune literals
test rune: a
[[ 'a' ]] parse to Rune("'a'")
test rune: ä
[[ 'ä' ]] parse to Rune("'ä'")
test rune: 本
[[ '本' ]] parse to Rune("'本'")
test rune: tab
[[ '\t' ]] parse to Rune("'\t'")
test rune: nul
[[ '\000' ]] parse to Rune("'\000'")
test rune: bel
[[ '\007' ]] parse to Rune("'\007'")
test rune: ß
[[ '\377' ]] parse to Rune("'\377'")
test rune: bel hex
[[ '\x07' ]] parse to Rune("'\x07'")
test rune: del
[[ '\xff' ]] parse to Rune("'\xff'")
test rune: ዤ
[[ '\u12e4' ]] parse to Rune("'\u12e4'")
test rune: invalid character
[[ '\U00101234' ]] parse to Rune("'\U00101234'")
test rune: single quote
[[ '\'' ]] parse to Rune("'\''")
test rune: invalid: too many characters
[[ 'aa' ]] parse fails
test rune: invalid: too few hexadecimal digits
[[ '\xa' ]] parse fails
test rune: invalid: too few octal digits
[[ '\0' ]] parse fails
test rune: (illegal) surrogate half
[[ '\uDFFF' ]] parse to Rune("'\uDFFF'")
test rune: (illegal) invalid Unicode code point
[[ '\U00110000' ]] parse to Rune("'\U00110000'")

// String literals
test string: abc
[[ "abc" ]] parse to String("abc")
test string: \\n\n\\n
[[ "\\n\n\\n" ]] parse to String("\\n\n\\n")
test string: \n
[[ "\n" ]] parse to String("\n")
test string: double quote
[[ "\"" ]] parse to String("\\"")
test string: hello world
[[ "Hello, world!\n" ]] parse to String("Hello, world!\n")
test string: chinese (1)
[[ "日本語" ]] parse to String("日本語")
test string: chinese (2)
[[ "\u65e5本\U00008a9e" ]] parse to String("\u65e5本\U00008a9e")
test string: chinese (3)
[[ "\u65e5\u672c\u8a9e" ]] parse to String("\u65e5\u672c\u8a9e")
test string: chinese (4)
[[ "\U000065e5\U0000672c\U00008a9e" ]] parse to String("\U000065e5\U0000672c\U00008a9e")
test string: chinese (5)
[[ "\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e" ]] parse to String("\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e")
test string: unicode
[[ "\xff\u00FF" ]] parse to String("\xff\u00FF")
test string: (illegal) surrogate half
[[ "\uD800" ]] parse to String("\uD800")
test string: (illegal) invalid Unicode code point
[[ "\U00110000" ]] parse to String("\U00110000")

test raw string: abc
[[ `abc` ]] parse to RawString("abc")
test raw string: \\n\n\\n
[[ `\n
\n` ]] parse to RawString("\n
\n")
test raw string: \n
[[ `\n` ]] parse to RawString("\n")
test raw string: double quote
[[ `\"` ]] parse to RawString("\\"")
test raw string: hello world
[[ `Hello, world!\n` ]] parse to RawString("Hello, world!\n")
test raw string: chinese
[[ `日本語` ]] parse to RawString("日本語")

