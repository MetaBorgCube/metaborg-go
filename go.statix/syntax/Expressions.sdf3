module Expressions

imports
  Common
  Types
  SortNames
  
context-free start-symbols

  Expr

context-free syntax
  
  // REPLACE:
//  ExprList = <<{Expr ", "}+>>

  // REPLACE?
  Expr-OPT.NoExpr = <>
  Expr-OPT        = <<Expr>>

// Unary expressions
sorts UnaryExpr
context-free syntax

  //Expression = UnaryExpr | Expression binary_op Expression .
  Expr                  = UnaryExpr
  UnaryExpr             = PrimaryExpr
  UnaryExpr.Pos         = <+<UnaryExpr>>
  UnaryExpr.Neg         = <-<UnaryExpr>>  // Two's complement
  UnaryExpr.Not         = <!<UnaryExpr>>  // Logical complement
  UnaryExpr.Comp        = <^<UnaryExpr>>  // Ones' complement
  UnaryExpr.Deref       = <*<UnaryExpr>>
  UnaryExpr.Ref         = <&<UnaryExpr>>
  UnaryExpr.Rcv         = [<-[UnaryExpr]]

// Binary expressions
sorts BinaryExpr
context-free syntax
  Expr                  = BinaryExpr

  // Logical operators
  BinaryExpr.LogicalOr  = <<Expr> || <Expr>>
  BinaryExpr.LogicalAnd = <<Expr> && <Expr>>

  // Comparison operators
  BinaryExpr.Eq         = [[Expr] == [Expr]]
  BinaryExpr.NEq        = [[Expr] != [Expr]]
  BinaryExpr.Lt         = [[Expr] < [Expr]]
  BinaryExpr.LtEq       = [[Expr] <= [Expr]]
  BinaryExpr.Gt         = [[Expr] > [Expr]]
  BinaryExpr.GtEq       = [[Expr] >= [Expr]]

  // Arithmetic operators
  BinaryExpr.Add        = <<Expr> + <Expr>>
  BinaryExpr.Sub        = <<Expr> - <Expr>>
  BinaryExpr.Or         = <<Expr> | <Expr>>
  BinaryExpr.Xor        = <<Expr> ^ <Expr>>
  BinaryExpr.Mul        = <<Expr> * <Expr>>
  BinaryExpr.Div        = <<Expr> / <Expr>>
  BinaryExpr.Mod        = <<Expr> % <Expr>>
  BinaryExpr.Lsh        = [[Expr] << [Expr]]
  BinaryExpr.Rsh        = [[Expr] >> [Expr]]
  BinaryExpr.And        = <<Expr> & <Expr>>
  BinaryExpr.Clr        = <<Expr> &^ <Expr>>

context-free priorities
  { left:     // unary_op
    UnaryExpr.Pos
    UnaryExpr.Neg
    UnaryExpr.Not
    UnaryExpr.Comp
    UnaryExpr.Deref
    UnaryExpr.Ref
    UnaryExpr.Rcv
  } > { left: // mul_op
    BinaryExpr.Mul
    BinaryExpr.Div
    BinaryExpr.Mod
    BinaryExpr.Lsh
    BinaryExpr.Rsh
    BinaryExpr.And
    BinaryExpr.Clr
  } > { left: // add_op
    BinaryExpr.Add
    BinaryExpr.Sub
    BinaryExpr.Or
    BinaryExpr.Xor
  } > { left: // rel_op
    BinaryExpr.Eq
    BinaryExpr.NEq
    BinaryExpr.Lt
    BinaryExpr.LtEq
    BinaryExpr.Gt
    BinaryExpr.GtEq
  } > { left: // and_op
    BinaryExpr.LogicalAnd
  } > { left: // or_op
    BinaryExpr.LogicalOr
  }

// Primary expressions
sorts PrimaryExpr Arguments-OPT Arguments
context-free syntax
  PrimaryExpr.Selector = <<PrimaryExpr>.<ID>> {left}
  PrimaryExpr.Index = <<PrimaryExpr>[<Expr>]>
  PrimaryExpr.SliceLH          = <<PrimaryExpr>[<Expr-OPT>:<Expr-OPT>]>				// low-high
  PrimaryExpr.SliceLHM         = <<PrimaryExpr>[<Expr-OPT>:<Expr>:<Expr>]>	// low-high-max
  PrimaryExpr.TypeAssertion    = <<PrimaryExpr>.(<Type>)>
  PrimaryExpr.Call             = <<PrimaryExpr>(<Arguments-OPT>)>
  
  Arguments-OPT.NoArguments          = <>
  Arguments-OPT.ArgumentsX           = <<Arguments>>
  Arguments-OPT.Arguments-ALT        = <<Arguments>,>
  Arguments-OPT.ArgumentsExplode     = <<Arguments>...>
  Arguments-OPT.ArgumentsExplode-ALT = <<Arguments>... ,>
  Arguments.Arguments                = <<{Expr ", "}+>>
  Arguments.TypeArgument             = <<Type>>
  Arguments.TypedArguments           = <<Type>, <{Expr ", "}+>>

// Operands
context-free syntax
  PrimaryExpr     = OperandName
  PrimaryExpr     = <(<Expr>)>	{bracket}

  PrimaryExpr = BasicLit
  PrimaryExpr = CompositeLit
  PrimaryExpr = FunctionLit

// Basic literals
sorts BasicLit
context-free syntax
  
  BasicLit.Int              = <<INT>>
  BasicLit.Float            = <<FLOAT>>		{prefer}
  BasicLit.ImaginaryInt     = <<IMAGINARYINT>>
  BasicLit.ImaginaryFloat   = <<IMAGINARYFLOAT>> {prefer}
  BasicLit.Rune             = <<RUNELIT>>
  BasicLit                  = StringLit

// Operand name
sorts OperandName
context-free syntax
  
  OperandName.OperandName           = ID
  OperandName.QualifiedOperandName  = QualifiedID

// Composite literals
sorts CompositeLit LiteralType KeyedElement-LIST KeyedElement Key-OPT Element LiteralValue
context-free syntax
  CompositeLit.CompositeLit = <<LiteralType> <LiteralValue>>

  LiteralType               = StructType
  LiteralType               = ArrayType
  LiteralType.AutoArrayType = <[ ... ]<ElementType>>
  LiteralType               = SliceType
  LiteralType               = MapType
  LiteralType               = TypeName

  LiteralValue.LiteralValue                 = <{ <KeyedElement-LIST> }>
  KeyedElement-LIST.KeyedElement-LIST-Empty = <>
  KeyedElement-LIST.KeyedElement-LIST       = <<{KeyedElement ", "}+>>
  KeyedElement-LIST.KeyedElement-LIST-ALT   = <<{KeyedElement ", "}+> ",">

  KeyedElement.KeyedElement        = <<Key-OPT> <Element>>

  Key-OPT.NoKey          = <>
  Key-OPT.FieldNameKey   = <<ID>:>
  Key-OPT.ExpressionKey  = <<Expr>:>
  Key-OPT.LiteralKey     = <<LiteralValue>:>

  Element            = Expr
  Element            = LiteralValue

// Function literals
sorts FunctionLit
context-free syntax
  FunctionLit.FunctionLit = <func <Function>>

// Conversions
context-free syntax
  PrimaryExpr.Conversion     = <<Type>(<Expr>)>
  PrimaryExpr.Conversion-ALT = <<Type>(<Expr>,<>)>
  
// Method expressions
context-free syntax
  PrimaryExpr.MethodExpr        = <<Type>.<ID>>
