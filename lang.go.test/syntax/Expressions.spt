module Expressions

language GoLang

start symbol Expr

test selector with operator [[a.hi < b.hi]] parse to [[(a.hi) < (b.hi)]]

test qualified expr [[math.Sin]] parse succeeds

test composite literal [[Point3D{}]] parse succeeds
test composite literal [[Line{origin, Point3D{y: -4, z: 12.3}}]] parse succeeds
test composite literal [[Point3D{y: 1000}]] parse succeeds
test composite literal [[ [10]string{}]] parse succeeds
test composite literal [[ [6]int{1, 2, 3, 5}]] parse succeeds
test composite literal [[ [...]string{"Sat", "Sun"}]] parse succeeds

test shorthand composite literal [[ [...]Point{{1.5, -3.5}, {0, 0}}]] parse succeeds
test shorthand composite literal [[ [][]int{{1, 2, 3}, {4, 5}}]] parse succeeds
test shorthand composite literal [[ [][]Point{{{0, 1}, {1, 2}}}]] parse succeeds
test shorthand composite literal [[map[string]Point{"orig": {0, 0}}]] parse succeeds
test shorthand composite literal [[map[Point]string{{0, 0}: "orig"}]] parse succeeds

test shorthand composite literal [[ [2]*Point{{1.5, -3.5}, {}}]] parse succeeds
test shorthand composite literal [[ [2]PPoint{{1.5, -3.5}, {}}]] parse succeeds

test slice literal [[ []int{2, 3, 5, 7, 9, 2147483647}]] parse succeeds
test array literal [[ [128]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true, 'y': true}]] parse succeeds
test array literal [[ [10]float32{-1, 4: -0.1, -0.1, 9: -1}]] parse succeeds
test map literal [[map[string]float32{
  "C0": 16.35, "D0": 18.35, "E0": 20.60, "F0": 21.83,
  "G0": 24.50, "A0": 27.50, "B0": 30.87,
}]] parse succeeds

test function literal [[func(a, b int, z float64) bool { return a*b < int(z); }]] parse succeeds
test function literal [[func(x, y int) int { return x + y; }]] parse succeeds
test function literal [[func(ch chan int) { ch <- ACK; }]] parse succeeds

test primary expression 1 [[x]] parse succeeds
test primary expression 2 [[2]] parse succeeds
test primary expression 3 [[(s + ".txt")]] parse succeeds
test primary expression 4.1 [[f()]] parse succeeds
test primary expression 4.2 [[f(3.1415)]] parse succeeds
test primary expression 4.3 [[f(3.1415, true)]] parse succeeds
test primary expression 5 [[Point{1, 2}]] parse succeeds
test primary expression 6 [[m["foo"] ]] parse succeeds
test primary expression 7 [[s[i : j + 1] ]] parse succeeds
test primary expression 8 [[obj.color]] parse succeeds
test primary expression 9 [[f.p[i].x()]] parse succeeds

test method expression [[t.Mv]] parse succeeds
test method expression [[T.Mv]] parse succeeds
test method expression [[(T).Mv]] parse succeeds
test method expression [[(*T).Mp]] parse succeeds

test selectors and operators [[p.x]] parse succeeds
//test selectors and operators [[p.x * p.x]] parse to [[(p.x) * (p.x)]
//test selectors and operators [[p.x * p.x + p.y * p.y]] parse to [[((p.x) * (p.x)) + ((p.y) * (p.y))]]

test slice expression [[a[1:3:5] ]] parse succeeds

test type assertion [[x.(T)]] parse succeeds

test function call [[math.Atan2(x, y)]] parse succeeds
test method call [[p.Scale(3.5)]] parse succeeds
test method call [[a.Uint64().LeftShift(b).Int64()]] parse succeeds

test variadic call [[Greeting("goodbye:", s...)]] parse succeeds

test conversion [[*Point(p)]] parse to [[*(Point(p))]]
test conversion [[(*Point)(p)]] parse succeeds    // Call(amb([PointerType(TypeName("Point")), Deref(OperandName("Point"))]), []
test conversion [[<-chan int(c)]] parse succeeds
test conversion [[(<-chan int)(c)]] parse succeeds
test conversion [[func()(x)]] parse succeeds
test conversion [[(func())(x)]] parse succeeds
test conversion [[(func() int)(x)]] parse succeeds
test conversion [[func() int(x)]] parse succeeds
