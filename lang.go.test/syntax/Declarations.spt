module Declarations

language GoLang

start symbol TopLevelDecl

test const decl 1 [[const Pi float64 = 3.14159265358979323846;]] parse succeeds
test const decl 2 [[const zero = 0.0;]] parse succeeds
test const decl 3 [[const (
  size int64 = 1024;
  eof        = -1;
);]] parse succeeds
test const decl 4 [[const a, b, c = 3, 4, "foo";]] parse succeeds
test const decl 5 [[const u, v float32 = 0, 3;]] parse succeeds

test const decl: empty [[const ();]] parse succeeds
test const decl: underscore [[const (_;);]] parse succeeds
test const decl: id [[const (N;);]] parse succeeds
test const decl: id type [[const (N int;);]] parse succeeds
test const decl: id type expr [[const (N int = 11 + 1;);]] parse succeeds
test const decl: id expr [[const (N = 11 + 1;);]] parse succeeds

test const decl: simple underscore [[const _;]] parse succeeds
test const decl: simple id [[const N;]] parse succeeds
test const decl: simple id type [[const N int;]] parse succeeds
test const decl: simple id type expr [[const N int = 11 + 1;]] parse succeeds
test const decl: simple id expr [[const N = 11 + 1;]] parse succeeds

test const decl 6 [[const (
  c0 = iota;
  _;
  _;
  _;
  c4;
);]] parse succeeds


test type decl 1 [[type IntArray [16]int;]] parse succeeds
test type decl 2 [[type (
  Point struct{ x, y float64; };
  Polar Point;
);]] parse succeeds
test type decl 3 [[type TreeNode struct {
  left, right *TreeNode;
  value *Comparable;
};]] parse succeeds
test type decl 4 [[type Block interface {
  BlockSize() int;
  Encrypt(src, dst []byte);
  Decrypt(src, dst []byte);
};]] parse succeeds
test type decl 5 [[type U struct {
  _ struct{ a, b, c int; };
};]] parse succeeds
test type decl: tags [[type Person struct {
  Name string `json:"name"`;
  Address *struct {
    Street string `json:"street"`;
    City   string `json:"city"`;
  } `json:"address"`;
};]] parse succeeds


test var decl 1 [[var i int;]] parse succeeds
test var decl 2 [[var U, V, W float64;]] parse succeeds
test var decl 3 [[var k = 0;]] parse succeeds
test var decl 4 [[var x, y float32 = -1, -2;]] parse succeeds
test var decl 5 [[var (
  i       int;
  u, v, s = 2.0, 3.0, "bar";
);]] parse succeeds
test var decl 6 [[var re, im = complexSqrt(-1);]] parse succeeds
test var decl 7 [[var _, found = entries[name];]] parse succeeds

test function decl 1 [[func min(x int, y int) int {
  if x < y {
    return x;
  };
  return y;
};]] parse succeeds
test function decl 2 [[
  func flushICache(begin, end uintptr);
]] parse succeeds

test method decl 1 [[func (p *Point) Length() float64 {
  return math.Sqrt(p.x * p.x + p.y * p.y);
};]] parse succeeds
test method decl 2 [[func (p *Point) Scale(factor float64) {
  p.x *= factor;
  p.y *= factor;
};]] parse succeeds
