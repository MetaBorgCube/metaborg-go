module Declarations

imports

	Common
	Statements
	Expressions
	Types

context-free syntax

	/*
	Declaration   = ConstDecl | TypeDecl | VarDecl .
	TopLevelDecl  = Declaration | FunctionDecl | MethodDecl .
	*/

	Declaration				= ConstDecl
	Declaration				= TypeDecl
	Declaration				= VarDecl
	
	TopLevelDecl			= Declaration
	TopLevelDecl			= FunctionDecl
	TopLevelDecl			= MethodDecl

	// TODO: Constant declarations
	ConstDecl.ConstDecl		= <const>
	
	IdentifierList.IdentifierList = <<{ID ","}*>>
	ExpressionList.ExpressionList = <<{Expression ","}*>>

	// TODO: Iota

	// TODO: Type declarations
	TypeDecl.TypeDecl		= <type>

	// TODO: Variable declarations
	VarDecl.VarDecl			= <var>

	// TODO: Short variable declarations
	ShortVarDecl.ShortVarDecl = <shortvar>

	// Function declarations
	/*
	FunctionDecl = "func" FunctionName ( Function | Signature ) .
	FunctionName = identifier .
	Function     = Signature FunctionBody .
	FunctionBody = Block .
	*/
	
	FunctionDecl.FunctionDecl	= <func <FunctionName> <FunOrSig>>
	FunctionName.FunctionName	= ID
	FunOrSig					= Function
	FunOrSig					= FunctionSignature
	Function.Function					= <<Signature> <FunctionBody>>
	FunctionSignature.FunctionSignature	= Signature
	FunctionBody.FunctionBody			= Block

	// Method declarations
	MethodDecl.MethodDecl		= <methoddecl>
	MethodName.MethodName		= <methodname>