module Declarations

imports

	Common
	Statements
	Expressions
	Types
	Lexical

context-free syntax

	/*
	Declaration   = ConstDecl | TypeDecl | VarDecl .
	TopLevelDecl  = Declaration | FunctionDecl | MethodDecl .
	*/

	Declaration				= ConstDecl
	Declaration				= TypeDecl
	Declaration				= VarDecl
	
	TopLevelDecl			= Declaration
	TopLevelDecl			= FunctionDecl
	TopLevelDecl			= MethodDecl

	// Constant declarations
	/*
	ConstDecl      = "const" ( ConstSpec | "(" { ConstSpec ";" } ")" ) .
	ConstSpec      = IdentifierList [ [ Type ] "=" ExpressionList ] .
	*/

	ConstDecl.ConstDecl				= <const <ConstSpec>>
	ConstSpec.ConstSpecTyped		= <<IdentifierList> <Type> <ConstDeclAssign?>>
	ConstSpec.ConstSpec				= <<IdentifierList> <ConstDeclAssign>>
	ConstDeclAssign.ConstDeclAssign = <= <ExpressionList>>
	
	IdentifierList.IdentifierList = <<{Identifier ","}+>>
	ExpressionList.ExpressionList = <<{Expression ","}+>>

	// TODO: Iota

	// TODO: Type declarations
	TypeDecl.TypeDecl		= <type <TypeSpec>>
	TypeDecl.TypeDecls = <type (<{TypeSpec ";"}*>)>
	TypeSpec.TypeSpec = <<Identifier> <Type>>

	// Variable declarations
	/*
	VarDecl     = "var" ( VarSpec | "(" { VarSpec ";" } ")" ) .
	VarSpec     = IdentifierList ( Type [ "=" ExpressionList ] | "=" ExpressionList ) .
	*/
	
	VarDecl.VarDecl				= <var <VarSpec>>
	VarSpec.VarSpecTyped		= <<IdentifierList> <Type> <VarDeclAssign?>>
	VarSpec.VarSpec				= <<IdentifierList> <VarDeclAssign>>
	VarDeclAssign.VarDeclAssign = <= <ExpressionList>>

	// TODO: Short variable declarations
	ShortVarDecl.ShortVarDecl = <shortvar>

	// Function declarations
	/*
	FunctionDecl = "func" FunctionName ( Function | Signature ) .
	FunctionName = identifier .
	Function     = Signature FunctionBody .
	FunctionBody = Block .
	*/
	
	FunctionDecl.FunctionDecl	= <func <FunctionName> <FunOrSig>>
	FunctionName.FunctionName	= ID
	FunOrSig					= Function
	FunOrSig					= FunctionSignature
	Function.Function					= <<Signature> <FunctionBody>>
	FunctionSignature.FunctionSignature	= Signature
	FunctionBody.FunctionBody			= Block

	// Method declarations
	MethodDecl.MethodDecl		= <methoddecl>
	MethodName.MethodName		= <methodname>