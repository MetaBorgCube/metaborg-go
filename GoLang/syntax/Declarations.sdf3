module Declarations // https://golang.org/ref/spec#Declarations_and_scope

imports

  Blocks
  Lexical
  Expressions
  Types

context-free start-symbols

  TopLevelDecl

context-free syntax

  Declaration  = ConstDecl
  Declaration  = TypeDecl
  Declaration  = VarDecl

  TopLevelDecl = Declaration
  TopLevelDecl = FunctionDecl
  TopLevelDecl = MethodDecl

/**
 * Constant declarations -- https://golang.org/ref/spec#Constant_declarations
 */

  context-free syntax

  ConstDecl.SingleConstDecl = <const <ConstSpec>>
  ConstDecl.MultiConstDecl  = <const (<MultiConstDecl-Inner*>)>
  MultiConstDecl-Inner      = <<ConstSpec>;>

  // spec seems wrong here, assignment is always required
  ConstSpec.ConstSpec              = <<IdentifierList> <ConstSpec-Assignment>>
  ConstSpec-Assignment.ConstAssign = <<ConstSpec-Type-OPT> = <ExpressionList>>
  ConstSpec-Type-OPT.NoType        = <>
  ConstSpec-Type-OPT               = Type

  IdentifierList                   = {Identifier ","}+
  IdentifierList-OPT.NoIdentifiers = <>
  IdentifierList-OPT               = IdentifierList

  ExpressionList                   = {Expression ","}+
  ExpressionList-OPT.NoExpressions = <>
  ExpressionList-OPT               = ExpressionList

/**
 * Iota -- https://golang.org/ref/spec#Iota
 */
 
/**
 * Type declarations -- https://golang.org/ref/spec#Type_declarations
 */
 
  context-free syntax

  TypeDecl.SingleTypeDecl = <type <TypeSpec>>
  TypeDecl.MultiTypeDecl  = <type (<MultiTypeDecl-Inner*>)>
  MultiTypeDecl-Inner     = <<TypeSpec>;>

  TypeSpec                = AliasDecl
  TypeSpec                = TypeDef

  AliasDecl.AliasDecl     = <<Identifier> = <Type>>

  TypeDef.TypeDef         = <<Identifier> <Type>>


/**
 * Var declarations -- https://golang.org/ref/spec#Variable_declarations
 */
 
  VarDecl.SingleVarDecl = <var <VarSpec>>
  VarDecl.MultiVarDecl  = <var (<MultiVarDecl-Inner*>)>
  MultiVarDecl-Inner    = <<VarSpec>;>
  
  VarSpec.VarSpec                = <<IdentifierList> <VarSpec-Inner>>
  VarSpec-Inner.Typed            = <<Type> <VarSpec-Assign-OPT>>
  VarSpec-Inner.Untyped          = VarSpec-Assign
  VarSpec-Assign-OPT.NoVarAssign = <>
  VarSpec-Assign-OPT             = VarSpec-Assign
  VarSpec-Assign.VarAssign       = <= <ExpressionList>>


/**
 * Short variable declarations -- https://golang.org/ref/spec#Short_variable_declarations
 */
 
  context-free syntax

  ShortVarDecl.ShortVarDecl = <<IdentifierList> := <ExpressionList>>


/**
 * Function declarations -- https://golang.org/ref/spec#Function_declarations
 */
 
  context-free syntax
  
  FunctionDecl.FunctionDecl = <func <FunctionName> <FunctionDecl-Inner>>
  FunctionDecl-Inner        = Function
  FunctionDecl-Inner        = Signature
  
  FunctionName.FunctionName = Identifier
  Function.Function         = <<Signature> <FunctionBody>>
  FunctionBody              = Block


/**
 * Method declarations -- https://golang.org/ref/spec#Method_declarations
 */
 
  context-free syntax
  
  MethodDecl.MethodDecl = <func <Receiver> <MethodName> <MethodDecl-Inner>>
  MethodDecl-Inner      = Function
  MethodDecl-Inner      = Signature

//Receiver.Receiver          = Parameters                   // FIXME inlined special case here
  Receiver.Receiver          = <(<Identifier> <Receiver-Inner>)>
  Receiver.AnonymousReceiver = <(<Receiver-Inner>)>
  Receiver-Inner             = TypeName
  Receiver-Inner             = <*<TypeName>>
