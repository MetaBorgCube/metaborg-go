Module("analysis/statements",[Imports([ImportWildcard("signatures/nabl2/shared"),ImportWildcard("signatures/nabl2/shared/common"),ImportWildcard("signatures/nabl2/shared/constraints"),ImportWildcard("nabl2/shared"),ImportWildcard("signatures/nabl2/runtime"),ImportWildcard("signatures/nabl2/runtime/analysis"),ImportWildcard("signatures/nabl2/runtime/common"),ImportWildcard("signatures/nabl2/runtime/solver"),ImportWildcard("nabl2/runtime"),ImportWildcard("nabl2/runtime/analysis"),ImportWildcard("nabl2/runtime/common"),ImportWildcard("nabl2/runtime/editor"),ImportWildcard("nabl2/runtime/prelude"),ImportWildcard("nabl2/runtime/solver"),ImportWildcard("nabl2/runtime/stdlib")]),Rules([]),Imports([ImportWildcard("signatures"),ImportWildcard("reference/src-gen/nabl2/analysis")]),Rules([RDefT("nabl2--generate-constraint-default-rule",[],[DefaultVarDec("nabl2_source"),DefaultVarDec("nabl2_args")],Rule(As(Var("nabl2_term"),NoAnnoList(Op("Block",[Var("ss")]))),Var("nabl2_constraint"),[WithClause(LChoice(Assign(NoAnnoList(Op("Params",[As(Var("nabl2_params"),NoAnnoList(Tuple([Var("s")])))])),Var("nabl2_args")),CallT(SVar("fatal-err"),[],[App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([NoAnnoList(Str("\"Cannot match expected \"")),NoAnnoList(Str("\"^ (s)\"")),NoAnnoList(Str("\" with actual \"")),App(CallNoArgs(SVar("nabl2--pp-flat-args")),Var("nabl2_args")),NoAnnoList(Str("\" when matching \"")),NoAnnoList(Str("\"Block(ss)\"")),NoAnnoList(Str("\" with \"")),App(CallNoArgs(SVar("pp-NaBL2-Term")),Var("nabl2_term")),NoAnnoList(Str("\".\""))])))]))),WithClause(IfThen(CallNoArgs(SVar("nabl2-debug-constraint-generation-hook")),BA(Seq(CallNoArgs(SVar("concat-strings")),CallNoArgs(SVar("debug"))),NoAnnoList(List([NoAnnoList(Str("\"default\"")),NoAnnoList(Str("\" [[ \"")),App(CallNoArgs(SVar("pp-NaBL2-Term")),Var("nabl2_term")),NoAnnoList(Str("\" ^ \"")),App(CallNoArgs(SVar("pp-NaBL2-CTerm")),Var("nabl2_params")),NoAnnoList(Str("\" ]]\""))]))))),WithClause(Id),WithClause(Seq(Assign(Var("nabl2_index"),App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("nabl2_term"))),GenDynRules([SetDynRule(DynRuleId(RDecNoArgs("AstMetadata")),RuleNoCond(Var("nabl2_index"),NoAnnoList(List([NoAnnoList(Tuple([NoAnnoList(Op("Params",[])),Var("nabl2_params")]))]))))]))),WithClause(Assign(Var("nabl2_constraint"),App(CallT(SVar("nabl2--generate-constraint"),[CallNoArgs(SVar("nabl2--generate-constraint-Map1-rule"))],[Var("nabl2_source"),NoAnnoList(Op("Params",[NoAnnoList(Tuple([Var("s")]))]))]),Var("ss"))))])),RDefT("nabl2--generate-constraint-default-rule",[],[DefaultVarDec("nabl2_source"),DefaultVarDec("nabl2_args")],Rule(As(Var("nabl2_term"),NoAnnoList(Op("Assign",[Var("v"),Var("e")]))),Var("nabl2_constraint"),[WithClause(LChoice(Assign(NoAnnoList(Op("Params",[As(Var("nabl2_params"),NoAnnoList(Tuple([Var("s")])))])),Var("nabl2_args")),CallT(SVar("fatal-err"),[],[App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([NoAnnoList(Str("\"Cannot match expected \"")),NoAnnoList(Str("\"^ (s)\"")),NoAnnoList(Str("\" with actual \"")),App(CallNoArgs(SVar("nabl2--pp-flat-args")),Var("nabl2_args")),NoAnnoList(Str("\" when matching \"")),NoAnnoList(Str("\"Assign(v, e)\"")),NoAnnoList(Str("\" with \"")),App(CallNoArgs(SVar("pp-NaBL2-Term")),Var("nabl2_term")),NoAnnoList(Str("\".\""))])))]))),WithClause(IfThen(CallNoArgs(SVar("nabl2-debug-constraint-generation-hook")),BA(Seq(CallNoArgs(SVar("concat-strings")),CallNoArgs(SVar("debug"))),NoAnnoList(List([NoAnnoList(Str("\"default\"")),NoAnnoList(Str("\" [[ \"")),App(CallNoArgs(SVar("pp-NaBL2-Term")),Var("nabl2_term")),NoAnnoList(Str("\" ^ \"")),App(CallNoArgs(SVar("pp-NaBL2-CTerm")),Var("nabl2_params")),NoAnnoList(Str("\" ]]\""))]))))),WithClause(Seq(Assign(Var("ty2"),App(CallT(SVar("nabl2--new-var"),[],[Var("nabl2_source")]),NoAnnoList(Str("\"ty2\"")))),Seq(Assign(Var("ty1"),App(CallT(SVar("nabl2--new-var"),[],[Var("nabl2_source")]),NoAnnoList(Str("\"ty1\"")))),Id))),WithClause(Seq(Assign(Var("nabl2_index"),App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("nabl2_term"))),GenDynRules([SetDynRule(DynRuleId(RDecNoArgs("AstMetadata")),RuleNoCond(Var("nabl2_index"),NoAnnoList(List([NoAnnoList(Tuple([NoAnnoList(Op("Params",[])),Var("nabl2_params")]))]))))]))),WithClause(Assign(Var("nabl2_constraint"),NoAnnoList(Op("CConj",[App(CallT(SVar("nabl2--generate-constraint"),[CallNoArgs(SVar("nabl2--generate-constraint-default-rule"))],[Var("nabl2_source"),NoAnnoList(Op("ParamsAndType",[NoAnnoList(Tuple([Var("s")])),Var("ty1")]))]),Var("v")),NoAnnoList(Op("CConj",[App(CallT(SVar("nabl2--generate-constraint"),[CallNoArgs(SVar("nabl2--generate-constraint-default-rule"))],[Var("nabl2_source"),NoAnnoList(Op("ParamsAndType",[NoAnnoList(Tuple([Var("s")])),Var("ty2")]))]),Var("e")),NoAnnoList(Op("CSubtype",[Var("ty2"),Var("ty1"),NoAnnoList(Op("Message",[NoAnnoList(Op("Error",[])),NoAnnoList(Op("Text",[NoAnnoList(Str("\"Type mismatch in assignment\""))])),App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("v"))]))]))]))]))))])),RDefT("nabl2--generate-constraint-default-rule",[],[DefaultVarDec("nabl2_source"),DefaultVarDec("nabl2_args")],Rule(As(Var("nabl2_term"),NoAnnoList(Op("ArrayAssign",[Var("v"),Var("e1"),Var("e2")]))),Var("nabl2_constraint"),[WithClause(LChoice(Assign(NoAnnoList(Op("Params",[As(Var("nabl2_params"),NoAnnoList(Tuple([Var("s")])))])),Var("nabl2_args")),CallT(SVar("fatal-err"),[],[App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([NoAnnoList(Str("\"Cannot match expected \"")),NoAnnoList(Str("\"^ (s)\"")),NoAnnoList(Str("\" with actual \"")),App(CallNoArgs(SVar("nabl2--pp-flat-args")),Var("nabl2_args")),NoAnnoList(Str("\" when matching \"")),NoAnnoList(Str("\"ArrayAssign(v, e1, e2)\"")),NoAnnoList(Str("\" with \"")),App(CallNoArgs(SVar("pp-NaBL2-Term")),Var("nabl2_term")),NoAnnoList(Str("\".\""))])))]))),WithClause(IfThen(CallNoArgs(SVar("nabl2-debug-constraint-generation-hook")),BA(Seq(CallNoArgs(SVar("concat-strings")),CallNoArgs(SVar("debug"))),NoAnnoList(List([NoAnnoList(Str("\"default\"")),NoAnnoList(Str("\" [[ \"")),App(CallNoArgs(SVar("pp-NaBL2-Term")),Var("nabl2_term")),NoAnnoList(Str("\" ^ \"")),App(CallNoArgs(SVar("pp-NaBL2-CTerm")),Var("nabl2_params")),NoAnnoList(Str("\" ]]\""))]))))),WithClause(Seq(Assign(Var("ty1"),App(CallT(SVar("nabl2--new-var"),[],[Var("nabl2_source")]),NoAnnoList(Str("\"ty1\"")))),Seq(Assign(Var("ty2"),App(CallT(SVar("nabl2--new-var"),[],[Var("nabl2_source")]),NoAnnoList(Str("\"ty2\"")))),Seq(Assign(Var("ty3"),App(CallT(SVar("nabl2--new-var"),[],[Var("nabl2_source")]),NoAnnoList(Str("\"ty3\"")))),Id)))),WithClause(Seq(Assign(Var("nabl2_index"),App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("nabl2_term"))),GenDynRules([SetDynRule(DynRuleId(RDecNoArgs("AstMetadata")),RuleNoCond(Var("nabl2_index"),NoAnnoList(List([NoAnnoList(Tuple([NoAnnoList(Op("Params",[])),Var("nabl2_params")]))]))))]))),WithClause(Assign(Var("nabl2_constraint"),NoAnnoList(Op("CConj",[App(CallT(SVar("nabl2--generate-constraint"),[CallNoArgs(SVar("nabl2--generate-constraint-default-rule"))],[Var("nabl2_source"),NoAnnoList(Op("ParamsAndType",[NoAnnoList(Tuple([Var("s")])),Var("ty1")]))]),Var("v")),NoAnnoList(Op("CConj",[NoAnnoList(Op("CEqual",[Var("ty1"),NoAnnoList(Op("IntArray",[])),NoAnnoList(Op("Message",[NoAnnoList(Op("Error",[])),NoAnnoList(Op("Text",[NoAnnoList(Str("\"Integer array expected\""))])),App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("v"))]))])),NoAnnoList(Op("CConj",[App(CallT(SVar("nabl2--generate-constraint"),[CallNoArgs(SVar("nabl2--generate-constraint-default-rule"))],[Var("nabl2_source"),NoAnnoList(Op("ParamsAndType",[NoAnnoList(Tuple([Var("s")])),Var("ty2")]))]),Var("e1")),NoAnnoList(Op("CConj",[NoAnnoList(Op("CEqual",[Var("ty2"),NoAnnoList(Op("Int",[])),NoAnnoList(Op("Message",[NoAnnoList(Op("Error",[])),NoAnnoList(Op("Text",[NoAnnoList(Str("\"Integer expected\""))])),App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("e1"))]))])),NoAnnoList(Op("CConj",[App(CallT(SVar("nabl2--generate-constraint"),[CallNoArgs(SVar("nabl2--generate-constraint-default-rule"))],[Var("nabl2_source"),NoAnnoList(Op("ParamsAndType",[NoAnnoList(Tuple([Var("s")])),Var("ty3")]))]),Var("e2")),NoAnnoList(Op("CEqual",[Var("ty3"),NoAnnoList(Op("Int",[])),NoAnnoList(Op("Message",[NoAnnoList(Op("Error",[])),NoAnnoList(Op("Text",[NoAnnoList(Str("\"Integer expected\""))])),App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("e2"))]))]))]))]))]))]))]))))])),RDefT("nabl2--generate-constraint-default-rule",[],[DefaultVarDec("nabl2_source"),DefaultVarDec("nabl2_args")],Rule(As(Var("nabl2_term"),NoAnnoList(Op("If",[Var("e"),Var("s1"),Var("s2")]))),Var("nabl2_constraint"),[WithClause(LChoice(Assign(NoAnnoList(Op("Params",[As(Var("nabl2_params"),NoAnnoList(Tuple([Var("s")])))])),Var("nabl2_args")),CallT(SVar("fatal-err"),[],[App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([NoAnnoList(Str("\"Cannot match expected \"")),NoAnnoList(Str("\"^ (s)\"")),NoAnnoList(Str("\" with actual \"")),App(CallNoArgs(SVar("nabl2--pp-flat-args")),Var("nabl2_args")),NoAnnoList(Str("\" when matching \"")),NoAnnoList(Str("\"If(e, s1, s2)\"")),NoAnnoList(Str("\" with \"")),App(CallNoArgs(SVar("pp-NaBL2-Term")),Var("nabl2_term")),NoAnnoList(Str("\".\""))])))]))),WithClause(IfThen(CallNoArgs(SVar("nabl2-debug-constraint-generation-hook")),BA(Seq(CallNoArgs(SVar("concat-strings")),CallNoArgs(SVar("debug"))),NoAnnoList(List([NoAnnoList(Str("\"default\"")),NoAnnoList(Str("\" [[ \"")),App(CallNoArgs(SVar("pp-NaBL2-Term")),Var("nabl2_term")),NoAnnoList(Str("\" ^ \"")),App(CallNoArgs(SVar("pp-NaBL2-CTerm")),Var("nabl2_params")),NoAnnoList(Str("\" ]]\""))]))))),WithClause(Seq(Assign(Var("ty"),App(CallT(SVar("nabl2--new-var"),[],[Var("nabl2_source")]),NoAnnoList(Str("\"ty\"")))),Id)),WithClause(Seq(Assign(Var("nabl2_index"),App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("nabl2_term"))),GenDynRules([SetDynRule(DynRuleId(RDecNoArgs("AstMetadata")),RuleNoCond(Var("nabl2_index"),NoAnnoList(List([NoAnnoList(Tuple([NoAnnoList(Op("Params",[])),Var("nabl2_params")]))]))))]))),WithClause(Assign(Var("nabl2_constraint"),NoAnnoList(Op("CConj",[App(CallT(SVar("nabl2--generate-constraint"),[CallNoArgs(SVar("nabl2--generate-constraint-default-rule"))],[Var("nabl2_source"),NoAnnoList(Op("ParamsAndType",[NoAnnoList(Tuple([Var("s")])),Var("ty")]))]),Var("e")),NoAnnoList(Op("CConj",[NoAnnoList(Op("CEqual",[Var("ty"),NoAnnoList(Op("Bool",[])),NoAnnoList(Op("Message",[NoAnnoList(Op("Error",[])),NoAnnoList(Op("Text",[NoAnnoList(Str("\"Boolean condition expected\""))])),App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("e"))]))])),NoAnnoList(Op("CConj",[App(CallT(SVar("nabl2--generate-constraint"),[CallNoArgs(SVar("nabl2--generate-constraint-default-rule"))],[Var("nabl2_source"),NoAnnoList(Op("Params",[NoAnnoList(Tuple([Var("s")]))]))]),Var("s1")),App(CallT(SVar("nabl2--generate-constraint"),[CallNoArgs(SVar("nabl2--generate-constraint-default-rule"))],[Var("nabl2_source"),NoAnnoList(Op("Params",[NoAnnoList(Tuple([Var("s")]))]))]),Var("s2"))]))]))]))))])),RDefT("nabl2--generate-constraint-default-rule",[],[DefaultVarDec("nabl2_source"),DefaultVarDec("nabl2_args")],Rule(As(Var("nabl2_term"),NoAnnoList(Op("While",[Var("e"),Var("st")]))),Var("nabl2_constraint"),[WithClause(LChoice(Assign(NoAnnoList(Op("Params",[As(Var("nabl2_params"),NoAnnoList(Tuple([Var("s")])))])),Var("nabl2_args")),CallT(SVar("fatal-err"),[],[App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([NoAnnoList(Str("\"Cannot match expected \"")),NoAnnoList(Str("\"^ (s)\"")),NoAnnoList(Str("\" with actual \"")),App(CallNoArgs(SVar("nabl2--pp-flat-args")),Var("nabl2_args")),NoAnnoList(Str("\" when matching \"")),NoAnnoList(Str("\"While(e, st)\"")),NoAnnoList(Str("\" with \"")),App(CallNoArgs(SVar("pp-NaBL2-Term")),Var("nabl2_term")),NoAnnoList(Str("\".\""))])))]))),WithClause(IfThen(CallNoArgs(SVar("nabl2-debug-constraint-generation-hook")),BA(Seq(CallNoArgs(SVar("concat-strings")),CallNoArgs(SVar("debug"))),NoAnnoList(List([NoAnnoList(Str("\"default\"")),NoAnnoList(Str("\" [[ \"")),App(CallNoArgs(SVar("pp-NaBL2-Term")),Var("nabl2_term")),NoAnnoList(Str("\" ^ \"")),App(CallNoArgs(SVar("pp-NaBL2-CTerm")),Var("nabl2_params")),NoAnnoList(Str("\" ]]\""))]))))),WithClause(Seq(Assign(Var("ty"),App(CallT(SVar("nabl2--new-var"),[],[Var("nabl2_source")]),NoAnnoList(Str("\"ty\"")))),Id)),WithClause(Seq(Assign(Var("nabl2_index"),App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("nabl2_term"))),GenDynRules([SetDynRule(DynRuleId(RDecNoArgs("AstMetadata")),RuleNoCond(Var("nabl2_index"),NoAnnoList(List([NoAnnoList(Tuple([NoAnnoList(Op("Params",[])),Var("nabl2_params")]))]))))]))),WithClause(Assign(Var("nabl2_constraint"),NoAnnoList(Op("CConj",[App(CallT(SVar("nabl2--generate-constraint"),[CallNoArgs(SVar("nabl2--generate-constraint-default-rule"))],[Var("nabl2_source"),NoAnnoList(Op("ParamsAndType",[NoAnnoList(Tuple([Var("s")])),Var("ty")]))]),Var("e")),NoAnnoList(Op("CConj",[NoAnnoList(Op("CEqual",[Var("ty"),NoAnnoList(Op("Bool",[])),NoAnnoList(Op("Message",[NoAnnoList(Op("Error",[])),NoAnnoList(Op("Text",[NoAnnoList(Str("\"Boolean condition expected\""))])),App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("e"))]))])),App(CallT(SVar("nabl2--generate-constraint"),[CallNoArgs(SVar("nabl2--generate-constraint-default-rule"))],[Var("nabl2_source"),NoAnnoList(Op("Params",[NoAnnoList(Tuple([Var("s")]))]))]),Var("st"))]))]))))])),RDefT("nabl2--generate-constraint-default-rule",[],[DefaultVarDec("nabl2_source"),DefaultVarDec("nabl2_args")],Rule(As(Var("nabl2_term"),NoAnnoList(Op("Print",[Var("e")]))),Var("nabl2_constraint"),[WithClause(LChoice(Assign(NoAnnoList(Op("Params",[As(Var("nabl2_params"),NoAnnoList(Tuple([Var("s")])))])),Var("nabl2_args")),CallT(SVar("fatal-err"),[],[App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([NoAnnoList(Str("\"Cannot match expected \"")),NoAnnoList(Str("\"^ (s)\"")),NoAnnoList(Str("\" with actual \"")),App(CallNoArgs(SVar("nabl2--pp-flat-args")),Var("nabl2_args")),NoAnnoList(Str("\" when matching \"")),NoAnnoList(Str("\"Print(e)\"")),NoAnnoList(Str("\" with \"")),App(CallNoArgs(SVar("pp-NaBL2-Term")),Var("nabl2_term")),NoAnnoList(Str("\".\""))])))]))),WithClause(IfThen(CallNoArgs(SVar("nabl2-debug-constraint-generation-hook")),BA(Seq(CallNoArgs(SVar("concat-strings")),CallNoArgs(SVar("debug"))),NoAnnoList(List([NoAnnoList(Str("\"default\"")),NoAnnoList(Str("\" [[ \"")),App(CallNoArgs(SVar("pp-NaBL2-Term")),Var("nabl2_term")),NoAnnoList(Str("\" ^ \"")),App(CallNoArgs(SVar("pp-NaBL2-CTerm")),Var("nabl2_params")),NoAnnoList(Str("\" ]]\""))]))))),WithClause(Seq(Assign(Var("ty"),App(CallT(SVar("nabl2--new-var"),[],[Var("nabl2_source")]),NoAnnoList(Str("\"ty\"")))),Id)),WithClause(Seq(Assign(Var("nabl2_index"),App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("nabl2_term"))),GenDynRules([SetDynRule(DynRuleId(RDecNoArgs("AstMetadata")),RuleNoCond(Var("nabl2_index"),NoAnnoList(List([NoAnnoList(Tuple([NoAnnoList(Op("Params",[])),Var("nabl2_params")]))]))))]))),WithClause(Assign(Var("nabl2_constraint"),NoAnnoList(Op("CConj",[App(CallT(SVar("nabl2--generate-constraint"),[CallNoArgs(SVar("nabl2--generate-constraint-default-rule"))],[Var("nabl2_source"),NoAnnoList(Op("ParamsAndType",[NoAnnoList(Tuple([Var("s")])),Var("ty")]))]),Var("e")),NoAnnoList(Op("CEqual",[Var("ty"),NoAnnoList(Op("Int",[])),NoAnnoList(Op("Message",[NoAnnoList(Op("Error",[])),NoAnnoList(Op("Text",[NoAnnoList(Str("\"Integer expected\""))])),App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("e"))]))]))]))))]))])])