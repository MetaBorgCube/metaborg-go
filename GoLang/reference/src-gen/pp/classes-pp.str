module reference/src-gen/pp/classes-pp

imports
  libstratego-gpp
  libspoofax/sdf/pp
  libspoofax/term/origin
  libstratego-sglr
  reference/src-gen/signatures/classes-sig


imports
  reference/src-gen/signatures/statements-sig
  reference/src-gen/signatures/lex-sig
  reference/src-gen/signatures/expressions-sig


imports
  reference/src-gen/pp/statements-pp
  reference/src-gen/pp/lex-pp
  reference/src-gen/pp/expressions-pp


strategies
  prettyprint-example =
    prettyprint-minijava

  prettyprint-minijava =
    fail


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-minijava-start-symbols

  prettyprint-minijava-start-symbols =
    fail


strategies
  prettyprint-minijava =
    prettyprint-minijava-ClassDecl

  prettyprint-minijava =
    prettyprint-minijava-ParentDecl

  prettyprint-minijava =
    prettyprint-minijava-FieldDecl

  prettyprint-minijava =
    prettyprint-minijava-MethodDecl

  prettyprint-minijava =
    prettyprint-minijava-VarDecl

  prettyprint-minijava =
    prettyprint-minijava-ParamDecl

  prettyprint-minijava =
    prettyprint-minijava-Type

  prettyprint-minijava(|sort):
    t -> <prettyprint-minijava-ClassDecl>
    where <?"ClassDecl"> sort

  prettyprint-minijava(|sort):
    t -> <prettyprint-minijava-ParentDecl>
    where <?"ParentDecl"> sort

  prettyprint-minijava(|sort):
    t -> <prettyprint-minijava-FieldDecl>
    where <?"FieldDecl"> sort

  prettyprint-minijava(|sort):
    t -> <prettyprint-minijava-MethodDecl>
    where <?"MethodDecl"> sort

  prettyprint-minijava(|sort):
    t -> <prettyprint-minijava-VarDecl>
    where <?"VarDecl"> sort

  prettyprint-minijava(|sort):
    t -> <prettyprint-minijava-ParamDecl>
    where <?"ParamDecl"> sort

  prettyprint-minijava(|sort):
    t -> <prettyprint-minijava-Type>
    where <?"Type"> sort

  prettyprint-minijava-ClassDecl :
    Class(t1__, t2__, t3__, t4__) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [ S("class ")
                                         , t1__'
                                         , S(" ")
                                         , t2__'
                                         , S("{")
                                         ]
                                       )
                                     , t3__'
                                     , H(
                                         []
                                       , [S("")]
                                       )
                                     , t4__'
                                     , H(
                                         [SOpt(HS(), "0")]
                                       , [S("}")]
                                       )
                                     ]
    with t1__' := <pp-one-Z(prettyprint-minijava-ID) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-minijava-ParentDecl) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-minijava-FieldDecl) <+ pp-one-Z(prettyprint-completion-aux)> t3__
                                    ]
    with t4__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-minijava-MethodDecl) <+ pp-one-Z(prettyprint-completion-aux)> t4__
                                    ]

  is-minijava-ClassDecl =
    ?Class(_, _, _, _)

  minijava-get-indent :
    ( t@Class(t1__, t2__, t3__, t4__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"ClassDecl"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := "  "
           case ?4 :
             indent := "  "
           otherwise :
             indent := ""
         end

  minijava-get-separator :
    ( t@Class(t1__, t2__, t3__, t4__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"ClassDecl"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := "\n"
           case ?4 :
             separator := "\n"
           otherwise :
             separator := ""
         end

  minijava-get-leading-ws :
    ( t@Class(t1__, t2__, t3__, t4__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"ClassDecl"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           case ?3 :
             ws := "\n  "
           case ?4 :
             ws := "\n\n  "
           otherwise :
             ws := ""
         end

  prettyprint-minijava-ParentDecl :
    None() -> [ H(
                  []
                , [S("")]
                )
              ]

  is-minijava-ParentDecl =
    ?None()

  minijava-get-indent :
    (t@None(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ParentDecl"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  minijava-get-separator :
    (t@None(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ParentDecl"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  minijava-get-leading-ws :
    (t@None(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ParentDecl"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-minijava-ParentDecl :
    Parent(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ S("extends ")
                        , t1__'
                        , S(" ")
                        ]
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-minijava-ID) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-minijava-ParentDecl =
    ?Parent(_)

  minijava-get-indent :
    (t@Parent(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ParentDecl"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  minijava-get-separator :
    (t@Parent(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ParentDecl"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  minijava-get-leading-ws :
    (t@Parent(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ParentDecl"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-minijava-FieldDecl :
    Field(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ t1__'
                             , S(" ")
                             , t2__'
                             , S(";")
                             ]
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-minijava-Type) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-minijava-ID) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-minijava-FieldDecl =
    ?Field(_, _)

  minijava-get-indent :
    (t@Field(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FieldDecl"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  minijava-get-separator :
    (t@Field(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FieldDecl"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  minijava-get-leading-ws :
    (t@Field(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FieldDecl"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-minijava-MethodDecl :
    Method(t1__, t2__, t3__, t4__, t5__, t6__) -> [ H(
                                                      [SOpt(HS(), "0")]
                                                    , [ S("public ")
                                                      , t1__'
                                                      , S(" ")
                                                      , t2__'
                                                      , S("(")
                                                      , t3__'
                                                      , S(") {")
                                                      ]
                                                    )
                                                  , t4__'
                                                  , H(
                                                      []
                                                    , [S("")]
                                                    )
                                                  , t5__'
                                                  , t6__'
                                                  , H(
                                                      [SOpt(HS(), "0")]
                                                    , [S("}")]
                                                    )
                                                  ]
    with t1__' := <pp-one-Z(prettyprint-minijava-Type) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-minijava-ID) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-H-list(prettyprint-minijava-ParamDecl|", ")
                   <+ pp-one-Z(prettyprint-completion-aux)> t3__
    with t4__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-minijava-VarDecl) <+ pp-one-Z(prettyprint-completion-aux)> t4__
                                    ]
    with t5__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-minijava-Statement) <+ pp-one-Z(prettyprint-completion-aux)> t5__
                                    ]
    with t6__' := <pp-indent(|"2")> [ S("return ")
                                    , <pp-one-Z(prettyprint-minijava-Exp) <+ pp-one-Z(prettyprint-completion-aux)> t6__
                                    , S(";")
                                    ]

  is-minijava-MethodDecl =
    ?Method(_, _, _, _, _, _)

  minijava-get-indent :
    ( t@Method(t1__, t2__, t3__, t4__, t5__, t6__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"MethodDecl"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           case ?4 :
             indent := "  "
           case ?5 :
             indent := "  "
           case ?6 :
             indent := ""
           otherwise :
             indent := ""
         end

  minijava-get-separator :
    ( t@Method(t1__, t2__, t3__, t4__, t5__, t6__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"MethodDecl"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ", "
           case ?4 :
             separator := "\n"
           case ?5 :
             separator := "\n"
           case ?6 :
             separator := ""
           otherwise :
             separator := ""
         end

  minijava-get-leading-ws :
    ( t@Method(t1__, t2__, t3__, t4__, t5__, t6__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"MethodDecl"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           case ?3 :
             ws := ""
           case ?4 :
             ws := "\n  "
           case ?5 :
             ws := "\n\n  "
           case ?6 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-minijava-VarDecl :
    Var(t1__, t2__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ t1__'
                           , S(" ")
                           , t2__'
                           , S(";")
                           ]
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-minijava-Type) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-minijava-ID) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-minijava-VarDecl =
    ?Var(_, _)

  minijava-get-indent :
    (t@Var(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"VarDecl"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  minijava-get-separator :
    (t@Var(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"VarDecl"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  minijava-get-leading-ws :
    (t@Var(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"VarDecl"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-minijava-ParamDecl :
    Param(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(" "), t2__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-minijava-Type) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-minijava-ID) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-minijava-ParamDecl =
    ?Param(_, _)

  minijava-get-indent :
    (t@Param(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ParamDecl"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  minijava-get-separator :
    (t@Param(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ParamDecl"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  minijava-get-leading-ws :
    (t@Param(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ParamDecl"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-minijava-Type :
    Int() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("int")]
               )
             ]

  is-minijava-Type =
    ?Int()

  minijava-get-indent :
    (t@Int(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  minijava-get-separator :
    (t@Int(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  minijava-get-leading-ws :
    (t@Int(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-minijava-Type :
    Bool() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("boolean")]
                )
              ]

  is-minijava-Type =
    ?Bool()

  minijava-get-indent :
    (t@Bool(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  minijava-get-separator :
    (t@Bool(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  minijava-get-leading-ws :
    (t@Bool(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-minijava-Type :
    IntArray() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("int[]")]
                    )
                  ]

  is-minijava-Type =
    ?IntArray()

  minijava-get-indent :
    (t@IntArray(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  minijava-get-separator :
    (t@IntArray(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  minijava-get-leading-ws :
    (t@IntArray(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-minijava-Type :
    ClassType(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-minijava-ID) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-minijava-Type =
    ?ClassType(_)

  minijava-get-indent :
    (t@ClassType(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  minijava-get-separator :
    (t@ClassType(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  minijava-get-leading-ws :
    (t@ClassType(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Type"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  is-minijava-ClassDecl =
    fail

  is-minijava-ParentDecl =
    fail

  is-minijava-FieldDecl =
    fail

  is-minijava-MethodDecl =
    fail

  is-minijava-VarDecl =
    fail

  is-minijava-ParamDecl =
    fail

  is-minijava-Type =
    fail

  prettyprint-minijava-ClassDecl :
    amb([h|hs]) -> <prettyprint-minijava-ClassDecl> h

  prettyprint-minijava-ParentDecl :
    amb([h|hs]) -> <prettyprint-minijava-ParentDecl> h

  prettyprint-minijava-FieldDecl :
    amb([h|hs]) -> <prettyprint-minijava-FieldDecl> h

  prettyprint-minijava-MethodDecl :
    amb([h|hs]) -> <prettyprint-minijava-MethodDecl> h

  prettyprint-minijava-VarDecl :
    amb([h|hs]) -> <prettyprint-minijava-VarDecl> h

  prettyprint-minijava-ParamDecl :
    amb([h|hs]) -> <prettyprint-minijava-ParamDecl> h

  prettyprint-minijava-Type :
    amb([h|hs]) -> <prettyprint-minijava-Type> h

  prettyprint-minijava-ClassDecl :
    ClassDecl-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[ClassDecl]]")]
                           )
                         ]

  is-minijava-ClassDecl =
    ?ClassDecl-Plhdr()

  prettyprint-minijava-ParentDecl :
    ParentDecl-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[ParentDecl]]")]
                            )
                          ]

  is-minijava-ParentDecl =
    ?ParentDecl-Plhdr()

  prettyprint-minijava-FieldDecl :
    FieldDecl-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[FieldDecl]]")]
                           )
                         ]

  is-minijava-FieldDecl =
    ?FieldDecl-Plhdr()

  prettyprint-minijava-MethodDecl :
    MethodDecl-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[MethodDecl]]")]
                            )
                          ]

  is-minijava-MethodDecl =
    ?MethodDecl-Plhdr()

  prettyprint-minijava-Statement :
    Statement-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[Statement]]")]
                           )
                         ]

  is-minijava-Statement =
    ?Statement-Plhdr()

  prettyprint-minijava-Exp :
    Exp-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[Exp]]")]
                     )
                   ]

  is-minijava-Exp =
    ?Exp-Plhdr()

  prettyprint-minijava-VarDecl :
    VarDecl-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[VarDecl]]")]
                         )
                       ]

  is-minijava-VarDecl =
    ?VarDecl-Plhdr()

  prettyprint-minijava-ParamDecl :
    ParamDecl-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[ParamDecl]]")]
                           )
                         ]

  is-minijava-ParamDecl =
    ?ParamDecl-Plhdr()

  prettyprint-minijava-Type :
    Type-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Type]]")]
                      )
                    ]

  is-minijava-Type =
    ?Type-Plhdr()

  prettyprint-minijava-ID :
    ID-Plhdr() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("[[ID]]")]
                    )
                  ]

  is-minijava-ID =
    ?ID-Plhdr()

  prettyprint-minijava-ClassDecl :
    ClassDecl-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[ClassDecl]]")]
                            )
                          ]

  is-minijava-ClassDecl =
    ?ClassDecl-Plhdr(_)

  prettyprint-minijava-ParentDecl :
    ParentDecl-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("[[ParentDecl]]")]
                             )
                           ]

  is-minijava-ParentDecl =
    ?ParentDecl-Plhdr(_)

  prettyprint-minijava-FieldDecl :
    FieldDecl-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[FieldDecl]]")]
                            )
                          ]

  is-minijava-FieldDecl =
    ?FieldDecl-Plhdr(_)

  prettyprint-minijava-MethodDecl :
    MethodDecl-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("[[MethodDecl]]")]
                             )
                           ]

  is-minijava-MethodDecl =
    ?MethodDecl-Plhdr(_)

  prettyprint-minijava-Statement :
    Statement-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[Statement]]")]
                            )
                          ]

  is-minijava-Statement =
    ?Statement-Plhdr(_)

  prettyprint-minijava-Exp :
    Exp-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[Exp]]")]
                      )
                    ]

  is-minijava-Exp =
    ?Exp-Plhdr(_)

  prettyprint-minijava-VarDecl :
    VarDecl-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[VarDecl]]")]
                          )
                        ]

  is-minijava-VarDecl =
    ?VarDecl-Plhdr(_)

  prettyprint-minijava-ParamDecl :
    ParamDecl-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[ParamDecl]]")]
                            )
                          ]

  is-minijava-ParamDecl =
    ?ParamDecl-Plhdr(_)

  prettyprint-minijava-Type :
    Type-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Type]]")]
                       )
                     ]

  is-minijava-Type =
    ?Type-Plhdr(_)

  prettyprint-minijava-ID :
    ID-Plhdr(_) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[ID]]")]
                     )
                   ]

  is-minijava-ID =
    ?ID-Plhdr(_)

  prettyprint-minijava-FieldDecl :
    FieldDecl-Opt-Plhdr() -> [ H(
                                 []
                               , [S("")]
                               )
                             ]

  is-minijava-FieldDecl =
    ?FieldDecl-Opt-Plhdr()

  prettyprint-minijava-MethodDecl :
    MethodDecl-Opt-Plhdr() -> [ H(
                                  []
                                , [S("")]
                                )
                              ]

  is-minijava-MethodDecl =
    ?MethodDecl-Opt-Plhdr()

  prettyprint-minijava-ParentDecl :
    ParentDecl-Opt-Plhdr() -> [ H(
                                  []
                                , [S("")]
                                )
                              ]

  is-minijava-ParentDecl =
    ?ParentDecl-Opt-Plhdr()

  prettyprint-minijava-ParamDecl :
    ParamDecl-Opt-Plhdr() -> [ H(
                                 []
                               , [S("")]
                               )
                             ]

  is-minijava-ParamDecl =
    ?ParamDecl-Opt-Plhdr()

  prettyprint-minijava-VarDecl :
    VarDecl-Opt-Plhdr() -> [ H(
                               []
                             , [S("")]
                             )
                           ]

  is-minijava-VarDecl =
    ?VarDecl-Opt-Plhdr()

  prettyprint-minijava-Statement :
    Statement-Opt-Plhdr() -> [ H(
                                 []
                               , [S("")]
                               )
                             ]

  is-minijava-Statement =
    ?Statement-Opt-Plhdr()