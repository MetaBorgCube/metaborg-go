module codegen/classes

imports

  src-gen/signatures/-
  libspoofax/stratego/debug
  codegen/-
  nabl2/api
  reference/desugar-signatures

imports // Jasmin signatures

  signatures/JasminXT-Annotations-sig
  signatures/JasminXT-Arithmetic-sig
  signatures/JasminXT-Control-sig
  signatures/JasminXT-Conversion-sig
  signatures/JasminXT-Descriptors-sig
  signatures/JasminXT-Directives-sig
  signatures/JasminXT-Exceptions-sig
  signatures/JasminXT-Fields-sig
  signatures/JasminXT-Header-sig
  signatures/JasminXT-Instructions-sig
  signatures/JasminXT-InvokeReturn-sig
  signatures/JasminXT-LoadStore-sig
  signatures/JasminXT-Methods-sig
  signatures/JasminXT-Names-sig
  signatures/JasminXT-Numbers-sig
  signatures/JasminXT-Objects-sig
  signatures/JasminXT-Stack-sig
  signatures/JasminXT-Strings-sig
  signatures/JasminXT-Synchronisation-sig
  signatures/JasminXT-Types-sig
  signatures/JasminXT-Whitespace-sig
  signatures/jasmin-sig
  reference/desugar-signatures
  analysis

rules


/*************************************************************************************
***************************************PROGRAM-TO-JBC***********************************
**************************************************************************************/ 
 
  program-to-jbc : SourceFile(packageClause, _, functionDecls) -> 
  JBCFile(
    <package-clause-to-jbc> packageClause, 
    [],
	[JBCMethod(
		[PUBLIC()]
    	, Init()
    	, JBCMethodDesc([], Void())
    	, [ ALOAD_0()
      	, INVOKESPECIAL(
          JBCMethodRef(CRef("java/lang/Object"), MRef(Init()), JBCMethodDesc([], Void()))
        )
      	, RETURN()
  	]),
  	functions*
  	]
      	)
  	where 
  	functions* := <map(function-declaration-to-jbc) > functionDecls
  
  
 package-clause-to-jbc: PackageClause(packageName) ->
 	<package-name-to-jbc> packageName
 	
 package-name-to-jbc: PackageName(name) ->
 JBCHeader(
    None()
  , JBCSource("")
  , JBCClass([PUBLIC()], name)
  , JBCSuper("java/lang/Object")
  , []
  , None()
  , None()
  , []
  , []
  , []
  ) 
 /*************************************************************************************
*****************************FUNCTION-DECLARATION-TO-JBC***********************************
**************************************************************************************/ 
 function-declaration-to-jbc: FunctionDecl(FunctionName("main"), Function(_,block)) ->
 JBCMethod(
      [PUBLIC(), STATIC()]
    , "main"
    //TODO correct func signature
    , JBCMethodDesc([Array(Reference(CRef("java/lang/String")))], Void())
    , <block-to-jbc> block
)

 function-declaration-to-jbc: FunctionDecl(FunctionName(name), Function(_,block)) ->
 JBCMethod(
      [PUBLIC()]
    , name
    //TODO correct func signature
    , JBCMethodDesc([], Void())
    , <block-to-jbc> block
)
 
block-to-jbc: Block(statements)->output*
 where
  stackInit := [JBCLimitLocals("99")
      			, JBCLimitStack("99")];
  statementsResult :=    <map(stmt-to-jbc);concat > statements;
  output* := <concat>[stackInit,statementsResult, [RETURN()]]
  
block-to-jbc: NoBlock()->[]
 
 stmt-to-jbc: DeclarationStmt(declaration) ->
 <declaration-stmt-to-jbc>declaration
 
 stmt-to-jbc: ExpressionStmt(expression) ->
 <expression-stmt-to-jbc>expression
 
 stmt-to-jbc: IfStmt((_, expr, ifblock, elseblock)) -> output*
	where
	ifExpression := <expression-stmt-to-jbc>expr;
	debug(!<concat-strings>["ifExpression"]) ;
	ifBlock := <block-to-jbc>ifblock;
	elseBlock := <block-to-jbc>elseblock;
	elsetrue* := <newname> "elsetrue_";
	endif* := <newname> "endif_";
	output* := <concat>[
	ifExpression,
	[IFEQ(LabelRef(elsetrue*))],
	ifBlock,
	[JBCLabel(elsetrue*)],
	elseBlock,
	[JBCLabel(endif*)]
	]
 
/*************************************************************************************
*************************EXPRESSION-STMT-TO-JBC***********************************
**************************************************************************************/ 

 expression-stmt-to-jbc: ArgumentsPackage(QualifiedIdent(PackageName("fmt"), "Println"),
 Arguments(Arguments([UnTypedArg(toPrint)]), None(), None())) -> [output*]
  where
   output* := <print-to-jbc> toPrint
   
 expression-stmt-to-jbc: ArgumentsPackage(methodName,_) -> [
 	NEW(CRef("main"))	
	,DUP()					
	,INVOKESPECIAL(			
      JBCMethodRef(CRef("main"), MRef(Init()), JBCMethodDesc([], Void()))
    ),
 	INVOKEVIRTUAL(
      JBCMethodRef(
        CRef("main")
      , MRef(methodName)
      //second one is return type first one is params again
      //TODO: HANDLE ARGUMENTS AND RETURNS
      , JBCMethodDesc([], Void())
      )
    )
 ]
 
 expression-stmt-to-jbc: expression -> [<literal-to-jbc> expression]
 
 //TODO: Implement return stmt
 expression-stmt-to-jbc: ReturnStmt(_) -> []
  
 
 //TODO: Golang fmt.Println only allows strings to be printed 
print-to-jbc:
IntLit(toPrint) -> 
      [GETSTATIC(
          JBCFieldRef(
            CRef("java/lang/System")
          , FRef("out")
          , JBCFieldDesc(Reference(CRef("java/io/PrintStream")))
          )
        )
      , LDC(Int(toPrint))
      , INVOKEVIRTUAL(
          JBCMethodRef(
            CRef("java/io/PrintStream")
          , MRef("println")
          , JBCMethodDesc([Int()], Void())
          )
        )
     ]

print-to-jbc: OperandName(name) -> 
[GETSTATIC(
          JBCFieldRef(
            CRef("java/lang/System")
          , FRef("out")
          , JBCFieldDesc(Reference(CRef("java/io/PrintStream")))
          )
        ),
        ALOAD(VarNum("0"))
//      	ALOAD(VarNum(<int-to-string>index*))
      , INVOKEVIRTUAL(
          JBCMethodRef(
            CRef("java/io/PrintStream")
          , MRef("println")
          , JBCMethodDesc([Reference(CRef("java/lang/String"))], Void())
          )
        )
     ] 
  where
 a       := <nabl2-get-ast-analysis> name;
ref-occ := <nabl2-mk-occurrence(|"ShortVarDecl")> name;
index* := <get-term-index> ref-occ
     
print-to-jbc:
StringLit(toPrint) ->
      [GETSTATIC(
          JBCFieldRef(
            CRef("java/lang/System")
          , FRef("out")
          , JBCFieldDesc(Reference(CRef("java/io/PrintStream")))
          )
        )
      , LDC(toPrint)
      , INVOKEVIRTUAL(
          JBCMethodRef( 
            CRef("java/io/PrintStream")
          , MRef("println")
          , JBCMethodDesc([Reference(CRef("java/lang/String"))], Void())
          )
      )
     ]
     
/*************************************************************************************
*************************DECLARATION-STMT-TO-JBC***********************************
**************************************************************************************/ 
 declaration-stmt-to-jbc: ShortVarDecl(names,values) -> result*
 where
 valueList := <map(literal-to-jbc)>values;
 varNames := <map(var-name-to-jbc)>names;
 result* := <concat>[valueList,varNames]
 
 //TODO: Probably need some nabl2 type analysis.
 //Term indexes should reference to correct variables
 var-name-to-jbc: name -> ASTORE(VarNum("0"))
// ASTORE(VarNum(<int-to-string>index*))
 where
 a       := <nabl2-get-ast-analysis> name;
ref-occ := <nabl2-mk-occurrence(|"ShortVarDecl")> name;
index* := <get-term-index> ref-occ
//TODO replace when nabl2 is fixed.
get-term-index: Occurrence(_,_,TermIndex(_,index)) -> index
 
 literal-to-jbc: StringLit(val) -> 
 	LDC(val)
 literal-to-jbc: IntLit(val) -> 
 	LDC(Int(val))
 literal-to-jbc: BoolLit("false") -> 
 	LDC(Int("0"))
 literal-to-jbc: BoolLit("true") -> 
 	LDC(Int("1"))
 
 
 