module codegen/classes
//hoi
imports

  src-gen/signatures/-
  libspoofax/stratego/debug
  codegen/-
  reference/desugar-signatures

imports // Jasmin signatures

  signatures/JasminXT-Annotations-sig
  signatures/JasminXT-Arithmetic-sig
  signatures/JasminXT-Control-sig
  signatures/JasminXT-Conversion-sig
  signatures/JasminXT-Descriptors-sig
  signatures/JasminXT-Directives-sig
  signatures/JasminXT-Exceptions-sig
  signatures/JasminXT-Fields-sig
  signatures/JasminXT-Header-sig
  signatures/JasminXT-Instructions-sig
  signatures/JasminXT-InvokeReturn-sig
  signatures/JasminXT-LoadStore-sig
  signatures/JasminXT-Methods-sig
  signatures/JasminXT-Names-sig
  signatures/JasminXT-Numbers-sig
  signatures/JasminXT-Objects-sig
  signatures/JasminXT-Stack-sig
  signatures/JasminXT-Strings-sig
  signatures/JasminXT-Synchronisation-sig
  signatures/JasminXT-Types-sig
  signatures/JasminXT-Whitespace-sig
  signatures/jasmin-sig
  reference/desugar-signatures
  analysis

rules

  // http://tudelft-in4303-2016.github.io/assignments/ms3/lab8.html#implement-a-code-generation-strategy
/*************************************************************************************
***************************************PROGRAM-TO-JBC***********************************
**************************************************************************************/ 
 
  program-to-jbc : SourceFile(packageClause, _, functionDecls) -> 
  JBCFile(
    <package-clause-to-jbc> packageClause, 
    [],
	[JBCMethod(
		[PUBLIC()]
    	, Init()
    	, JBCMethodDesc([], Void())
    	, [ ALOAD_0()
      	, INVOKESPECIAL(
          JBCMethodRef(CRef("java/lang/Object"), MRef(Init()), JBCMethodDesc([], Void()))
        )
      	, RETURN()
  	]),
  	functions*
  	]
      	)
  	where 
  	functions* := <map(function-declaration-to-jbc) > functionDecls
  
  
 package-clause-to-jbc: PackageClause(packageName) ->
 	<package-name-to-jbc> packageName
 	
 package-name-to-jbc: PackageName(name) ->
 JBCHeader(
    None()
  , JBCSource("")
  , JBCClass([PUBLIC()], name)
  , JBCSuper("java/lang/Object")
  , []
  , None()
  , None()
  , []
  , []
  , []
  ) 
 function-declaration-to-jbc: FunctionDecl(FunctionName("main"), Function(_,block)) ->
 JBCMethod(
      [PUBLIC(), STATIC()]
    , "main"
    //TODO correct func signature
    , JBCMethodDesc([Array(Reference(CRef("java/lang/String")))], Void())
    , <function-block-to-jbc> block
)

 function-declaration-to-jbc: FunctionDecl(FunctionName(name), Function(_,block)) ->
 JBCMethod(
      [PUBLIC()]
    , name
    //TODO correct func signature
    , JBCMethodDesc([], Void())
    , <function-block-to-jbc> block
)
 
 function-block-to-jbc: Block(expressionStatements)->output*
 where
  stackInit := [JBCLimitLocals("99")
      			, JBCLimitStack("99")];
  expressions :=    <map(expression-stmt-to-jbc);concat > expressionStatements;
  output* := <concat>[stackInit,expressions, [RETURN()]]
 
 expression-stmt-to-jbc: ExpressionStmt(expression) ->
 <expression-stmt-to-jbc>expression
 

  
 expression-stmt-to-jbc: ArgumentsPackage(QualifiedIdent(PackageName("fmt"), "Println"),
 Arguments(Arguments([UnTypedArg(toPrint)]), None(), None())) -> [output*]
  where
   output* := <print-to-jbc> toPrint
   
 expression-stmt-to-jbc: ArgumentsPackage(methodName,_) -> [
 	NEW(CRef("main"))	
	,DUP()					
	,INVOKESPECIAL(			
      JBCMethodRef(CRef("main"), MRef(Init()), JBCMethodDesc([], Void()))
    ),
 	INVOKEVIRTUAL(
      JBCMethodRef(
        CRef("main")
      , MRef(methodName)
      //second one is return type first one is params again
      //TODO HANDLE ARGUMENTS AND RETURNS
      , JBCMethodDesc([], Void())
      )
    )
 ]
  
 
 //Golang fmt.Println only allows strings to be printed 
print-to-jbc:
IntLit(toPrint) -> 
      [GETSTATIC(
          JBCFieldRef(
            CRef("java/lang/System")
          , FRef("out")
          , JBCFieldDesc(Reference(CRef("java/io/PrintStream")))
          )
        )
      , LDC(Int(toPrint))
      , INVOKEVIRTUAL(
          JBCMethodRef(
            CRef("java/io/PrintStream")
          , MRef("println")
          , JBCMethodDesc([Int()], Void())
          )
        )
     ]
     
     
print-to-jbc:
StringLit(toPrint) ->
      [GETSTATIC(
          JBCFieldRef(
            CRef("java/lang/System")
          , FRef("out")
          , JBCFieldDesc(Reference(CRef("java/io/PrintStream")))
          )
        )
      , LDC(toPrint)
      , INVOKEVIRTUAL(
          JBCMethodRef( 
            CRef("java/io/PrintStream")
          , MRef("println")
          , JBCMethodDesc([Reference(CRef("java/lang/String"))], Void())
          )
      )
      , GETSTATIC(
          JBCFieldRef(
            CRef("java/lang/System")
          , FRef("out")
          , JBCFieldDesc(Reference(CRef("java/io/PrintStream")))
          )
        )  
     ]