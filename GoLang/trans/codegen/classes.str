module codegen/classes

imports

  src-gen/signatures/-
  libspoofax/stratego/debug
  codegen/-
  nabl2/api
  reference/desugar-signatures

imports // Jasmin signatures

  signatures/JasminXT-Annotations-sig
  signatures/JasminXT-Arithmetic-sig
  signatures/JasminXT-Control-sig
  signatures/JasminXT-Conversion-sig
  signatures/JasminXT-Descriptors-sig
  signatures/JasminXT-Directives-sig
  signatures/JasminXT-Exceptions-sig
  signatures/JasminXT-Fields-sig
  signatures/JasminXT-Header-sig
  signatures/JasminXT-Instructions-sig
  signatures/JasminXT-InvokeReturn-sig
  signatures/JasminXT-LoadStore-sig
  signatures/JasminXT-Methods-sig
  signatures/JasminXT-Names-sig
  signatures/JasminXT-Numbers-sig
  signatures/JasminXT-Objects-sig
  signatures/JasminXT-Stack-sig
  signatures/JasminXT-Strings-sig
  signatures/JasminXT-Synchronisation-sig
  signatures/JasminXT-Types-sig
  signatures/JasminXT-Whitespace-sig
  signatures/jasmin-sig
  reference/desugar-signatures
  analysis

rules


/*************************************************************************************
***************************************PROGRAM-TO-JBC***********************************
**************************************************************************************/ 
 
program-to-jbc : SourceFile(_,packageClause, _, functionDecls) -> 
	[initialize |
  	[JBCFile(
    <package-clause-to-jbc> packageClause, 
    [],
	[JBCMethod(
		[PUBLIC()]
    	, Init()
    	, JBCMethodDesc([], Void())
    	, [ ALOAD_0()
      	, INVOKESPECIAL(
          JBCMethodRef(CRef("java/lang/Object"), MRef(Init()), JBCMethodDesc([], Void()))
        )
      	, RETURN()
  	]),
  	functions*
  	]
      	)
  	]]
  	where 
  	functions* := <map(function-declaration-to-jbc) > functionDecls;
  	initialize := <main-func> packageClause

main-func: _ -> 
JBCFile(
    JBCHeader(
    None()
  , JBCSource("")
  , JBCClass([PUBLIC()], "main")
  , JBCSuper("java/lang/Object")
  , []
  , None()
  , None()
  , []
  , []
  , []
  )
	, [],
	  [JBCMethod([PUBLIC()]
    	, Init()
    	, JBCMethodDesc([], Void())
    	, [ ALOAD_0()
      	, INVOKESPECIAL(
          JBCMethodRef(CRef("java/lang/Object"), MRef(Init()), JBCMethodDesc([], Void()))
        )
      	, RETURN()
      	]),
      	JBCMethod(
	      [PUBLIC(), STATIC()]
	    , "main"
	    , JBCMethodDesc([Array(Reference(CRef("java/lang/String")))], Void())
	    ,  [
		    JBCLimitLocals("99") , JBCLimitStack("99")
		    ,NEW(CRef("go"))	
	 		,DUP()					
	 		,INVOKESPECIAL(			
	          JBCMethodRef(CRef("go"), MRef(Init()), JBCMethodDesc([], Void()))
	        ),
	        INVOKEVIRTUAL(
		      JBCMethodRef(
		        CRef("go")
		      , MRef("main")
		      , JBCMethodDesc([], Void())
		      )
   			)
   			, RETURN()
	    ]
	    )
	  ]
  )  	
  
  
package-clause-to-jbc: PackageClause(packageName) ->
 	<package-name-to-jbc> packageName
 	
package-name-to-jbc: PackageName(name) ->
 JBCHeader(
    None()
  , JBCSource("")
  , JBCClass([PUBLIC()], "go")
  , JBCSuper("java/lang/Object")
  , []
  , None()
  , None()
  , []
  , []
  , []
  ) 
 /*************************************************************************************
*****************************FUNCTION-DECLARATION-TO-JBC*******************************
**************************************************************************************/ 
//function-declaration-to-jbc: FunctionDecl(FunctionName("main"), Function(_,block)) ->
// JBCMethod(
//      [PUBLIC(), STATIC()]
//    , "main"
//    //TODO correct func signature
//    , JBCMethodDesc([Array(Reference(CRef("java/lang/String")))], Void())
//    , <concat>[[JBCLimitLocals("99")
//      			, JBCLimitStack("99")],<block-to-jbc> block,[RETURN()]]
//)

function-declaration-to-jbc: FunctionDecl(FunctionName(name), Function(Signature(parameterDeclarations, _),block)) ->
 JBCMethod(
      [PUBLIC()]
    , name
    //TODO correct func signature
    , JBCMethodDesc(paramsOut, Void()) 
    , <concat>[[JBCLimitLocals("99")
      			, JBCLimitStack("99")]
      			,[JBCLabel(startlabel)]
      			,concattedParams
      			,<block-to-jbc> block
      			,[RETURN()]
      			,[JBCLabel(endlabel)]
      			]
)
where 
startlabel := <newname> "startmethod_";
endlabel := <newname> "endmethod_";
params := <map(parameter-declaration-to-jbc(|startlabel,endlabel))> parameterDeclarations;
 concattedParams := <concat> params;
  debug(!<concat-strings>["params: "]);
  paramsOut := <map(parameter-declaration-to-jbc-method-desc)> parameterDeclarations;
  debug(!<concat-strings>["types: "])

parameter-declaration-to-jbc-method-desc: ParameterDecl(_,_,type) -> <type-to-jbc> type
where 
 debug(!<concat-strings>["parameter-declaration-to-jbc-method-desc: "])

parameter-declaration-to-jbc(|label1,label2): ParameterDecl(vars,_,type) -> result
where
 result := <map(decl-param(|label1,label2,type));concat> vars;
 debug(!<concat-strings>["ParameterDecl: "])
  
decl-param(|label1,label2,type): Bind(name,index) -> 
[JBCVarDecl(
		  index
		, name
		, JBCFieldDesc(<type-to-jbc>type)
		, LabelRef(label1)
		, LabelRef(label2)
		)]
where
debug(!<concat-strings>["decl-param: "])
 
type-to-jbc: TypeName("int") -> Int()

type-to-jbc: TypeName("string") ->  Reference(CRef("java/lang/String"))

type-to-jbc: TypeName(_) ->  Int()

/*************************************************************************************
*****************************BLOCK-TO-JBC***********************************
**************************************************************************************/ 
block-to-jbc: Block(statements)->statementsResult
 where
  stackInit := [JBCLimitLocals("99")
      			, JBCLimitStack("99")];
  debug(!<concat-strings>["Block stmt-to-jbc"]);
  statementsResult :=    <map(stmt-to-jbc);concat > statements;
  output* := <concat>[stackInit,statementsResult]


block-to-jbc: NoBlock()->[]
 
/*************************************************************************************
*****************************STMT-TO-JBC***********************************
**************************************************************************************/ 
 //TODO: Implement return stmt
stmt-to-jbc: ReturnStmt(_) -> [] 

stmt-to-jbc: DeclarationStmt(declaration) ->
 <declaration-stmt-to-jbc> declaration
 
stmt-to-jbc: AssignStmt(toAssign,assignment) -> result
where
expressions := <map(expression-stmt-to-jbc);concat> assignment;
operands := <map(assignment-operand-to-jbc);concat> toAssign;
revertedOperands := <reverse>operands;
result :=  <concat>[expressions,revertedOperands]

assignment-operand-to-jbc:  OperandName(name) -> [result]
  where
  	debug(!<concat-strings>["condition"]) ;
 	a := <nabl2-get-ast-analysis> name; 
	ref-occ := <nabl2-mk-occurrence(|"Var")> name; 
	(dec-occ, _)  := <nabl2-get-resolved-name(|a)> ref-occ;
	index := <nabl2-get-property(|a, "index")> dec-occ; 
	type    := <nabl2-get-type(|a)> dec-occ;
	result := <get-store(|index)> type
 
stmt-to-jbc: ExpressionStmt(expression) -> result
	where
 result := <expression-stmt-to-jbc>expression
 
stmt-to-jbc: ForStmt((Condition(expression), block)) -> output*
	where
	startfor := <newname> "startfor_";
	condition := <expression-stmt-to-jbc> expression;
	forblock := <block-to-jbc> block;
	endfor := <newname> "endfor_";
	output* := <concat>[
		[JBCLabel(startfor)],
		condition,
		[IFEQ(LabelRef(endfor))],
		forblock,
		[GOTO(LabelRef(startfor))],
		[JBCLabel(endfor)]]
 
stmt-to-jbc: IfStmt((_, expr, ifblock, elseblock)) -> output*
	where
	ifExpression := <expression-stmt-to-jbc>expr;
	ifBlock := <block-to-jbc>ifblock;
	elseBlock := <block-to-jbc>elseblock;
	elsetrue* := <newname> "elsetrue_";
	endif* := <newname> "endif_";
	output* := <concat>[
	ifExpression,
	[IFEQ(LabelRef(elsetrue*))],
	ifBlock,
	[GOTO(LabelRef(endif*))],
	[JBCLabel(elsetrue*)],
	elseBlock,
	[JBCLabel(endif*)]
	]
 
/*************************************************************************************
*************************EXPRESSION-STMT-TO-JBC***********************************
**************************************************************************************/ 
expression-stmt-to-jbc: Sum(x, y) -> result
where 
firstArg := <expression-stmt-to-jbc> x;
secondArg := <expression-stmt-to-jbc> y;
result := <concat>[firstArg, secondArg, [IADD()]]

expression-stmt-to-jbc: Difference(x, y) -> result
where 
firstArg := <expression-stmt-to-jbc> x;
secondArg := <expression-stmt-to-jbc> y;
result := <concat>[firstArg, secondArg, [ISUB()]]

expression-stmt-to-jbc: Product(x, y) -> result
where 
firstArg := <expression-stmt-to-jbc> x;
secondArg := <expression-stmt-to-jbc> y;
result := <concat>[firstArg, secondArg, [IMUL()]]


expression-stmt-to-jbc: Less(x, y) -> result
where 
firstArg := <expression-stmt-to-jbc> x;
secondArg := <expression-stmt-to-jbc> y;
truelt := <newname> "trueltlabel";
falselt := <newname> "endltlabel";
result := <concat>[firstArg, secondArg, 
					[IF_ICMPLT(LabelRef(truelt)),  				
  						ICONST_0(),
  						GOTO(LabelRef(falselt)),
  						JBCLabel(truelt),
  						ICONST_1(),
  						JBCLabel(falselt)]
  					]
  					
expression-stmt-to-jbc: Greater(x, y) -> result
where 
firstArg := <expression-stmt-to-jbc> x;
secondArg := <expression-stmt-to-jbc> y;
truelt := <newname> "trueltlabel";
falselt := <newname> "endltlabel";
result := <concat>[firstArg, secondArg, 
					[IF_ICMPGT(LabelRef(truelt)),  				
  						ICONST_0(),
  						GOTO(LabelRef(falselt)),
  						JBCLabel(truelt),
  						ICONST_1(),
  						JBCLabel(falselt)]
  					]
//TODO: This doesnt compare strings.
expression-stmt-to-jbc: Equal(x, y) -> result
where 
firstArg := <expression-stmt-to-jbc> x;
secondArg := <expression-stmt-to-jbc> y;
truelt := <newname> "trueltlabel";
falselt := <newname> "endltlabel";
result := <concat>[firstArg, secondArg, 
					[IF_ICMPEQ(LabelRef(truelt)),  				
  						ICONST_0(),
  						GOTO(LabelRef(falselt)),
  						JBCLabel(truelt),
  						ICONST_1(),
  						JBCLabel(falselt)]
  					]
  					
expression-stmt-to-jbc: Not(x) -> result
where 
firstArg := <expression-stmt-to-jbc> x;
result := <concat>[firstArg,
					[ICONST_1(),IXOR()]
  					]
  
expression-stmt-to-jbc: ArgumentsPackage(QualifiedIdent(PackageName("fmt"), printmethod), Arguments(printlist)) -> [output*]
  where
  	 debug(!<concat-strings>["print"]);
   output* := <print-multiple-to-jbc(|printmethod)> printlist;
   debug(!<concat-strings>["output"])
   
//method call
expression-stmt-to-jbc: ArgumentsPackage(methodName,arguments) -> <concat>[
[
// 	NEW(CRef("main"))	
//	,DUP()				
//	,INVOKESPECIAL(			
//      JBCMethodRef(CRef("main"), MRef(Init()), JBCMethodDesc([], Void()))
//    )
	ALOAD_0()
    ],
    [expressions* ],
    [
 	INVOKEVIRTUAL(
      JBCMethodRef(
        CRef("go")
      , MRef(methodName)
      //second one is return type first one is params again
      //TODO: HANDLE RETURNS
      , JBCMethodDesc(params*, Void())
      )
    )
    ]
 ]
 where
 params* := <function-call-parameter-types> arguments;
debug(!<concat-strings>["arguments of method call: "]);
expressions* := <function-call-parameter-expressions> arguments; 
debug(!<concat-strings>["arguments expressions result: "])

function-call-parameter-expressions: NoArguments() -> []

function-call-parameter-expressions: Arguments(argumentsList) -> result
where
result := <map(parameter-args-to-expressions);concat> argumentsList;
debug(!<concat-strings>["arguments expressions: "]) 

parameter-args-to-expressions: UnTypedArg(arg) -> result
where
result :=  <expression-stmt-to-jbc> arg;
debug(!<concat-strings>["expression from arg: "]) 
 
 function-call-parameter-types: NoArguments() -> []
 
 function-call-parameter-types: Arguments(argumentsList) -> result
 where
 result := <map(untyped-arg-to-type)> argumentsList;
 debug(!<concat-strings>["arguments"]) 
 
 untyped-arg-to-type: UnTypedArg(arg) -> type
 where
 type := <get-jbc-type> arg;
  debug(!<concat-strings>["arg type: "]) 
   
expression-stmt-to-jbc: expression -> [<literal-to-jbc> expression]
  
expression-stmt-to-jbc:  OperandName(name) -> [result]
  where
 	a := <nabl2-get-ast-analysis> name; 
	ref-occ := <nabl2-mk-occurrence(|"Var")> name; 
	(dec-occ, _)  := <nabl2-get-resolved-name(|a)> ref-occ;
	index := <nabl2-get-property(|a, "index")> dec-occ; 
	type    := <nabl2-get-type(|a)> dec-occ;
	result := <get-load(|index)> type
	
get-load(|index): IntT ->  ILOAD(VarNum(<int-to-string>index))

get-load(|index): BoolT ->  ILOAD(VarNum(<int-to-string>index))

get-load(|index): StringT ->  ALOAD(VarNum(<int-to-string>index))

print-multiple-to-jbc(|printmethod): printlist -> 
 <concat>[prints,[GETSTATIC(
  JBCFieldRef(
    CRef("java/lang/System") 
  , FRef("out")
  , JBCFieldDesc(Reference(CRef("java/io/PrintStream")))
  )
),
LDC(""),
INVOKEVIRTUAL(
  JBCMethodRef(
    CRef("java/io/PrintStream")
  , MRef(printmethod*)
  , JBCMethodDesc([Reference(CRef("java/lang/String"))], Void())
  )
)]
]
where
printmethod* := <lower-case> printmethod;
debug(!<concat-strings>["build print list: "]);
prints := <map(printlist-to-prints);concat> printlist;
 debug(!<concat-strings>["prints"])



printlist-to-prints: UnTypedArg(toprint) -> 
 [GETSTATIC(
          JBCFieldRef(
            CRef("java/lang/System") 
          , FRef("out")
          , JBCFieldDesc(Reference(CRef("java/io/PrintStream")))
          )
        )
      , print* 
      , INVOKEVIRTUAL(
          JBCMethodRef(
            CRef("java/io/PrintStream")
          , MRef("print")
          , JBCMethodDesc([[printType*]], Void())
          )
        )
     ]
    where 
    print* := <expression-stmt-to-jbc> toprint;
    debug;
    //This causes to only arrow operandnames to print at the moment
    //the question is can we deduct the type of some expression
    printType* := <get-jbc-type> toprint
	 
get-jbc-type: OperandName(name) -> result
 where
 	a := <nabl2-get-ast-analysis> name; 
	ref-occ := <nabl2-mk-occurrence(|"Var")> name; 
	(dec-occ, _)  := <nabl2-get-resolved-name(|a)> ref-occ;
	index := <nabl2-get-property(|a, "index")> dec-occ; 
	type    := <nabl2-get-type(|a)> dec-occ;
	result := <get-jbc-type> type
	
//Literals
get-jbc-type: IntLit(_) -> Int()

get-jbc-type: BoolLit(_) -> Int()
 	
get-jbc-type: StringLit(_) -> Reference(CRef("java/lang/String"))
//Types 
get-jbc-type: StringT -> Reference(CRef("java/lang/String"))
 
get-jbc-type: IntT -> Int()

get-jbc-type: BoolT -> Int()
     
/*************************************************************************************
*************************DECLARATION-STMT-TO-JBC***********************************
**************************************************************************************/ 
//TODO CHECK IF THESE WORK
declaration-stmt-to-jbc: MultiVarDecl([ VarSpec(_,Typed(_,NoVarAssign()))]) -> []

declaration-stmt-to-jbc: MultiVarDecl([VarSpec(names,Typed(_,VarAssign(values)))]) -> result*
 where
	valueList := <map(expression-stmt-to-jbc);concat>values;
	varNames := <map(var-decl-to-jbc)>names;
	revertedVarNames := <reverse>varNames;
	result* := <concat>[valueList,revertedVarNames]

declaration-stmt-to-jbc: MultiVarDecl([VarSpec(names,Untyped(VarAssign(values)))]) -> result*
 where
	valueList := <map(expression-stmt-to-jbc);concat>values;
	varNames := <map(var-decl-to-jbc)>names;
	revertedVarNames := <reverse>varNames;
	result* := <concat>[valueList,revertedVarNames]

var-decl-to-jbc: Bind(name,index) -> result*
where 
	a := <nabl2-get-ast-analysis> name; 
	ref-occ := <nabl2-mk-occurrence(|"Var")> name; 
	type    := <nabl2-get-type(|a)> ref-occ;
	result* := <get-store(|index)> type
	
	
get-store(|index): StringT -> ASTORE(VarNum(<int-to-string>index))

get-store(|index): IntT -> ISTORE(VarNum(<int-to-string>index))

get-store(|index): BoolT -> ISTORE(VarNum(<int-to-string>index))
  
/*************************************************************************************
*************************LITERAL-TO-JBC***********************************
**************************************************************************************/ 
literal-to-jbc: StringLit(val) ->  
 	LDC(val)
literal-to-jbc: IntLit(val) -> 
 	LDC(Int(val))
literal-to-jbc: BoolLit("false") -> 
 	LDC(Int("0"))
literal-to-jbc: BoolLit("true") -> 
 	LDC(Int("1"))
 
 
 