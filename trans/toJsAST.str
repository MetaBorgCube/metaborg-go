module toJsAST

imports 
	signatures/-
	signatures/spoofaxJS-sig
	signatures/MethodDecl-sig
	signatures/Parameter-sig
	signatures/Statement-sig
	signatures/Expression-sig
	signatures/Common-sig
	trans/pp
	helpers
		
rules

	/*
	Strategies that transform Go AST to a Javascript AST.
	*/

	generate-js-ast :
		(selected, position, ast, path, project-path) -> (filename, pp)
		with
			filename := <guarantee-extension(|"js")> path;
			debug(!"Starting compilation pretty printed JS AST...");
			result	 := <gen-js-ast> ast;
			debug(!"Compilation to JS AST finsished!");
			pp 		 := <pp-js> result;
			debug(!"Pretty printing of JS AST finished!")

	gen-js-ast : SourceFile(packageClause, _, topLevelDecls) -> Program(js)
		where
			packageName := <package-name> packageClause;
			debug(!<concat-strings> ["Ignoring package identifier (", packageName, ") and imports"]);
			js := <map(gen-js-ast)> topLevelDecls
	
	gen-js-ast : FunctionDecl(
		FunctionName(name),
		Function(
			Signature(Parameters(params), returnType),
			FunctionBody(block)
		)
	) -> method(name, paramsJs, bodyJs)
		where
			debug(!<concat-strings> ["Found function ", name, " with parameters ", <write-to-string> params]);
			paramsJs := <map(gen-js-ast)> params;
			bodyJs := <gen-js-ast> block
	
	gen-js-ast : ParameterDecl(name, _) -> parameter(name)
	
	gen-js-ast : Block(statementList) -> js
		where
			statements := <statements-from-list> statementList;
			js := <map(gen-js-ast)> statements
	
	gen-js-ast:
		ExpressionStmt(
			UnaryExpr(
				PrimaryExpr(
					PrimaryExprArguments(
						Operand(OperandName("println")),
						Arguments(
							ExpressionList(args)
						)
					)
				)
			)
		) -> expStmt(MethodCall(Identifier("console"), "log", argsJs))
		where
			argsJs := <map(gen-js-ast)> args
	
	gen-js-ast:
		UnaryExpr(PrimaryExpr(Operand(Literal(StringLit(output))))) -> String(output)
			