module toJsAST/declarations

imports 
	signatures/-
	signatures/spoofaxJS-sig
	signatures/MethodDecl-sig
	signatures/Parameter-sig
	signatures/Statement-sig
	signatures/Expression-sig
	signatures/Common-sig
	trans/pp
	toJsAST/statements
	toJsAST/expressions
	helpers
		
rules
	
	gen-js-ast : FunctionDecl(
		FunctionName(name),
		Function(
			Signature(Parameters(params), returnType),
			FunctionBody(block)
		)
	) -> method(name, paramsJs, bodyJs)
		where
			debug(!<concat-strings> ["Found function ", name, " with parameters ", <write-to-string> params]);
			retparname := <newname> "__retcallback__";
			paramsJs := <conc> (<map(gen-js-ast)> params, [parameter(retparname)]);
			bodyJs := <func-block(|retparname)> block
	
	gen-js-ast : ParameterDecl(name, _) -> parameter(name)
	
	stmt-to-js(|defername) : ConstDecl(constDecl) -> <convert-stmt(|defername)> constDecl
	stmt-to-js(|defername): VarDecl(varDecl) -> <convert-stmt(|defername)> varDecl
	
	// Ignore type
	stmt-to-js(|defername) : VarSpecTyped(IdentifierList(identifierList), _, None()) -> (<map(to-js-var)> identifierList, [])
	
	stmt-to-js(|defername) : ConstSpecTyped(IdentifierList(identifierList), _, None()) -> (<map(to-js-const)> identifierList, [])
	
	to-js-var : identifier -> varDecl(identifier, Null())
	to-js-const : identifier -> constDecl(identifier, Null())
	
	stmt-to-js(|defername) : VarSpec(IdentifierList(targets), VarDeclAssign(ExpressionList(values))) -> (expressions, stmts)
		with
			debug(!<concat-strings> ["Targets ", <write-to-string> targets]);
			debug(!<concat-strings> ["Values ", <write-to-string> values]);
			tuples := <zip(to-js-vars)> (targets, values);
			expressions := <map(exp)> tuples;
			stmts := <mapconcat(stmts)> tuples
	
	stmt-to-js(|defername): ConstSpec(IdentifierList(targets), ConstDeclAssign(ExpressionList(values))) -> (expressions, stmts)
		with
			debug(!<concat-strings> ["Targets ", <write-to-string> targets]);
			debug(!<concat-strings> ["Values ", <write-to-string> values]);
			tuples := <zip(to-js-consts)> (targets, values);
			expressions := <map(exp)> tuples;
			stmts := <mapconcat(stmts)> tuples
	
	to-js-vars: (target, value) -> (varDecl(target, <exp> valueJs), <stmts> valueJs)
		with
			valueJs := <gen-js-ast> value
	
	to-js-consts: (target, value) -> (constDecl(target, <exp> valueJs), <stmts> valueJs)
		with
			valueJs := <gen-js-ast> value
			
	stmt-to-js(|defername) : ShortVarDecl(IdentifierList(targets), ShortVarDeclAssign(ExpressionList(values))) -> (expressions, stmts)
		with
			tuples := <zip(to-js-vars)> (targets, values);
			expressions := <map(exp)> tuples;
			stmts := <mapconcat(stmts)> tuples