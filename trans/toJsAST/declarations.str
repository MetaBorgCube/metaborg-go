module toJsAST/declarations

imports 
	signatures/-
	signatures/spoofaxJS-sig
	signatures/MethodDecl-sig
	signatures/Parameter-sig
	signatures/Statement-sig
	signatures/Expression-sig
	signatures/Common-sig
	trans/pp
	helpers
		
rules
	
	gen-js-ast : FunctionDecl(
		FunctionName(name),
		Function(
			Signature(Parameters(params), returnType),
			FunctionBody(block)
		)
	) -> method(name, paramsJs, bodyJs)
		where
			debug(!<concat-strings> ["Found function ", name, " with parameters ", <write-to-string> params]);
			paramsJs := <map(gen-js-ast)> params;
			bodyJs := <gen-js-ast> block
	
	gen-js-ast : ParameterDecl(name, _) -> parameter(name)
	
	
	gen-js-ast : VarDecl(varDecl) -> <gen-js-ast> varDecl
	
	gen-js-ast : VarSpecTyped(IdentifierList(identifierList), _, None()) -> declsJs
		where
			// Ignore type
			declsJs := <map(to-js-id)> identifierList
	
	to-js-id : identifier -> varDecl(identifier, Null())
	
	gen-js-ast : VarSpec(IdentifierList(targets), VarDeclAssign(ExpressionList(values))) -> declarationsJs
		with
			debug(!<concat-strings> ["Targets ", <write-to-string> targets]);
			debug(!<concat-strings> ["Values ", <write-to-string> values]);
			declarationsJs := <zip(to-js-ids)> (targets, values)
	
	
	to-js-ids: (target, value) -> varDecl(target, valueJs)
		with
			valueJs := <gen-js-ast> value