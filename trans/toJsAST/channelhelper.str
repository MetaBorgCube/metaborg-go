module toJsAST/channelhelper

imports
	signatures/- 
	signatures/Expression-sig
	signatures/spoofaxJS-sig
	toJsAST/toJsAST
	
signature
	sorts
		Receive
		
	constructors
		ReceiveStmt: Operand * Operand -> Statement
		SubstitutedExp: Operand * List(Statement) * StringLit -> UnaryExpr	
		
rules
	
	subAllChannels = topdown(try(substitute-channels))		
	
	//Substitute Receive with var
	//TODO: Handle Make
	substitute-channels: UnaryExpr("<-", PrimaryExpr(Operand(OperandName(x)))) -> SubstitutedExp(PrimaryExpr(Operand(OperandName(subVarName))), [s], subVarName) 
		where
			subVarName := <newname> "gochanjs";
			s := ReceiveStmt(Operand(OperandName(subVarName)), Operand(OperandName(x)))
		
	substitute-channels: UnaryExpr("<-", innerexp) -> SubstitutedExp(PrimaryExpr(Operand(OperandName(subVarName))), stmtList, subVarName)
		where
			subVarName := <newname> "gochanjs";
			subbedInnerExp := <substitute-channels> innerexp;
			stmt := ReceiveStmt(Operand(OperandName(subVarName)), <debug(!"subinner");lastExp> subbedInnerExp);
			stmtList := <addStmt; extract-stmtlist> (subbedInnerExp, stmt)

	substitute-channels: PrimaryExpr(Operand(GroupedExpression(UnaryExpr(x)))) -> <substitute-channels> x

	generate-receive(|parent, rest): [ReceiveStmt(varname, channelExp) | []] -> [
			expStmt(
                Call(
                  Property(channelExpJs, "receive")
                , [ AnonFunction(
                      [parameter(varnameJs)]
                    , <conc> (parentJs, tailJs)
                    )
                  ]
                )
            )]
		where
			channelExpJs := <gen-js-ast> channelExp;
			varnameJs := < extract-varname> varname;
			parentJs := <gen-js-ast> parent;
			tailJs := <debug(!"RestToJS"); stmt-iter> rest
			
			
	generate-receive(|parent, rest): [ReceiveStmt(varname, channelExp) | tail] -> [
			expStmt(
                Call(
                  Property(channelExpJs, "receive")
                , [ AnonFunction(
                      [parameter(varnameJs)]
                    , nextReceive
                    )
                  ]
                )
            )]
		where
			channelExpJs := <gen-js-ast> channelExp;
			varnameJs := <extract-varname> varname;
			nextReceive := <debug(!"Blockingnonlast"); generate-receive(|parent, rest)> tail


	lastVar : SubstitutedExp(_, _, varname) -> varname
	
	lastExp : SubstitutedExp(exp, _, _) -> exp
	
	extract-stmtlist : SubstitutedExp(_, list, _) -> list
	
	extract-varname : Operand(OperandName(subVarName)) -> subVarName
	
	addStmt : (SubstitutedExp(exp, stmtlist, lastvar), stmt) ->  SubstitutedExp(exp, newlist, lastvar)
		with
			newlist := <conc; debug(!"newlist")> (stmtlist, [stmt])
		
	
	