module toJsAST/expressions

imports 
	signatures/-
	signatures/spoofaxJS-sig
	signatures/MethodDecl-sig
	signatures/Parameter-sig
	signatures/Statement-sig
	signatures/Expression-sig
	signatures/Common-sig
	trans/pp
	helpers
		
rules
	
	gen-js-ast:
		UnaryExpr(unaryExpression) -> <gen-js-ast> unaryExpression
	
	gen-js-ast:
		PrimaryExpr(primaryExpression) -> <gen-js-ast> primaryExpression
	
	gen-js-ast:
		PrimaryExprArguments(
			Operand(OperandName("println")),
			args
		) -> MethodCall(Identifier("console"), "log", argsJs)
		where
			argsJs := <gen-js-ast> args
	
	// If the target is an operand, make a JS function call
	gen-js-ast:
		PrimaryExprArguments(
			Operand(
				OperandName(target)
			),
			args
		) -> FunctionCall(target, argsJs)
		where
			argsJs := <gen-js-ast> args
	
	// If the target is a primary expression, make a JS method call
	
	gen-js-ast:
		PrimaryExprArguments(
			Operand(
				MethodExpr(
					TypeName(receiver),
					methodName
				)
			),
			args
		) -> MethodCall(Identifier(receiver), methodName, argsJs)
		where
			argsJs := <gen-js-ast> args

	gen-js-ast:
		Arguments(
			ExpressionList(args)
		) -> <map(gen-js-ast)> args

	gen-js-ast:
		Operand(operand) -> <gen-js-ast> operand

	gen-js-ast:
		OperandName(name) -> Identifier(name)

	gen-js-ast:
		Literal(literal) -> <gen-js-ast> literal

	gen-js-ast: IntLit(int) -> String(int)
	gen-js-ast: StringLit(string) -> String(string)