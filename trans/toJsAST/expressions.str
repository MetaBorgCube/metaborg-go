module toJsAST/expressions

imports 
	signatures/-
	signatures/spoofaxJS-sig
	signatures/MethodDecl-sig
	signatures/Parameter-sig
	signatures/Statement-sig
	signatures/Expression-sig
	signatures/Common-sig
	trans/pp
	helpers
	toJsAST/statements
	toJsAST/declarations
	toJsAST/channelhelper
		
rules
	
	stmts: (_, stmts) -> stmts
	exp: (exps, _) -> exps
	
	gen-js-ast:
		PrimaryExpr(primaryExpression) -> <gen-js-ast> primaryExpression
	
	gen-js-ast:
		PrimaryExprArguments(
			Operand(OperandName("println")),
			args
		) -> (Call(Property(Identifier("console"), "log"), <exp> argsJs), <stmts> argsJs)
		where
			argsJs := <gen-js-ast> args

	gen-js-ast:
		PrimaryExprArguments(
			Operand(OperandName("make")),
			TypeArgWithList(Channel(_), 
				args
            )
		) -> (Call(Property(Identifier(GOROUTINE_LIBNAME), GOROUTINE_MAKECHANNELMETHOD), <exp> argsJs), <stmts> argsJs)
		where
			argsJs := <gen-js-ast> Arguments(Some(args))
			
			
	gen-js-ast:
		PrimaryExprArguments(
			Operand(OperandName("make")),
			TypeArg(Channel(_))
		) -> (Call(Property(Identifier(GOROUTINE_LIBNAME), GOROUTINE_MAKECHANNELMETHOD), [IntegerLiteral("0")]), [])
	
	// If the target is an operand, make a JS function call
	// TODO: Callback
	gen-js-ast:
		PrimaryExprArguments(
			Operand(
				OperandName(target)
			),
			args
		) -> (Identifier(subVarName), allStmts)
		where
			subVarName := <newname> "_functionresult";
			argsJs := <gen-js-ast; debug(!"argsJs")> args;
			stmt := [SubstitudedCall(target, <exp> argsJs, subVarName)]; 
			allStmts := <conc> (<stmts> argsJs, stmt) 
	
	gen-js-ast:
		PrimaryExprArguments(exp,args)
			-> (Identifier(subVarName), allStmts)
		where
			subVarName := <newname> "_functionresult";
			argsJs := <gen-js-ast; debug(!"argsJs")> args;
			expJs := <gen-js-ast> exp;
			stmt := [SubstitudedCall(<exp> expJs, <exp> argsJs, subVarName)]; 
			allStmts := <conc> (<stmts> expJs,<stmts> argsJs, stmt) 
	
	//The Addition is added to support slicing.
	gen-js-ast:
		PrimaryExprIndex(
			idExp,
			Index(indexExp)
		) ->  (Array(Call(Property(<exp> idExpJs, ARRAYLIB_LOOKUPMETHOD), [<exp> indexExpJs]), [addition]), allStmts)
		with
			idExpJs := <gen-js-ast> idExp;
			indexExpJs := <gen-js-ast> indexExp;
			addition := Addition(indexExpJs, Call(Property(<exp> idExpJs, ARRAYLIB_GETSTARTPOSTMETHOD), [<exp> indexExpJs]));
			allStmts := <conc> (<stmts> idExpJs, <stmts> indexExpJs)

	gen-js-ast:
		PrimaryExprSlice(
			idExp,
			slice
		) ->  (Call(Property(<exp> idExpJs, ARRAYLIB_CREATESLICEMETHOD), <exp> sliceJs), allStmts)
		with
			idExpJs := <gen-js-ast> idExp;
			sliceJs := <gen-js-ast> slice;
			allStmts := <conc> (<stmts> idExpJs, <stmts> sliceJs)
	
	gen-js-ast:
		PrimaryExprSelector(
			exp, 
			Selector(selectorName)
		) -> (Property(<exp> tuple, selectorName), <stmts> tuple)
		with
			tuple := <gen-js-ast> exp
			
	gen-js-ast:
		Slice(exp1, exp2) 
		-> ([<exp> exp1Js, <exp> exp2Js], allStmts)
		with
			exp1Js := <slice-exp-to-js> exp1;
			exp2Js := <slice-exp-to-js> exp2;
			allStmts := <conc> (<stmts> exp1, <stmts> exp2)
			
	
	slice-exp-to-js: Some(x) -> <gen-js-ast> x
	slice-exp-to-js: None()  -> (Undefined(), [])
	
	// If the target is a primary expression, make a JS method call
	
	gen-js-ast:
		Channel(
			UnaryExpr(
				x
			)
		) ->  <gen-js-ast> x
	
	gen-js-ast:
		UnaryExpr("*", exp)
		-> (Call(Property(<exp> expJs, POINTERLIB_GET), []), <stmts> expJs)
		where
			expJs := <gen-js-ast> exp

	
	gen-js-ast: UnaryExpr("<-", innerexp) -> (Identifier(subVarName), <conc> (<stmts> innerExpTuple, [stmt]))
		where
			subVarName := <newname> "gochanjs";
			innerExpTuple := <gen-js-ast> innerexp;
			stmt := ReceiveStmt(Operand(OperandName(subVarName)), <exp> innerExpTuple)	
	
	gen-js-ast: 
		UnaryExpr("&", 
			exp
		) -> (Call(Property(Identifier(POINTERLIB_NAME), POINTERLIB_NEWPOINTER), [set, get]), <stmts> expJs)
		with
			expJs := <gen-js-ast> exp;
			expJsExp := <exp> expJs;
			set:= <gen-pointer-set> expJsExp;
			get:= <gen-pointer-get> expJsExp
	
	gen-js-ast: UnaryExpr(x) -> <gen-js-ast> x
	
	gen-pointer-set: e -> AnonFunction([parameter(parname)], [assignment(e, Identifier(parname))])
		with
			parname := <newname> "___parset___"
			
	gen-pointer-get: e -> AnonFunction([], [return(e)])
	
	gen-js-ast:
		PrimaryExprArguments(
			Operand(
				MethodExpr(
					TypeName(receiver),
					methodName
				)
			),
			args
		) -> Call(Property(Identifier(receiver), methodName), argsJs)
		where
			argsJs := <gen-js-ast> args
	
	//TODO: Return
	gen-js-ast:
		PrimaryExprArguments(
			Operand(
				Literal(functionLit)
			),
			args
		) -> (Identifier(subVarName), <conc> (<stmts> argsTuple, stmt))
		where
			subVarName := <newname> "_functionresult";
			functionJs := <gen-js-ast; exp> functionLit;
			argsTuple := <gen-js-ast> args;
			stmt := [SubstitudedCall(functionJs, <exp> argsTuple, subVarName)]
			
	gen-js-ast:
		Arguments(
			ExpressionList(args)
		) -> (expArgJs, allStmts)
		where 
			argsJs := <map(gen-js-ast)> args;
			expArgJs := <map(exp)> argsJs;
			allStmts := <mapconcat(stmts)> argsJs 

	gen-js-ast:
		Arguments(
			Some(ExpressionList(args))
		) -> (expArgJs, allStmts)
		where 
			argsJs := <map(gen-js-ast); debug(!"Argsjs")> args;
			expArgJs := <map(exp); debug(!"Exps")> argsJs;
			allStmts := <mapconcat(stmts); debug(!"Stmts")> argsJs 
	
	gen-js-ast:
		Arguments(
			None()
		) -> ([], [])

	gen-js-ast:
		Operand(operand) -> <gen-js-ast> operand


	gen-js-ast: SubstitutedExp(exp, stmtlist, lastvar) -> <gen-js-ast> exp
	
	gen-js-ast:
		OperandName(name) -> (Identifier(name), [])

	gen-js-ast:
		Literal(literal) -> <debug(!"LIT"); gen-js-ast> literal

	gen-js-ast: IntLit(int) -> (String(int), [])
	gen-js-ast: StringLit(string) -> (String(string), [])


	//TODO composite literals cps
	gen-js-ast: CompositeLit(ArrayType(sizeExp, type), arrayLit) -> 
				(Call(Property(Identifier(ARRAYLIB_NAME), ARRAYLIB_NEWARRAYMETHOD), [ 
						  <exp> arrayLitJs
	            		, <exp> sizeExpJs
	            		, String(typeJs)
            		]
          		), <debug(!"aLitJs"); conc; debug(!"aLitJs")> (<stmts> sizeExpJs, <stmts> arrayLitJs) )
		with
			sizeExpJs := <gen-js-ast> sizeExp;
			//TODO: Type to JS
			typeJs := "''";
			arrayLitJs := <array-to-js> arrayLit

	gen-js-ast: CompositeLit(typename, list) -> (Call(
        Property(Identifier(typename), STRUCTLIB_GETNEWMETHOD)
      , [<exp> tuple]
      ), <stmts> tuple)
      	with
      		tuple := <debug(!"StructLit"); array-to-js> list
                  
	
	array-to-js: LiteralValue(Some(ElementList(x))) -> (ArrayLiteral(expList), stmtList)	
		where
			<eq> (<collect-om(?KeyValPair(name, exp))> x, []);
			tupleList := <map(gen-js-ast)> x;
			expList := <map(exp)> tupleList;
			stmtList := <mapconcat(stmts)> tupleList

	array-to-js: LiteralValue(Some(ElementList(x))) -> (Object(expList), stmtList)	
		where
			tupleList := < map(gen-js-ast)> x;
			expList := <map(exp)> tupleList;
			stmtList := <mapconcat(stmts)> tupleList
			
	array-to-js: LiteralValue(None()) -> (ArrayLiteral([]), []) 	

	//Object([KeyValue("x", IntegerLiteral("5"))])
	gen-js-ast: FunctionLit(function) -> <gen-js-ast> function
	gen-js-ast: SingleElem(exp) -> <gen-js-ast> exp
	gen-js-ast: KeyValPair(name, exp) -> (KeyValue(name, <exp> tuple), <stmts> tuple)
		where
			tuple := <debug(!"KvP2"); gen-js-ast;debug(!"KvPPost")> exp

	//TODO: CPS
	gen-js-ast:
		Function(
			Signature(Parameters(params), returnType),
			FunctionBody(block)
		) -> (AnonFunction(paramsJs, bodyJs), [])
		where
			retparname := <newname> "__retcallback__";
			<debug(!"Found anonymous function with parameters ")> <write-to-string> params;
			paramsJs := <conc> (<map(gen-js-ast)> params, [parameter(retparname)]);
			bodyJs := <func-block(|retparname)> block
					