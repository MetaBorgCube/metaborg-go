module toJsAST

imports 
	signatures/-
	signatures/spoofaxJS-sig
	signatures/MethodDecl-sig
	signatures/Parameter-sig
	signatures/Statement-sig
	signatures/Expression-sig
	signatures/Common-sig
	trans/pp
	helpers
	toJsAST/declarations
	toJsAST/statements
	toJsAST/expressions
	toJsAST/channelhelper
		
rules

	/*
	Strategies that transform Go AST to a Javascript AST.
	*/

	generate-js-ast :
		(selected, position, ast, path, project-path) -> (filename, pp)
		with
			filename := <guarantee-extension(|"js")> path;
			debug(!"Analyzing Channel Usage");
			//analyzedAst := <debug(!"Pre:"); subAllChannels; debug(!"Post:")> ast;
			debug(!"Starting compilation pretty printed JS AST...");
			result	 := <gen-js-ast> ast;
			debug(!"Compilation to JS AST finsished!");
			pp 		 := <pp-js> result;
			debug(!"Pretty printing of JS AST finished!")

	sub-go :
		(selected, position, ast, path, project-path) -> (filename, pp)
		with
			filename := <guarantee-extension(|"aterm")> path;
			debug(!"Analyzing Channel Usage");
			analyzedAst := <debug(!"Pre:"); subAllChannels; debug(!"Post:")> ast;
			pp 		 := <pp-lep-string> analyzedAst

	gen-js-ast : SourceFile(packageClause, _, topLevelDecls) -> Program(js)
		where
			packageName := <package-name> packageClause;
			debug(!<concat-strings> ["Ignoring package identifier (", packageName, ") and imports"]);
			jsdecl := <map(gen-js-ast)> topLevelDecls;
			js := <concat> [IMPORTLIST, jsdecl, [expStmt(Call(Identifier("main"), []))]]
overlays
	
	IMPORTLIST = [
		varDecl(GOROUTINE_LIBNAME, Call(Identifier("require"), [String("\"\"../js/goroutine.js\"\"")])),
		varDecl(ARRAYLIB_NAME, Call(Identifier("require"), [String("\"\"../js/go-array.js\"\"")])),
		varDecl(POINTERLIB_NAME, Call(Identifier("require"), [String("\"\"../js/go-pointer.js\"\"")]))
	]
	
	