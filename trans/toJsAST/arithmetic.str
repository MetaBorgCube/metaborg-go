module toJsAST/arithmetic

imports 
	signatures/-
	signatures/spoofaxJS-sig
	signatures/MethodDecl-sig
	signatures/Parameter-sig
	signatures/Statement-sig
	signatures/Expression-sig
	signatures/Common-sig
	trans/pp
	helpers
	toJsAST/statements
	toJsAST/declarations
	toJsAST/channelhelper
		
rules
	
	// BinaryExpr(_, RelOp, _)
	gen-js-ast:	BinaryExpr(lhs, "==", rhs) -> Equals(<gen-js-ast> lhs, <gen-js-ast> rhs)
	gen-js-ast:	BinaryExpr(lhs, "!=", rhs) -> NotEquals(<gen-js-ast> lhs, <gen-js-ast> rhs)
	gen-js-ast:	BinaryExpr(lhs, "<", rhs) -> Lower(<gen-js-ast> lhs, <gen-js-ast> rhs)
	gen-js-ast:	BinaryExpr(lhs, "<=", rhs) -> LowerEquals(<gen-js-ast> lhs, <gen-js-ast> rhs)
	gen-js-ast:	BinaryExpr(lhs, ">", rhs) -> Greater(<gen-js-ast> lhs, <gen-js-ast> rhs)
	gen-js-ast:	BinaryExpr(lhs, ">=", rhs) -> GreaterEquals(<gen-js-ast> lhs, <gen-js-ast> rhs)
	
	// BinaryExpr(_, AddOp, _)
	gen-js-ast:	BinaryExpr(lhs, "+", rhs) -> Addition(<gen-js-ast> lhs, <gen-js-ast> rhs)
	gen-js-ast:	BinaryExpr(lhs, "-", rhs) -> Substraction(<gen-js-ast> lhs, <gen-js-ast> rhs)
	
	// BinaryExpr(_, MulOp, _)
	gen-js-ast:	BinaryExpr(lhs, "*", rhs) -> Multiplication(<gen-js-ast> lhs, <gen-js-ast> rhs)
	gen-js-ast:	BinaryExpr(lhs, "/", rhs) -> Division(<gen-js-ast> lhs, <gen-js-ast> rhs)
	
	stmt-to-js(|defername):
		Assignment(
			ExpressionList([target]), AssignAddOp("+"), ExpressionList([value])
		) -> ([js], statements)
	      where
			tuple := <to-js-equals-addition-assign> (target, value);
			js := <stmt-list> tuple;
			statements := <stmts> tuple
			
	to-js-equals-addition-assign:
		(lhs, rhs) -> (
			assignment(<exp> lhsJs, Addition(<exp> lhsJs, <exp> rhsJs)),
			<stmts> rhsJs
		)
		where
			lhsJs := <gen-js-ast> lhs;
			rhsJs := <gen-js-ast> rhs
	
	stmt-to-js(|defername):
		Assignment(
			ExpressionList([target]), AssignAddOp("-"), ExpressionList([value])
		) -> ([js], statements)
	      where
			tuple := <to-js-equals-substraction-assign> (target, value);
			js := <stmt-list> tuple;
			statements := <stmts> tuple
			
	to-js-equals-substraction-assign:
		(lhs, rhs) -> (
			assignment(<exp> lhsJs, Substraction(<exp> lhsJs, <exp> rhsJs)),
			<stmts> rhsJs
		)
		where
			lhsJs := <gen-js-ast> lhs;
			rhsJs := <gen-js-ast> rhs
	
	stmt-to-js(|defername):
		Assignment(
			ExpressionList([target]), AssignMulOp("*"), ExpressionList([value])
		) -> ([js], statements)
	      where
			tuple := <to-js-equals-multiplication-assign> (target, value);
			js := <stmt-list> tuple;
			statements := <stmts> tuple
			
	to-js-equals-multiplication-assign:
		(lhs, rhs) -> (
			assignment(<exp> lhsJs, Multiplication(<exp> lhsJs, <exp> rhsJs)),
			<stmts> rhsJs
		)
		where
			lhsJs := <gen-js-ast> lhs;
			rhsJs := <gen-js-ast> rhs
	
	stmt-to-js(|defername):
		Assignment(
			ExpressionList([target]), AssignMulOp("/"), ExpressionList([value])
		) -> ([js], statements)
	      where
			tuple := <to-js-equals-division-assign> (target, value);
			js := <stmt-list> tuple;
			statements := <stmts> tuple
			
	to-js-equals-division-assign:
		(lhs, rhs) -> (
			assignment(<exp> lhsJs, Division(<exp> lhsJs, <exp> rhsJs)),
			<stmts> rhsJs
		)
		where
			lhsJs := <gen-js-ast> lhs;
			rhsJs := <gen-js-ast> rhs