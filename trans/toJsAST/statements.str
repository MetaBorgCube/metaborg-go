module toJsAST/statements

imports 
	signatures/-
	signatures/spoofaxJS-sig
	signatures/MethodDecl-sig
	signatures/Parameter-sig
	signatures/Statement-sig
	signatures/Expression-sig
	signatures/Common-sig
	toJsAST/channelhelper
	toJsAST/expressions
	trans/pp
	helpers
	
		
rules
	
	
	//TODO: Fix Defer
	
	stmt-list : (stmtlist, _) -> stmtlist
	subbed-list : (_, stmt) -> stmt
	
	func-block(|callbackname) : Block(statementList) -> [try(
		<conc> ([deferStackDecl, deferStackSetRet], statementsJs), 
		catch(Identifier("e"), [executeDeferred], None())
	)
	]
		where
			deferstackname := <newname> "___deferstack___";
			deferStackDecl := varDecl(deferstackname, Call(Property(Identifier(GOROUTINE_LIBNAME), GODEFER_NEWDEFERMETHOD), []));
			deferStackSetRet := expStmt(Call(Property(Identifier(deferstackname), GODEFER_SETRETMETHOD), [Identifier(callbackname)]));
			statements := <statements-from-list> statementList;
			executeDeferred := <get-deferstmt(|deferstackname)> [];
			statementsWithAddedJs := <conc> (statements, [AddedJsStmt(expStmt(Call(Property(Identifier(deferstackname), GODEFER_RETURNMETHOD),
				[]
			)))]);
			statementsJs := <debug(!"Process Block"); stmt-iter(|deferstackname); debug(!"Finished Block")> statementsWithAddedJs	
			//TODO: Add Cleanup on return
	
	gen-js-ast : Block(statementList) -> js
		where
			statements := <statements-from-list> statementList;
			js := <stmt-iter(|"")> statements 
	
	
	process-substituted(|parstmt, rest, defername): [SendStmt(channel, exp) | []] -> [
		expStmt(
			Call(
				Property(<Fst> parstmt, "send"),[ 
				<Snd> parstmt, 
				AnonFunction([], [try(remaining, catch(Identifier("e"), [executeDeferred], None()))])
               ]
            )
        )]
        where
        	remaining := <debug(!"Remaining"); stmt-iter(|defername)> rest;
        	executeDeferred := <debug(!"edef"); get-deferstmt(|defername)> []
	
	process-substituted(|parstmt, rest, defername): [SubstitudedCall(target, argsJs, subVarName) | []] -> [callStmt]
		where
			tailJs := <debug(!"final"); stmt-iter(|defername)> rest;
			executeDeferred := <debug(!"test"); get-deferstmt(|defername)> [];
			retFunc := AnonFunction([parameter(subVarName)], [try(<debug(!"conc1"); conc> (parstmt, tailJs), catch(Identifier("e"), [executeDeferred], None()))]);
			callStmt := expStmt(Call(<get-target> target, <debug(!"conc2"); conc> (argsJs, [retFunc])))
	
	process-substituted(|parstmt, rest, defername): [SubstitudedCall(target, argsJs, subVarName) | tail] -> [callStmt]
		where
			tailJs := <debug(!"tails"); process-substituted(|parstmt, rest, defername)> tail;
			executeDeferred := <debug(!"edef"); get-deferstmt(|defername)> [];
			retFunc := AnonFunction([parameter(subVarName)], [try(tailJs , catch(Identifier("e"), [executeDeferred], None()))]);
			callStmt := expStmt(Call(<get-target> target, <conc> (argsJs, [retFunc])))		

	get-target: a@AnonFunction(x, y) -> Parenthesised(a)
	get-target: p@Property(_,_) -> p
	get-target: x -> Identifier(x)


	process-substituted(|parent, rest, dstack): [ReceiveStmt(varname, channelExp) | []] -> [
			expStmt(
                Call(
                  Property(channelExp, "receive")
                , [ AnonFunction(
                      [parameter(varnameJs)]
                    , [try(<conc> (parent, tailJs), catch(Identifier("e"), [executeDeferred], None()))]
                    )
                  ]
                )
            )]
		where
			varnameJs := <debug(!"vn"); extract-varname> varname;
			tailJs := <debug(!"RestToJS"); stmt-iter(|dstack)> rest;
			executeDeferred := <get-deferstmt(|dstack)> []

	process-substituted(|parent, rest, dstack): [ReceiveStmt(varname, channelExp) | tail] -> [
			expStmt(
                Call(
                  Property(channelExpJs, "receive")
                , [ AnonFunction(
                      [parameter(varnameJs)]
                    , nextReceive
                    )
                  ]
                )
            )]
		where
			channelExpJs := <gen-js-ast> channelExp;
			varnameJs := <extract-varname> varname;
			nextReceive := <debug(!"Blockingnonlast"); process-substituted(|parent, rest, dstack)> tail
	
	
	process-substituted(|parstmt, rest, defername): [] -> <conc> (parstmt, restJs)
		where
			restJs := <debug(!"iter"); stmt-iter(|defername); debug(!"itert")> rest

	stmt-iter(|defername): [stat@SendStmt(channel, exp) | xs] -> ret 
		where
			tupleChan := <gen-js-ast> channel;
			tupleExp := <gen-js-ast> exp;
			stmts := <concat> [<stmts> tupleChan, <stmts> tupleExp, [stat]];
			ret := <process-substituted(|(<exp> tupleChan, <exp> tupleExp), xs, defername)> stmts

	stmt-iter(|defername): [stmt | xs] -> ret
		where
			tuple := <debug(!"Stmt-convert started"); convert-stmt(|defername); debug(!"Stmt-converted")> stmt;
			subbedExps := <subbed-list> tuple;
			ret := <process-substituted(|<stmt-list> tuple, xs, defername)> subbedExps
			
	stmt-iter(|defername): [] -> []
	
	
	//Call(Property(Identifier("console"),"log"),[String("\"test\"")])
	//To simlify it only (anonymous) functions are allowed;
	
	/**
	stmt-iter(|defername): [DeferStmt(exp) | tail] -> <concat> [[addStmt], paramStmt, <stmt-iter(|defername)> tail]
		where
			expJs := <gen-js-ast; debug(!"ExpInJS")> exp;
			addStmt := expStmt(Call(Property(Identifier(defername), "add"), [<funcname> expJs]));
			paramStmt :=  <params; map(gen-addparamstmt(|defername))> expJs
	*/
	
			
	convert-stmt(|defername) = stmt-to-js(|defername) <+ debug(!"Failed to convert STMT")
	
	stmt-to-js(|defername): AddedJsStmt(stmt) -> ([stmt], [])
	
	stmt-to-js(|defername): ExpressionStmt(expression) -> ([expStmt(exp)], stmts)
		where
			tuple := <gen-js-ast> expression;
			exp := <exp> tuple;
			stmts := <stmts> tuple
			
	stmt-to-js(|defername):
		GoStmt(exp) -> ([expStmt(Call(Property(Identifier(GOROUTINE_LIBNAME), GOROURTINE_GOMETHOD),
			[AnonFunction([], [expStmt(<exp> tuple)])]
		))], <stmts> tuple)
		where
			tuple := <debug(!"GO Do stuff"); go-exp-to-js> exp
			
	stmt-to-js(|defername):
		ReturnStmt(None()) -> ([
			expStmt(Call(Property(Identifier(defername), GODEFER_RETURNMETHOD),
				[]
			)),
			return(Undefined())
		], [])

	stmt-to-js(|defername):
		ReturnStmt(Some(ExpressionList([exp]))) -> ([
			expStmt(Call(Property(Identifier(defername), GODEFER_RETURNMETHOD),
				[<exp> expJs]
			)),
			return(Undefined())
		], <stmts> expJs)
		where
			expJs := <gen-js-ast> exp
	
	stmt-to-js(|defername):
		ReturnStmt(Some(expList)) -> ([
			expStmt(Call(Property(Identifier(defername), GODEFER_RETURNMETHOD),
				[<exp> arrayJs]
			)),
			return(Undefined())
		], <stmts> arrayJs)
		where
			arrayJs := <exps-list-to-js-array> expList
			
	// Matches on functions returning (possible) multiple values
	stmt-to-js(|defername): Assignment(
			ExpressionList(targetExpressions),
			AssignEquals(),
			ExpressionList([singleValueExpression])
		) -> (js, <stmts> valuesArray)
	      where
	      	<gt> (<length> targetExpressions, 1);
			valuesArray := <gen-js-ast> singleValueExpression;
			js := <gen-js-ast-multiple-assignment> (<exp> valuesArray, targetExpressions)
		
	
	stmt-to-js(|defername):
		Assignment(
			ExpressionList(targetExpressions),
			AssignEquals(),
			ExpressionList(valueExpressions)
		) -> (js, statements)
	      where
			tuples := <zip(to-js-equals-assign)> (targetExpressions, valueExpressions);
			js := <map(stmt-list)> tuples;
			statements := <mapconcat(stmts)> tuples
	
	gen-js-ast-multiple-assignment:
		(valuesArray, targetExps) -> <flatten-list> [[valuesArrayJs], assignmentsJs]
		where
			tmpIdentifier := <strcat> ("tmp_assign_", <int-to-string> <abs> <next-random>);
			valuesArrayJs := varDecl(tmpIdentifier, valuesArray);
			assignmentsJs := <map(gen-js-ast-indexed-assign(|tmpIdentifier))> <add-indices> targetExps
	
	to-js-equals-assign: (UnaryExpr(UnaryExpr("*", operand)), rhs) 
		-> (expStmt(Call(Property(operandJs, POINTERLIB_SET), [<exp> rhJs])), <stmts> rhJs)
		where
			rhJs := <gen-js-ast> rhs;
			operandJs := <gen-js-ast; exp> operand

	to-js-equals-assign:
		(lhs, rhs) -> (assignment(<exp> lhsJs,<exp> rhsJs), <stmts> rhsJs)
		where
			lhsJs := <gen-js-ast> lhs;
			rhsJs := <gen-js-ast> rhs

	gen-js-ast-indexed-assign(|tmpIdentifier): (index, UnaryExpr(UnaryExpr("*", operand))) 
	-> expStmt(Call(Property(operandJs, POINTERLIB_SET), [array])) 
		where
			operandJs := <gen-js-ast; exp> operand;
			array := Array(Identifier(tmpIdentifier), IntegerLiteral(<int-to-string> <int-dec> index))
			
	gen-js-ast-indexed-assign(|tmpIdentifier): (index, lhs) -> assignment(lhsJs, Array(Identifier(tmpIdentifier), IntegerLiteral(<int-to-string> <int-dec> index)))
		where
			lhsJs := <gen-js-ast; exp> lhs
			

	
	exps-list-to-js-array:
		ExpressionList(exps) -> (ArrayLiteral(<map(exp)> expsJs), <mapconcat(stmts)> expsJs)
		where
			expsJs := <map(gen-js-ast)> exps

	go-exp-to-js: PrimaryExprArguments(
			Operand(
				OperandName(target)
			),
			args
		) -> (Call(target, <exp> argsJs), <stmts> argsJs)
		where
			argsJs := <gen-js-ast> args

	go-exp-to-js: UnaryExpr(x) -> <debug(!"GoUn"); go-exp-to-js> x
	go-exp-to-js: PrimaryExpr(x) -> <debug(!"GoPrim"); go-exp-to-js> x
	
	get-deferstmt(|name): x -> []
		where
			<equal>(name, "")
	
	get-deferstmt(|defername): x -> expStmt(Call(Property(Identifier(defername), GODEFER_EXECECUTEMETHOD), []))		


	funcname: Call(Property(ident, p), params) -> Property(ident, p)
	funcname: Call(x, params) -> Identifier(x)
	
	params: Call(funcname, params) -> params
	gen-addparamstmt(|defername): x -> expStmt(Call(Property(Identifier(defername), GODEFER_ADDPARAMMETHOD), [x]))
overlays 
	
	GOROUTINE_LIBNAME = "routine"
	GOROURTINE_GOMETHOD = "go"
	GOROUTINE_MAKECHANNELMETHOD = "newChannel"
	
	GODEFER_NEWDEFERMETHOD = "newDeferList"
	GODEFER_ADDPARAMMETHOD = "addParam"
	GODEFER_ADDDEFERMETHOD = "add"
	GODEFER_EXECECUTEMETHOD = "cleanUp"
	GODEFER_SETRETMETHOD = "setCallback"
	GODEFER_RETURNMETHOD = "ret"
	
	ARRAYLIB_NAME = "__GO_ARRAYLIB__"
	ARRAYLIB_NEWARRAYMETHOD = "newArray" 
	ARRAYLIB_LOOKUPMETHOD = "getVal"
	ARRAYLIB_CREATESLICEMETHOD = "getSlice"
	ARRAYLIB_GETSTARTPOSTMETHOD = "getStartPos"
	
	POINTERLIB_NAME = "__GO_POINTERLIB__"
	POINTERLIB_NEWPOINTER = "newPointer"
	POINTERLIB_GET = "get"
	POINTERLIB_SET = "set"
	
	STRUCTLIB_NAME = "__GO_STRUCTLIB__"
	STRUCTLIB_DEFSTRUCTMETHOD = "defStruct"
	STRUCTLIB_GETNEWMETHOD = "getNew"
