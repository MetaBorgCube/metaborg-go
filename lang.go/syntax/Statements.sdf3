/**
 * Statements -- https://golang.org/ref/spec#Statements
 */
module Statements

imports

  Blocks
  Declarations
  Expressions
  Lexical
  Types

context-free start-symbols

  Stmt

context-free syntax

  Stmt.DeclarationStmt        = Declaration
  Stmt                        = LabeledStmt
  Stmt                        = SimpleStmt
  Stmt                        = GoStmt
  Stmt                        = ReturnStmt
  Stmt                        = BreakStmt
  Stmt                        = ContinueStmt
  Stmt                        = GotoStmt
  Stmt                        = FallthroughStmt
  Stmt                        = Block
  Stmt                        = IfStmt
  Stmt                        = SwitchStmt
  Stmt                        = SelectStmt
  Stmt                        = ForStmt
  Stmt                        = DeferStmt

  SimpleStmt                  = EmptyStmt
  SimpleStmt                  = ExprStmt
  SimpleStmt                  = SendStmt
  SimpleStmt                  = IncDecStmt
  SimpleStmt                  = Assignment
  SimpleStmt                  = ShortVarDecl


/**
 * Empty statements -- https://golang.org/ref/spec#Empty_statements
 */
context-free syntax

  EmptyStmt.EmptyStmt         = <>


/**
 * Labeled statements -- https://golang.org/ref/spec#Labeled_statements
 */
context-free syntax

  LabeledStmt.LabeledStmt     = <<Label>: <Stmt>>
  Label.Label                 = <<ID>>
  Label-OPT.NoLabel           =
  Label-OPT                   = Label


/**
 * Expression statements -- https://golang.org/ref/spec#Expression_statements
 */
context-free syntax

  ExprStmt.ExprStmt           = Expr


/**
 * Send statements -- https://golang.org/ref/spec#Send_statements
 */
context-free syntax

  SendStmt.SendStmt           = [[Channel] <- [Expr]]
  Channel                     = Expr


/**
 * IncDec statements -- https://golang.org/ref/spec#IncDec_statements
 */
context-free syntax

  IncDecStmt.IncStmt          = <<Expr>++>
  IncDecStmt.DecStmt          = <<Expr>-->


/**
 * Assignments -- https://golang.org/ref/spec#Assignments
 */
context-free syntax

  Assignment.AssignStmt           = <<ExprList> = <ExprList>>

  // add_op
  Assignment.SumAssignStmt        = <<ExprList> += <ExprList>>
  Assignment.DifferenceAssignStmt = <<ExprList> -= <ExprList>>
  Assignment.BitwiseOrAssignStmt  = <<ExprList> |= <ExprList>>
  Assignment.BitwiseXorAssignStmt = <<ExprList> ^= <ExprList>>

  // mul_op
  Assignment.ProductAssignStmt    = [[ExprList] *= [ExprList]]
  Assignment.QuotientAssignStmt   = [[ExprList] /= [ExprList]]
  Assignment.RemainderAssignStmt  = [[ExprList] %= [ExprList]]
  Assignment.LeftShiftAssignStmt  = [[ExprList] <<= [ExprList]]
  Assignment.RightShiftAssignStmt = [[ExprList] >>= [ExprList]]
  Assignment.BitwiseAndAssignStmt = [[ExprList] &= [ExprList]]
  Assignment.BitClearAssignStmt   = [[ExprList] &^= [ExprList]]

context-free priorities
// TODO: priorities

/**
 * If statements -- https://golang.org/ref/spec#If_statements
 */
context-free syntax

  IfStmt.IfStmt               = <if <StmtInit-OPT> <Expr> <Block> <IfStmt-INNER-OPT>>
  IfStmt-INNER-OPT.NoIfElse   = <>
  IfStmt-INNER-OPT            = IfStmt-INNER
  IfStmt-INNER                = <else <Block>>
  IfStmt-INNER                = <else <IfStmt>>


  StmtInit-OPT.NoStmtInit     = <>
  StmtInit-OPT.StmtInit       = <<SimpleStmt>;>


/**
 * Switch statements -- https://golang.org/ref/spec#Switch_statements
 */
context-free syntax

  SwitchStmt                  = ExprSwitchStmt
  SwitchStmt                  = TypeSwitchStmt

// Expression switches
context-free syntax
  ExprSwitchStmt.ExprSwitch           = <switch <StmtInit-OPT> <Expr-OPT>{ <ExprCaseClause*> }>

  ExprCaseClause.ExprCaseClause       = <<ExprSwitchCase>: <StmtList>>

  ExprSwitchCase.ExprSwitchCase       = <case <ExprList>>
  ExprSwitchCase.ExprSwitchDefault    = <default>

// Type switches
context-free syntax
  TypeSwitchStmt.TypeSwitch           = <switch <StmtInit-OPT> <TypeSwitchGuard>{ <TypeCaseClause*> }>

  TypeSwitchGuard.TypeSwitchGuard     = <<ID> := <PrimaryExpr>.(type)>
  TypeSwitchGuard.TypeSwitchGuardNoID = <<PrimaryExpr>.(type)>

  TypeCaseClause.TypeCaseClause       = <<TypeSwitchCase>: <StmtList>>

  TypeSwitchCase.TypeSwitchCase       = <case <TypeList>>
  TypeSwitchCase.TypeSwitchDefault    = <default>

  TypeList                            = <<{Type ","}+>>


/**
 * For statements -- https://golang.org/ref/spec#For_statements
 */
context-free syntax
  ForStmt.ForStmt             = <for <ForStmt-INNER-OPT> <Block>>

  ForStmt-INNER-OPT.NoClause  = <>
  ForStmt-INNER-OPT           = ForStmt-INNER
  ForStmt-INNER               = Condition
  ForStmt-INNER               = ForClause
  ForStmt-INNER               = RangeClause

  Condition                   = Expr

  ForClause.ForClause         = <<InitStmt-OPT>; <Condition-OPT>; <PostStmt-OPT>>

  InitStmt-OPT.NoInitStmt     = <>
  InitStmt-OPT                = InitStmt
  InitStmt                    = SimpleStmt
  Condition-OPT.NoCondition   = <>
  Condition-OPT               = Condition
  PostStmt-OPT.NoPostStmt     = <>
  PostStmt-OPT                = PostStmt
  PostStmt                    = SimpleStmt

  RangeClause.RangeClause     = <<ExprOrIdListEq> range <Expr>>

  ExprOrIdListEq.ExprListEq   = <<ExprList> =>
  ExprOrIdListEq.IdListEq     = <<IDList> :=>


/**
 * Go statements -- https://golang.org/ref/spec#Go_statements
 */
context-free syntax

  GoStmt.GoStmt               = <go <Expr>>


/**
 * Select statements -- https://golang.org/ref/spec#Select_statements
 */
context-free syntax
  SelectStmt.Select           = <select { <CommClause*> }>
  CommClause.CommClause       = <<CommCase>: <StmtList>>
  CommCase.CommCaseSend       = <case <SendStmt>>
  CommCase.CommCaseRecv       = <case <RecvStmt>>
  CommCase.CommCaseDefault    = <default>

  RecvStmt.RecvStmt           = <<ExprOrIdListEq> <RecvExpr>>
  RecvExpr                    = Expr


/**
 * Return statements
 */
context-free syntax

  ReturnStmt.ReturnStmt       = <return <ExprList-OPT>>


/**
 * Break statements
 */
context-free syntax

  BreakStmt.BreakStmt         = <break <Label-OPT>>


/**
 * Continue statements
 */
context-free syntax

  ContinueStmt.ContinueStmt   = <continue <Label-OPT>>


/**
 * Goto statements
 */
context-free syntax

  GotoStmt.GotoStmt           = <goto <Label>>


/**
 * Fallthrough statements
 */
context-free syntax

  FallthroughStmt.FallthroughStmt = <fallthrough>


/**
 * Defer statements
 */
context-free syntax

  DeferStmt.DeferStmt         = <defer <Expr>>

