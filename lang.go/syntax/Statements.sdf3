module Statements // https://golang.org/ref/spec#Statements

imports

  Blocks
  Declarations
  Expressions
  Lexical
  Types

context-free start-symbols

  Statement

context-free syntax

  Statement = Declaration
  Statement = LabeledStmt
  Statement = SimpleStmt
  Statement = GoStmt
  Statement = ReturnStmt
  Statement = BreakStmt
  Statement = ContinueStmt
  Statement = GotoStmt
  Statement = FallthroughStmt
  Statement = Block
  Statement = IfStmt
  Statement = SwitchStmt
  Statement = SelectStmt
  Statement = ForStmt
  Statement = DeferStmt

  SimpleStmt = EmptyStmt
  SimpleStmt = ExpressionStmt
  SimpleStmt = SendStmt
  SimpleStmt = IncDecStmt
  SimpleStmt = Assignment
  SimpleStmt = ShortVarDecl


/**
 * Empty statements -- https://golang.org/ref/spec#Empty_statements
 */
 
  context-free syntax 
 
  EmptyStmt = <>
 

/**
 * Labeled statements -- https://golang.org/ref/spec#Labeled_statements
 */
 
  context-free syntax 

  LabeledStmt = <<Label>: <Statement>>
  Label       = Identifier
 

/**
 * Expression statements -- https://golang.org/ref/spec#Expression_statements
 */
 
  context-free syntax 

  ExpressionStmt = Expression


/**
 * Send statements -- https://golang.org/ref/spec#Send_statements
 */
 
  context-free syntax 

  SendStmt = [[Channel] <- [Expression]]
  Channel  = Expression


/**
 * IncDec statements -- https://golang.org/ref/spec#IncDec_statements
 */
 
  context-free syntax 

  IncDecStmt = <<Expression>++>
  IncDecStmt = <<Expression>-->


/**
 * Assignments -- https://golang.org/ref/spec#Assignments
 */
 
  context-free syntax
  
  Assignment = <<ExpressionList> = <ExpressionList>>

  // add_op
  Assignment = <<ExpressionList> += <ExpressionList>>
  Assignment = <<ExpressionList> -= <ExpressionList>>
  Assignment = <<ExpressionList> |= <ExpressionList>>
  Assignment = <<ExpressionList> ^= <ExpressionList>>

  // mul_op
  Assignment = [[ExpressionList] *= [ExpressionList]]
  Assignment = [[ExpressionList] /= [ExpressionList]]
  Assignment = [[ExpressionList] %= [ExpressionList]]
  Assignment = [[ExpressionList] <<= [ExpressionList]]
  Assignment = [[ExpressionList] >>= [ExpressionList]]
  Assignment = [[ExpressionList] &= [ExpressionList]]
  Assignment = [[ExpressionList] &^= [ExpressionList]]

/**
 * If statements -- https://golang.org/ref/spec#If_statements
 */
 
  context-free syntax
  
  IfStmt        = <if <IfStmt-Inner1?> <Expression> <Block> <IfStmt-Inner2?>>
  IfStmt-Inner1 = <<SimpleStmt>;>
  IfStmt-Inner2 = <else <IfStmt>>
  IfStmt-Inner2 = <else <Block>>

  
/**
 * Switch statements -- https://golang.org/ref/spec#Switch_statements
 */
  
  context-free syntax
  
  SwitchStmt = ExprSwitchStmt
  SwitchStmt = TypeSwitchStmt
  
  ExprSwitchStmt       = <switch <ExprSwitchStmt-Inner?> <Expression?> { <ExprCaseClause*> }>
  ExprSwitchStmt-Inner = <<SimpleStmt>;>
  ExprCaseClause       = <<ExprSwitchCase>: <StatementList>>
  ExprSwitchCase       = <case <ExpressionList>>
  ExprSwitchCase       = <default>
  
  TypeSwitchStmt        = <switch <TypeSwitchStmt-Inner?> <TypeSwitchGuard> { <TypeCaseClause*> }> 
  TypeSwitchStmt-Inner  = <<SimpleStmt>;>
  TypeSwitchGuard       = <<TypeSwitchGuard-Inner?> <PrimaryExpr>.( type )>
  TypeSwitchGuard-Inner = <<Identifier> :=>
  TypeCaseClause      = <<TypeSwitchCase>: <StatementList>>
  TypeSwitchCase        = <case <TypeList>>
  TypeSwitchCase        = <default>
  TypeList              = {Type ","}+

   
/**
 * For statements -- https://golang.org/ref/spec#For_statements
 */
  
  context-free syntax
   
  ForStmt       = <for <ForStmt-Inner?> <Block>>
  ForStmt-Inner = Condition
  ForStmt-Inner = ForClause
  ForStmt-Inner = RangeClause
  Condition     = Expression

  ForClause = <<InitStmt?>; <Condition?>; <PostStmt?>>
  InitStmt  = SimpleStmt
  PostStmt  = SimpleStmt
  
  RangeClause       = <<RangeClause-Inner?> range <Expression>>
  RangeClause-Inner = <<ExpressionList> =>
  RangeClause-Inner = <<IdentifierList> :=>

  
/**
 * Go statements -- https://golang.org/ref/spec#Go_statements
 */
 
  context-free syntax
  
  GoStmt = <go <Expression>>
  

/**
 * Select statements
 */
 
  context-free syntax
  
  SelectStmt     = <select { <CommClause*> }>
  CommClause     = <<CommCase>: <StatementList>>
  CommCase       = <case <CommCase-Inner>>
  CommCase-Inner = SendStmt
  CommCase-Inner = RecvStmt
  CommCase       = <default>
  RecvStmt       = <<RecvStmt-Inner?> <RecvExpr>>
  RecvStmt-Inner = <<ExpressionList> =>
  RecvStmt-Inner = <<IdentifierList> :=>
  RecvExpr       = Expression


/**
 * Return statements
 */
 
  context-free syntax
  
  ReturnStmt = <return <ExpressionList?>>


/**
 * Break statements
 */
 
  context-free syntax
  
  BreakStmt = <break <Label?>>
  
  
/**
 * Continue statements
 */
 
  context-free syntax
  
  ContinueStmt = <continue <Label?>>
  
  
/**
 * Goto statements
 */
 
  context-free syntax
  
  GotoStmt = <goto <Label>>
  
  
/**
 * Fallthrough statements
 */
 
  context-free syntax
  
  FallthroughStmt = <fallthrough>
  
  
/**
 * Defer statements
 */
 
  context-free syntax
  
  DeferStmt = <defer <Expression>>

