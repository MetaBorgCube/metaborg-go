/**
 * Statements -- https://golang.org/ref/spec#Statements
 */
module Statements

imports

  Blocks
  Declarations
  Expressions
  Lexical
  Types
  SortNames

context-free start-symbols

  Stmt

context-free syntax

  Stmt.DeclarationStmt                      = Declaration
  Stmt                                      = <<SimpleStmt>;>
  Stmt                                      = <<Block>;>
  Stmt                                      = <<IfStmt>;>
  // Labeled statements -- https://golang.org/ref/spec#Labeled_statements
  Stmt.LabeledStmt                          = <<ID>: <Stmt>>
  // Switch statements -- https://golang.org/ref/spec#Switch_statements
  Stmt.ExprSwitchStmt                       = <switch <StmtInit> <Expr-OPT>{ <ExprCaseClause*> }<>;>
  Stmt.TypeSwitchStmt                       = <switch <StmtInit> <TypeSwitchGuard>{ <TypeCaseClause*> }<>;>
  Stmt.ForStmt                              = <for <ForStmtClause> <Block>;>
  // Fallthrough statements
  Stmt.FallthroughStmt                      = <fallthrough<>;>
  // Go statements -- https://golang.org/ref/spec#Go_statements
  Stmt.GoStmt                               = <go <Expr>;>
  // Defer statements
  Stmt.DeferStmt                            = <defer <Expr>;>
  // Select statements -- https://golang.org/ref/spec#Select_statements
  Stmt.SelectStmt                           = <select { <CommClause*> }<>;>
  // Return statements
  Stmt.ReturnStmt                           = <return <{Expr ","}*>;>
  // Break statements
  Stmt.BreakStmt                            = <break<>;>
  Stmt.BreakLabeledStmt                     = <break <ID>;>
  // Continue statements
  Stmt.ContinueStmt                         = <continue<>;>
  Stmt.ContinueLabeledStmt                  = <continue <ID>;>
  // Goto statements
  Stmt.GotoStmt                             = <goto <ID>;>

context-free sorts SimpleStmt
context-free syntax
  // Empty statements -- https://golang.org/ref/spec#Empty_statements
  SimpleStmt.EmptyStmt                      = <>
  // Send statements -- https://golang.org/ref/spec#Send_statements
  SimpleStmt                                = SendStmt
  // Expression statements -- https://golang.org/ref/spec#Expression_statements
  SimpleStmt.ExprStmt                       = <<Expr>>
  // IncDec statements -- https://golang.org/ref/spec#IncDec_statements
  SimpleStmt.IncStmt                        = <<Expr>++>
  SimpleStmt.DecStmt                        = <<Expr>-->
  // Short variable declarations -- https://golang.org/ref/spec#Short_variable_declarations
  SimpleStmt.ShortVarDecl                   = <<{ID ","}+> := <{Expr ","}+>>
  // Assignments -- https://golang.org/ref/spec#Assignments
  SimpleStmt.AssignStmt                     = <<{Expr ","}+> = <{Expr ","}+>>

  // add_op
  SimpleStmt.SumAssignStmt                  = <<{Expr ","}+> += <{Expr ","}+>>
  SimpleStmt.DifferenceAssignStmt           = <<{Expr ","}+> -= <{Expr ","}+>>
  SimpleStmt.BitwiseOrAssignStmt            = <<{Expr ","}+> |= <{Expr ","}+>>
  SimpleStmt.BitwiseXorAssignStmt           = <<{Expr ","}+> ^= <{Expr ","}+>>

  // mul_op
  SimpleStmt.ProductAssignStmt              = [[{Expr ","}+] *= [{Expr ","}+]]
  SimpleStmt.QuotientAssignStmt             = [[{Expr ","}+] /= [{Expr ","}+]]
  SimpleStmt.RemainderAssignStmt            = [[{Expr ","}+] %= [{Expr ","}+]]
  SimpleStmt.LeftShiftAssignStmt            = [[{Expr ","}+] <<= [{Expr ","}+]]
  SimpleStmt.RightShiftAssignStmt           = [[{Expr ","}+] >>= [{Expr ","}+]]
  SimpleStmt.BitwiseAndAssignStmt           = [[{Expr ","}+] &= [{Expr ","}+]]
  SimpleStmt.BitClearAssignStmt             = [[{Expr ","}+] &^= [{Expr ","}+]]


/**
 * If statements -- https://golang.org/ref/spec#If_statements
 */
context-free sorts IfStmt IfStmtElse StmtInit
context-free syntax

  IfStmt.IfStmt                             = <if <StmtInit> <Expr> <Block> <IfStmtElse>>
  IfStmtElse.NoElse                         = <>
  IfStmtElse.ElseBlock                      = <else <Block>>
  IfStmtElse.ElseIf                         = <else <IfStmt>>


  StmtInit.NoStmtInit                       = <>
  StmtInit.StmtInit                         = <<SimpleStmt>;>



/**
 * Expression switches
 */
context-free sorts ExprCaseClause
context-free syntax

  ExprCaseClause.ExprCase                   = <case <{Expr ","}+>: <Stmt*>>
  ExprCaseClause.ExprCaseDefault            = <default<>: <Stmt*>>


/**
 * Type switches
 */
context-free sorts TypeSwitchGuard TypeCaseClause
context-free syntax

  TypeSwitchGuard.TypeSwitchGuard           = <<ID> := <Expr>.(<>type<>)>
  TypeSwitchGuard.TypeSwitchGuardNoID       = <<Expr>.(<>type<>)>

  TypeCaseClause.TypeCase                   = <case <{Type ","}+>: <Stmt*>>
  TypeCaseClause.TypeCaseDefault            = <default<>: <Stmt*>>


/**
 * For statements -- https://golang.org/ref/spec#For_statements
 */
context-free sorts ForStmtClause ForInitStmt ForCondition ForPostStmt ExprOrIdListEq
context-free syntax

  ForStmtClause.ForNoClause                 = <>
  ForStmtClause.ForExprClause               = Expr
  ForStmtClause.ForClause                   = <<ForInitStmt>; <ForCondition>; <ForPostStmt>>
  ForStmtClause.ForRangeClause              = <<ExprOrIdListEq> range <Expr>>

  ForInitStmt.NoInitStmt                    = <>
  ForInitStmt                               = SimpleStmt
  ForCondition.NoCondition                  = <>
  ForCondition                              = Expr
  ForPostStmt.NoPostStmt                    = <>
  ForPostStmt                               = SimpleStmt

  ExprOrIdListEq.ExprListEq                 = <<{Expr ","}+> =>
  ExprOrIdListEq.IdListEq                   = <<{ID ","}+> :=>



/**
 * Select statements -- https://golang.org/ref/spec#Select_statements
 */
context-free sorts CommClause CommCase
context-free syntax
  CommClause.CommClause                     = <<CommCase>: <Stmt*>>
  CommCase.CommCaseSend                     = <case <SendStmt>>
  CommCase.CommCaseRecv                     = <case <RecvStmt>>
  CommCase.CommCaseDefault                  = <default>


context-free sorts RecvStmt
context-free syntax
  RecvStmt.RecvStmt                         = <<ExprOrIdListEq> <Expr>>


/**
 * Send statements -- https://golang.org/ref/spec#Send_statements
 */
context-free sorts SendStmt
context-free syntax

  SendStmt.SendStmt                         = [[Expr] <- [Expr]]

