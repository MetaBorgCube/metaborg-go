/**
 * Types -- https://golang.org/ref/spec#Types
 */
module Types

imports

  Lexical
  Declarations
  Expressions
  Representation
  SortNames

context-free start-symbols

  Type

template options

  newlines : separating

context-free syntax

  Type                        = TypeName
  Type                        = <( <Type> )> {bracket}

  Type-OPT.NoType             = <>
  Type-OPT                    = Type

  TypeName                    = ID
  TypeName.QualifiedTypeName  = QualifiedIdent

  Type                        = ArrayType
  Type                        = StructType
  Type                        = SliceType
  Type                        = MapType
  

  Type.PointerType            = <*<Type>>                                     // Pointer types -- https://golang.org/ref/spec#Pointer_types
  


/**
 * Array types -- https://golang.org/ref/spec#Array_types
 */
context-free sorts ArrayType
context-free syntax

  ArrayType.ArrayType         = <[<Expr>]<Type>> {left}


/**
 * Slice types -- https://golang.org/ref/spec#Slice_types
 */
context-free sorts SliceType
context-free syntax

  SliceType.SliceType         = <[ ]<Type>> {left}


/**
 * Struct types -- https://golang.org/ref/spec#Struct_types
 */
context-free sorts StructType StructType-ELEM FieldDecl Field Tag-OPT Tag
context-free syntax
  StructType.StructType       = <struct { <StructType-ELEM*> }>
  StructType-ELEM             = <<FieldDecl>;>

  FieldDecl.FieldDecl         = <<Field> <Tag-OPT>>

  Field.Field                 = <<IDList> <Type>>
  Field.AnonymousPtrField     = <*<TypeName>>
  Field.AnonymousField        = <<TypeName>>

  Tag.NoTag                   = <>
  Tag.Tag                     = STRING_LIT


/**
 * Function types -- https://golang.org/ref/spec#Function_types
 */
context-free sorts Result Parameters ParameterDecl
context-free syntax

  Type.FunctionType           = <func <Signature>>

  Signature.Signature         = <<Parameters> <Result>>
  Result.NoResult             = <>
  Result                      = Parameters
  Result                      = Type

  Parameters.Parameters                 = <(<{ParameterDecl ","}*>)>
  Parameters.Parameters-ALT             = <(<{ParameterDecl ","}*>, )>

  ParameterDecl.ParameterDecl           = <<IDList-OPT> <Type>>
  ParameterDecl.VariadicParameterDecl   = <<IDList-OPT> ...<Type>>


/**
 * Interface types -- https://golang.org/ref/spec#Interface_types
 */
context-free sorts InterfaceTypeMember
context-free syntax

  Type.InterfaceType          = <interface { <InterfaceTypeMember*> }>
  InterfaceTypeMember.MethodSpec     = <<ID> <Signature>;>
  InterfaceTypeMember.TypeName       = <<TypeName>;>


/**
 * Map types -- https://golang.org/ref/spec#Map_types
 */
context-free sorts MapType
context-free syntax

  MapType.MapType             = <map[<Type>]<Type>>


/**
 * Channel types -- https://golang.org/ref/spec#Channel_types
 */
context-free sorts Type
context-free syntax

  Type.BidirectionalChannelType         = [chan [Type]]
  // TODO: Separate between chan and <-
  Type.SendingChannelType               = [chan[]<- [Type]]
  Type.ReceivingChannelType             = [<-[]chan [Type]]
