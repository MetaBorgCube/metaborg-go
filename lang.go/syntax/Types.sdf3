/**
 * Types -- https://golang.org/ref/spec#Types
 */
module Types

imports

  Lexical
  Declarations
  Expressions
  Representation
  SortNames

context-free start-symbols

  Type

template options

  newlines : separating

context-free syntax

  TypeName.TypeName                         = <<ID>>
  TypeName.QualifiedTypeName                = <<ID>.<ID>>

context-free syntax

  Type                                      = TypeName
  Type                                      = <( <Type> )> {bracket}
  // Pointer types -- https://golang.org/ref/spec#Pointer_types
  Type.PointerType                          = <*<Type>>
  // Array types -- https://golang.org/ref/spec#Array_types
  Type.ArrayType                            = <[<Expr>]<Type>> {right}
  // Slice types -- https://golang.org/ref/spec#Slice_types
  Type.SliceType                            = <[ ]<Type>>
  // Struct types -- https://golang.org/ref/spec#Struct_types
  Type.StructType                           = <struct { <StructElement*> }>
  // Function types -- https://golang.org/ref/spec#Function_types
  Type.FunctionType                         = <func <Signature>>
  // Interface types -- https://golang.org/ref/spec#Interface_types
  Type.InterfaceType                        = <interface { <InterfaceTypeMember*> }>
  // Map types -- https://golang.org/ref/spec#Map_types
  Type.MapType                              = <map[<Type>]<Type>>
  // Channel types -- https://golang.org/ref/spec#Channel_types
  Type.BidirectionalChannelType             = [chan [Type]]
  Type.SendingChannelType                   = [chan[]<- [Type]]
  Type.ReceivingChannelType                 = [<-[]chan [Type]]

context-free priorities

//  Type.ReceivingChannelType     <0> .> Type.BidirectionalChannelType,
//  Type.BidirectionalChannelType <0> .> Type.ReceivingChannelType,
//  Type.ReceivingChannelType          > Type.BidirectionalChannelType,
  Type.BidirectionalChannelType      > Type.ReceivingChannelType

/**
 * Struct types -- https://golang.org/ref/spec#Struct_types
 */
context-free sorts Field Tag StructElement
context-free syntax

  StructElement.StructElement               = <<Field>;>
  StructElement.StructElementTagged         = <<Field> <STRING_LIT>;>

  Field.Field                               = <<{ID ","}+> <Type>>
  Field.AnonymousPtrField                   = <*<TypeName>>
  Field.AnonymousField                      = <<TypeName>>


/**
 * Function types -- https://golang.org/ref/spec#Function_types
 */
context-free sorts Result Parameters ParameterDecl
context-free syntax

  Signature.Signature                       = <<Parameters> <Result>>
  Result.NoResult                           = <>
  Result                                    = Parameters
  Result                                    = Type

  Parameters.Parameters                     = <(<{ParameterDecl ","}*>)>
  Parameters.Parameters-ALT                 = <(<{ParameterDecl ","}*>, )>

  ParameterDecl.ParameterDecl               = <<{ID ","}*> <Type>>
  ParameterDecl.VariadicParameterDecl       = <<{ID ","}*> ...<Type>>


/**
 * Interface types -- https://golang.org/ref/spec#Interface_types
 */
context-free sorts InterfaceTypeMember
context-free syntax

  InterfaceTypeMember.MethodSpec            = <<ID> <Signature>;>
  InterfaceTypeMember.EmbeddedInterface     = <<TypeName>;>


