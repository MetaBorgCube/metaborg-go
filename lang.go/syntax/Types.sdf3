/**
 * Types -- https://golang.org/ref/spec#Types
 */
module Types

imports

  Lexical
  Declarations
  Expressions
  Representation
  SortNames

context-free start-symbols

  Type

template options

  newlines : separating

context-free syntax

  Type                                      = TypeName
  Type                                      = <(<Type>)> {bracket}
  // Pointer types -- https://golang.org/ref/spec#Pointer_types
  Type.PointerType                          = <*<Type>>
  // Array types -- https://golang.org/ref/spec#Array_types
  Type.ArrayType                            = <[<Expr>]<Type>> {right}
  // Slice types -- https://golang.org/ref/spec#Slice_types
  Type.SliceType                            = <[ ]<Type>>
  // Struct types -- https://golang.org/ref/spec#Struct_types
  Type.StructType                           = <struct { <StructElement*> }>
  // Function types -- https://golang.org/ref/spec#Function_types
  Type.FunctionType                         = <func <Signature>>
  // Interface types -- https://golang.org/ref/spec#Interface_types
  Type.InterfaceType                        = <interface { <InterfaceTypeMember*> }>
  // Map types -- https://golang.org/ref/spec#Map_types
  Type.MapType                              = <map[<Type>]<Type>>
  // Channel types -- https://golang.org/ref/spec#Channel_types
  Type.BidirectionalChannelType             = [chan [Type]]
  Type.SendingChannelType                   = [chan[]<- [Type]] {prefer}
  Type.ReceivingChannelType                 = [<-[]chan [Type]]


context-free syntax

  TypeName.TypeName                         = <<ID>>
  TypeName.QualifiedTypeName                = <<ID>.<ID>>

// Pre-declared types
context-free syntax

  // 'nil' is an invalid type in most places, except in a type switch case clause.
  TypeName.NilType                          = <nil>

  TypeName.Bool                             = <bool>
  TypeName.String                           = <string>
  TypeName.Error                            = <error>

  TypeName.Int                              = <int>
  TypeName.Int8                             = <int8>
  TypeName.Int16                            = <int16>
  TypeName.Int32                            = <int32>
  TypeName.Int64                            = <int64>

  TypeName.UInt                             = <uint>
  TypeName.UInt8                            = <uint8>
  TypeName.UInt16                           = <uint16>
  TypeName.UInt32                           = <uint32>
  TypeName.UInt64                           = <uint64>
  TypeName.UIntPtr                          = <uintptr>

  TypeName.Float32                          = <float32>
  TypeName.Float64                          = <float64>

  TypeName.Complex64                        = <complex64>
  TypeName.Complex128                       = <complex128>

  TypeName.Byte                             = <byte>  // alias for uint8
  TypeName.Rune                             = <rune>  // alias for int32

lexical syntax

  ID                                        = "nil" {reject}
  
  ID                                        = "bool" {reject}
  ID                                        = "string" {reject}
  ID                                        = "error" {reject}

  ID                                        = "int" {reject}
  ID                                        = "int8" {reject}
  ID                                        = "int16" {reject}
  ID                                        = "int32" {reject}
  ID                                        = "int64" {reject}

  ID                                        = "uint" {reject}
  ID                                        = "uint8" {reject}
  ID                                        = "uint16" {reject}
  ID                                        = "uint32" {reject}
  ID                                        = "uint64" {reject}
  ID                                        = "uintptr" {reject}

  ID                                        = "float32" {reject}
  ID                                        = "float64" {reject}

  ID                                        = "complex64" {reject}
  ID                                        = "complex128" {reject}

  ID                                        = "byte" {reject}
  ID                                        = "rune" {reject}
  // TODO: Add more keywords, e.g., 'struct'


context-free priorities

//  Type.ReceivingChannelType     <0> .> Type.BidirectionalChannelType,
//  Type.BidirectionalChannelType <0> .> Type.ReceivingChannelType,
//  Type.ReceivingChannelType          > Type.BidirectionalChannelType,
//  Type.ReceivingChannelType <0> .> Type.BidirectionalChannelType
//  Type.BidirectionalChannelType      > Type.ReceivingChannelType

/**
 * Struct types -- https://golang.org/ref/spec#Struct_types
 */
context-free sorts Field Tag StructElement
context-free syntax

  StructElement.StructElement               = <<Field>;>
  StructElement.StructElementTagged         = <<Field> <STRING_LIT>;>

  Field.Field                               = <<{ID ","}+> <Type>>
  Field.EmbeddedTypeField                   = <<TypeName>>
  Field.EmbeddedPtrTypeField                = <*<TypeName>>


/**
 * Function types -- https://golang.org/ref/spec#Function_types
 */
context-free sorts Result Parameters ParameterDecl AnonymousParameterDecl
context-free syntax

  Signature.Signature                       = <<Parameters> <Result>>
  Result.NoResult                           = <>
  Result                                    = Parameters
  Result                                    = Type {prefer}

  Parameters.Parameters                     = <(<{ParameterDecl ","}*>)>
  Parameters.Parameters-ALT                 = <(<{ParameterDecl ","}*>, )>
  Parameters.AnonymousParameters            = <(<{AnonymousParameterDecl ","}+>)>
  Parameters.AnonymousParameters-ALT        = <(<{AnonymousParameterDecl ","}+>, )>

  ParameterDecl.ParameterDecl               = <<{ID ","}+> <Type>>
  ParameterDecl.VariadicParameterDecl       = <<{ID ","}+> ...<Type>>

  AnonymousParameterDecl.AnonymousParameterDecl               = <<Type>>
  AnonymousParameterDecl.AnonymousVariadicParameterDecl       = <...<Type>>


/**
 * Interface types -- https://golang.org/ref/spec#Interface_types
 */
context-free sorts InterfaceTypeMember
context-free syntax

  InterfaceTypeMember.MethodSpec            = <<ID> <Signature>;>
  InterfaceTypeMember.EmbeddedInterface     = <<TypeName>;>


