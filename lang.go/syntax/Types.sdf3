/**
 * Types -- https://golang.org/ref/spec#Types
 */
module Types

imports

  Lexical
  Declarations
  Expressions
  Representation
  SortNames

context-free start-symbols

  Type

template options

  newlines : separating

sorts TypeLit
context-free syntax

  Type                        = TypeName
  Type                        = TypeLit
  Type                        = <( <Type> )> {bracket}

  Type-OPT.NoType             = <>
  Type-OPT                    = Type

  TypeName                    = ID
  TypeName.QualifiedTypeName  = QualifiedIdent

  TypeLit                     = ArrayType
  TypeLit                     = StructType
  TypeLit                     = PointerType
  TypeLit                     = FunctionType
  TypeLit                     = InterfaceType
  TypeLit                     = SliceType
  TypeLit                     = MapType
  TypeLit                     = ChannelType


/**
 * Array types -- https://golang.org/ref/spec#Array_types
 */
sorts ArrayType ArrayLength ElementType
context-free syntax

  ArrayType.ArrayType         = <[<ArrayLength>]<ElementType>> {left}

  ArrayLength                 = Expr

  ElementType                 = Type


/**
 * Slice types -- https://golang.org/ref/spec#Slice_types
 */
sorts SliceType
context-free syntax

  SliceType.SliceType         = <[ ]<ElementType>> {left}


/**
 * Struct types -- https://golang.org/ref/spec#Struct_types
 */
sorts StructType StructType-ELEM FieldDecl Field EmbeddedField Tag-OPT Tag
context-free syntax
  StructType.StructType       = <struct { <StructType-ELEM*> }>
  StructType-ELEM             = <<FieldDecl>;>

  FieldDecl.FieldDecl         = <<Field> <Tag-OPT>>

  Field.Field                 = <<IDList> <Type>>
  Field                       = EmbeddedField

  EmbeddedField.AnonymousPtrField     = <*<TypeName>>
  EmbeddedField.AnonymousField        = <<TypeName>>

  Tag-OPT.NoTag               = <>
  Tag-OPT                     = Tag
  Tag                         = STRINGLIT


/**
 * Pointer types -- https://golang.org/ref/spec#Pointer_types
 */
sorts PointerType BaseType
context-free syntax

  PointerType.PointerType     = <*<BaseType>>

  BaseType                    = Type


/**
 * Function types -- https://golang.org/ref/spec#Function_types
 */
sorts FunctionType Result-OPT Result Parameters ParameterList ParameterDecl
context-free syntax

  FunctionType.FunctionType   = <func <Signature>>

  Signature.Signature         = <<Parameters> <Result-OPT>>
  Result-OPT.NoResult         = <>
  Result-OPT                  = Result
  Result                      = Parameters
  Result                      = Type

  Parameters.Parameters                 = <(<ParameterList>)>
  Parameters.Parameters-ALT             = <(<ParameterList>, )>
  ParameterList                         = <<{ParameterDecl ","}*>>

  ParameterDecl.ParameterDecl           = <<IDList-OPT> <Type>>
  ParameterDecl.VariadicParameterDecl   = <<IDList-OPT> ...<Type>>


/**
 * Interface types -- https://golang.org/ref/spec#Interface_types
 */
sorts InterfaceType InterfaceType-ELEM MethodSpec MethodName InterfaceTypeName
context-free syntax

  InterfaceType.InterfaceType = <interface { <InterfaceType-ELEM*> }>
  InterfaceType-ELEM          = <<MethodSpec>;>
  InterfaceType-ELEM          = <<InterfaceTypeName>;>

  MethodSpec.MethodSpec       = <<MethodName> <Signature>>

  MethodName.MethodName       = ID
  InterfaceTypeName           = TypeName


/**
 * Map types -- https://golang.org/ref/spec#Map_types
 */
sorts MapType KeyType
context-free syntax

  MapType.MapType             = <map[<KeyType>]<ElementType>>

  KeyType                     = Type


/**
 * Channel types -- https://golang.org/ref/spec#Channel_types
 */
sorts ChannelType
context-free syntax

  ChannelType.BidirectionalChannelType = [chan [ElementType]]
  // TODO: Separate between chan and <-
  ChannelType.SendingChannelType       = [chan<- [ElementType]]
  ChannelType.ReceivingChannelType     = [<-chan [ElementType]]
