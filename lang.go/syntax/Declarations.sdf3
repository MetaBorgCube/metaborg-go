module Declarations // https://golang.org/ref/spec#Declarations_and_scope

imports

  Blocks
  Lexical
  Expressions
  Types

context-free start-symbols

  TopLevelDecl

context-free syntax

  TopLevelDecl = Declaration

/**
 * Constant declarations -- https://golang.org/ref/spec#Constant_declarations
 */
context-free syntax

  Declaration.SingleConstDecl      = <const <ConstSpec>>
  Declaration.MultiConstDecl       = <const (<ConstSpec-ELEM*>)>
  ConstSpec-ELEM.ConstSpec-ELEM    = <<ConstSpec>;>

  // spec seems wrong here, assignment is always required
  ConstSpec.ConstSpec              = <<IdentifierList> <Type-OPT> = <ExpressionList>>

  IdentifierList                   = {Identifier ","}+
  IdentifierList-OPT.NoIdentifiers = <>
  IdentifierList-OPT               = IdentifierList

  ExpressionList                   = {Expression ","}+
  ExpressionList-OPT.NoExpressions = <>
  ExpressionList-OPT               = ExpressionList

/**
 * Iota -- https://golang.org/ref/spec#Iota
 */
context-free syntax
 
/**
 * Type declarations -- https://golang.org/ref/spec#Type_declarations
 */
context-free syntax

  Declaration.SingleTypeDecl   		= <type <TypeSpec>>
  Declaration.MultiTypeDecl       	= <type (<TypeSpec-ELEM*>)>
  TypeSpec-ELEM.TypeSpec-ELEM     	= <<TypeSpec>;>

  TypeSpec.AliasDecl       			= <<Identifier> = <Type>>

  TypeSpec.TypeDef         			= <<Identifier> <Type>>


/**
 * Var declarations -- https://golang.org/ref/spec#Variable_declarations
 */
context-free syntax

 
  Declaration.SingleVarDecl      = <var <VarSpec>>
  Declaration.MultiVarDecl       = <var (<VarSpec-ELEM*>)>
  VarSpec-ELEM.VarSpec-ELEM      = <<VarSpec>;>
  
  // ERROR: when both Type _and_ VarSpec-Assign are not specified.
  VarSpec.VarSpec                = <<IdentifierList> <Type-OPT> <VarSpec-Assign-OPT>>
  
  VarSpec-Assign-OPT.NoVarAssign = <>
  VarSpec-Assign-OPT.VarAssign   = <= <ExpressionList>>


/**
 * Short variable declarations -- https://golang.org/ref/spec#Short_variable_declarations
 */
context-free syntax

  ShortVarDecl.ShortVarDecl = <<IdentifierList> := <ExpressionList>>


/**
 * Function declarations -- https://golang.org/ref/spec#Function_declarations
 */
context-free syntax
  
  TopLevelDecl.FunctionDecl = <func <Identifier> <FunctionDecl-Inner>>
  
  FunctionDecl-Inner        = Signature
  FunctionDecl-Inner        = Function
  
  Function.Function         = <<Signature> <Block>>


/**
 * Method declarations -- https://golang.org/ref/spec#Method_declarations
 */
context-free syntax
  
  TopLevelDecl.MethodDecl = <func <Receiver> <MethodName> <MethodDecl-Inner>>
  MethodDecl-Inner      = Signature
  MethodDecl-Inner      = Function


//Receiver.Receiver          = Parameters                   // FIXME inlined special case here
  Receiver.Receiver          = <(<Identifier> <Receiver-Inner>)>
  Receiver.AnonymousReceiver = <(<Receiver-Inner>)>
  Receiver-Inner             = TypeName
  Receiver-Inner             = <*<TypeName>>
