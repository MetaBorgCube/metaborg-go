/**
 * Declarations and scope -- https://golang.org/ref/spec#Declarations_and_scope
 */
module Declarations

imports

  Blocks
  Lexical
  Expressions
  Types
  Statements

context-free start-symbols

  TopLevelDecl

context-free syntax

  TopLevelDecl = Declaration

context-free syntax

  Declaration                 = ConstDecl
  Declaration                 = TypeDecl
  Declaration                 = VarDecl

  TopLevelDecl                = Declaration
  TopLevelDecl                = FunctionDecl
  TopLevelDecl                = MethodDecl


/**
 * Constant declarations -- https://golang.org/ref/spec#Constant_declarations
 */
context-free syntax

  ConstDecl.SingleConstDecl   = <const <ConstSpec>>
  ConstDecl.ConstDecl         = <const (<ConstSpec-ELEM*>)>
  ConstSpec-ELEM              = <<ConstSpec>;>

  // spec seems wrong here, assignment is always required
  ConstSpec.ConstSpec         = <<IDList> <Type-OPT> = <ExprList>>

  IDList                      = <<{ID ","}+>>
  IDList-OPT.NoIDs            = <>
  IDList-OPT                  = IDList

  ExprList                    = <<{Expr ","}+>>
  ExprList-OPT.NoExprs        = <>
  ExprList-OPT                = ExprList


/**
 * Type declarations -- https://golang.org/ref/spec#Type_declarations
 */
context-free syntax

  TypeDecl.SingleTypeDecl     = <type <TypeSpec>>
  TypeDecl.TypeDecl           = <type (<TypeSpec-ELEM*>)>
  TypeSpec-ELEM               = <<TypeSpec>;>

  TypeSpec.AliasDecl       		= <<ID> = <Type>>

  TypeSpec.TypeDef         		= <<ID> <Type>>


/**
 * Var declarations -- https://golang.org/ref/spec#Variable_declarations
 */
context-free syntax

  VarDecl.SingleVarDecl       = <var <VarSpec>>
  VarDecl.VarDecl             = <var (<VarSpec-ELEM*>)>
  VarSpec-ELEM                = <<VarSpec>;>

  VarSpec.VarSpec             = <<IDList> <Type> = <ExprList>>
  VarSpec.VarSpecNoInit       = <<IDList> <Type>>
  VarSpec.VarSpecNoType       = <<IDList> = <ExprList>>


/**
 * Short variable declarations -- https://golang.org/ref/spec#Short_variable_declarations
 */
context-free syntax

  ShortVarDecl.ShortVarDecl   = <<IDList> := <ExprList>>


/**
 * Function declarations -- https://golang.org/ref/spec#Function_declarations
 */
context-free syntax

  FunctionDecl.FunctionDecl   = <func <FunctionName> <FunctionDecl-INNER>>
  FunctionName                = ID

  FunctionDecl-INNER          = Signature
  FunctionDecl-INNER          = Function

  Function.Function           = <<Signature> <FunctionBody>>
  FunctionBody                = Block


/**
 * Method declarations -- https://golang.org/ref/spec#Method_declarations
 */
context-free syntax

  MethodDecl.MethodDecl       = <func <Receiver> <MethodName> <MethodDecl-INNER>>
  MethodDecl-INNER            = Signature
  MethodDecl-INNER            = Function

  // Inlined case where there is only one receiver, instead of Receiver = Parameters
  Receiver.Receiver           = <(<ID> <Receiver-INNER>)>
  Receiver.AnonymousReceiver  = <(<Receiver-INNER>)>
  Receiver-INNER.ReceiverType     = <<TypeName>>
  Receiver-INNER.ReceiverPtrType  = <*<TypeName>>

