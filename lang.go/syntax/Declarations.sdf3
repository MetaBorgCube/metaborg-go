/**
 * Declarations and scope -- https://golang.org/ref/spec#Declarations_and_scope
 */
module Declarations

imports

  Blocks
  Lexical
  Expressions
  Types
  SortNames
  Statements

context-free start-symbols

  TopLevelDecl

context-free sorts TopLevelDecl
context-free syntax

  TopLevelDecl                              = Declaration
  // Function declarations -- https://golang.org/ref/spec#Function_declarations
  TopLevelDecl.FunctionDecl                 = <func <ID> <Signature>;>
  TopLevelDecl.FunctionDef                  = <func <ID> <Signature> <Block>;>
  // Method declarations -- https://golang.org/ref/spec#Method_declarations
  TopLevelDecl.MethodDecl                   = <func <Receiver> <ID> <Signature>;>
  TopLevelDecl.MethodDef                    = <func <Receiver> <ID> <Signature> <Block>;>

context-free syntax
  // Constant declarations -- https://golang.org/ref/spec#Constant_declarations
  Declaration.SingleConstDecl               = <const <ConstSpec>>
  Declaration.ConstDecl                     = <const (<ConstSpec*>)<>;>
  // Type declarations -- https://golang.org/ref/spec#Type_declarations
  Declaration.SingleTypeDecl                = <type <TypeSpec>>
  Declaration.TypeDecl                      = <type (<TypeSpec*>)<>;>
  // Var declarations -- https://golang.org/ref/spec#Variable_declarations
  Declaration.SingleVarDecl                 = <var <VarSpec>>
  Declaration.VarDecl                       = <var (<VarSpec*>)<>;>



/**
 * Constant declarations -- https://golang.org/ref/spec#Constant_declarations
 */
context-free sorts ConstSpec
context-free syntax

  // spec seems wrong here, assignment or type or both or neither
  ConstSpec.ConstSpec                       = <<{ID ","}+> <Type> = <{Expr ","}+>;>
  ConstSpec.ConstSpecNoType                 = <<{ID ","}+> = <{Expr ","}+>;>
  ConstSpec.ConstSpecNoExpr                 = <<{ID ","}+> <Type>;>
  ConstSpec.ConstSpecNoTypeNoExpr           = <<{ID ","}+>;>


/**
 * Type declarations -- https://golang.org/ref/spec#Type_declarations
 */
context-free sorts TypeSpec
context-free syntax

  TypeSpec.AliasDecl       		              = <<ID> = <Type>;>

  TypeSpec.TypeDef         		              = <<ID> <Type>;>


/**
 * Var declarations -- https://golang.org/ref/spec#Variable_declarations
 */
context-free sorts VarSpec
context-free syntax

  VarSpec.VarSpec                           = <<{ID ","}+> <Type> = <{Expr ","}+>;>
  VarSpec.VarSpecNoInit                     = <<{ID ","}+> <Type>;>
  VarSpec.VarSpecNoType                     = <<{ID ","}+> = <{Expr ","}+>;>



/**
 * Method declarations -- https://golang.org/ref/spec#Method_declarations
 */
context-free sorts Receiver ReceiverType
context-free syntax

  // Inlined case where there is only one receiver, instead of Receiver = Parameters
  Receiver.Receiver                         = <(<ID> <ReceiverType>)>
  Receiver.AnonymousReceiver                = <(<ReceiverType>)>
  ReceiverType.ReceiverType                 = <<TypeName>>
  ReceiverType.ReceiverPtrType              = <*<TypeName>>

