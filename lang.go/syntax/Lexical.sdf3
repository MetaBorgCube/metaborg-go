/**
 * Lexical elements -- https://golang.org/ref/spec#Lexical_elements
 */
module Lexical

imports

  Representation

lexical start-symbols

  ID
  INT_LIT
  FLOAT_LIT
  IMAGINARY_LIT
  RUNE_LIT
  STRING_LIT


/**
 * Comments -- https://golang.org/ref/spec#Comments
 */
lexical syntax

  NLEOF                       = [\n\r]
  NLEOF                       = EOF
  LAYOUT                      = "//" ~[\n\r]* NLEOF
  LAYOUT                      = "/*" INCOMMENT* "*/"
  INCOMMENT                   = ~[\*]
  INCOMMENT                   = COMMENT_CHAR
  COMMENT_CHAR                = [\*]

lexical restrictions

  COMMENT_CHAR                -/- [\/]

context-free restrictions
  LAYOUT?                     -/- [\/].[\/]
  LAYOUT?                     -/- [\/].[\*]


/**
 * Tokens -- https://golang.org/ref/spec#Tokens
 */
lexical syntax

  LAYOUT                      = [\ \t\n\r]

context-free restrictions

  LAYOUT?                     -/- [\ \t\n\r]


/**
 * Identifiers -- https://golang.org/ref/spec#Identifiers
 */
lexical sorts ID
lexical syntax

  ID                          = LETTER (LETTER | UNICODE_DIGIT)*

lexical restrictions

  ID                          -/- [A-Za-z\_0-9]   // (LETTER | UNICODE_DIGIT)


/**
 * Keywords -- https://golang.org/ref/spec#Keywords
 */
lexical syntax

  ID                          = "break"       {reject}
  ID                          = "case"        {reject}
  ID                          = "chan"        {reject}
  ID                          = "const"       {reject}
  ID                          = "continue"    {reject}
  ID                          = "default"     {reject}
  ID                          = "defer"       {reject}
  ID                          = "else"        {reject}
  ID                          = "fallthrough" {reject}
  ID                          = "for"         {reject}
  ID                          = "func"        {reject}
  ID                          = "go"          {reject}
  ID                          = "goto"        {reject}
  ID                          = "if"          {reject}
  ID                          = "import"      {reject}
  ID                          = "interface"   {reject}
  ID                          = "map"         {reject}
  ID                          = "package"     {reject}
  ID                          = "range"       {reject}
  ID                          = "return"      {reject}
  ID                          = "select"      {reject}
  ID                          = "struct"      {reject}
  ID                          = "switch"      {reject}
  ID                          = "type"        {reject}
  ID                          = "var"         {reject}


/**
 * Integer literals -- https://golang.org/ref/spec#Integer_literals
 */
lexical sorts INT_LIT
lexical syntax

  INT_LIT                     = DECIMAL_LIT                                 // int_lit
  INT_LIT                     = BINARY_LIT
  INT_LIT                     = OCTAL_LIT
  INT_LIT                     = HEX_LIT
  DECIMAL_LIT                 = "0"                                         // decimal_lit
  DECIMAL_LIT                 = [1-9] ("_"? DECIMAL_DIGITS)?
  BINARY_LIT                  = "0" ("b"|"B")  "_"? BINARY_DIGITS           // binary_lit
  OCTAL_LIT                   = "0" ("o"|"O")? "_"? OCTAL_DIGITS            // octal_lit
  HEX_LIT                     = "0" ("x"|"X")  "_"? HEX_DIGITS              // hex_lit

  DECIMAL_DIGITS              = DECIMAL_DIGIT ("_"? DECIMAL_DIGIT)*         // decimal_digits
  BINARY_DIGITS               = BINARY_DIGIT ("_"? BINARY_DIGIT)*           // binary_digits
  OCTAL_DIGITS                = OCTAL_DIGIT ("_"? OCTAL_DIGIT)*             // octal_digits
  HEX_DIGITS                  = HEX_DIGIT ("_"? HEX_DIGIT)*                 // hex_digits


lexical restrictions

  DECIMAL_LIT                 -/- [0-9\_\.]
  BINARY_LIT                  -/- [0-1\_\.]
  OCTAL_LIT                   -/- [0-7\_\.]
  HEX_LIT                     -/- [0-9a-fa-F\_\.]


/**
 * Floating-point literals -- https://golang.org/ref/spec#Floating-point_literals
 */
lexical sorts FLOAT_LIT
lexical syntax

  FLOAT_LIT                    = DECIMAL_FLOAT_LIT                           // float_lit
  FLOAT_LIT                    = HEX_FLOAT_LIT

  DECIMAL_FLOAT_LIT             = DECIMAL_DIGITS "." DECIMAL_DIGITS? DECIMAL_EXPONENT?    // decimal_float_lit
  DECIMAL_FLOAT_LIT             = DECIMAL_DIGITS DECIMAL_EXPONENT
  DECIMAL_FLOAT_LIT             = "." DECIMAL_DIGITS  DECIMAL_EXPONENT?
  DECIMAL_EXPONENT             = ("e"|"E") ("+"|"-")? DECIMAL_DIGITS        // decimal_exponent
  HEX_FLOAT_LIT               = "0" ("x"|"X") HEX_MANTISSA HEX_EXPONENT     // hex_float_lit
  HEX_MANTISSA                 = "_"? HEX_DIGITS "." HEX_DIGITS?            // hex_mantissa
  HEX_MANTISSA                 = "_"? HEX_DIGITS
  HEX_MANTISSA                 = "." HEX_DIGITS
  HEX_EXPONENT                 = ("p"|"P") ("+"|"-")? DECIMAL_DIGITS        // hex_exponent

lexical restrictions

  DECIMAL_FLOAT_LIT           -/- [0-9\_eE\.\+\-]
  DECIMAL_EXPONENT            -/- [0-9\_]
  HEX_FLOAT_LIT               -/- [0-9a-fA-F\_pP\.\+\-]
  HEX_MANTISSA                -/- [0-9a-fA-F\_]
  HEX_EXPONENT                -/- [0-9a-fA-F\_]


/**
 * Imaginary literals -- https://golang.org/ref/spec#Imaginary_literals
 */
lexical sorts IMAGINARY_LIT
lexical syntax

  IMAGINARY_LIT               = (DECIMAL_DIGITS | INT_LIT | FLOAT_LIT) "i"  // imaginary_lit


/**
 * Rune literals -- https://golang.org/ref/spec#Rune_literals
 */
lexical sorts RUNE_LIT
lexical syntax

  RUNE_LIT                    = "'" (UNICODE_VALUE | BYTE_VALUE) "'"          // rune_lit
  UNICODE_VALUE               = UNICODE_CHAR | LITTLE_U_VALUE | BIG_U_VALUE | ESCAPED_CHAR   // unicode_value
  UNICODE_VALUE               = "\\"        {reject}
  BYTE_VALUE                  = OCTAL_BYTE_VALUE | HEX_BYTE_VALUE             // byte_value
  OCTAL_BYTE_VALUE            = "\\" OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT      // octal_byte_value
  HEX_BYTE_VALUE              = "\\x" HEX_DIGIT HEX_DIGIT                     // hex_byte_value
  LITTLE_U_VALUE              = "\\u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT // little_u_value
  BIG_U_VALUE                 = "\\U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
                                      HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT // big_u_value
  ESCAPED_CHAR                = "\\a"                                         // escaped_char
  ESCAPED_CHAR                = "\\b"
  ESCAPED_CHAR                = "\\f"
  ESCAPED_CHAR                = "\\n"
  ESCAPED_CHAR                = "\\r"
  ESCAPED_CHAR                = "\\t"
  ESCAPED_CHAR                = "\\v"
  ESCAPED_CHAR                = "\\\\"
  ESCAPED_CHAR                = "\\'"
  ESCAPED_CHAR                = "\\\""


/**
 * String literals -- https://golang.org/ref/spec#String_literals
 */
lexical sorts STRING_LIT
lexical syntax

  STRING_LIT                   = RAW_STRING_LIT | INTERPRETED_STRING_LIT  // string_lit
  RAW_STRING_LIT                = "`" RAW_STRING_CHAR* "`"                // raw_string_lit
  RAW_STRING_CHAR               = UNICODE_CHAR
  RAW_STRING_CHAR               = NEWLINE
  RAW_STRING_CHAR               = "`" {reject}

  INTERPRETED_STRING_LIT        = "\"" INTERPRETED_STRING_CHAR* "\""      // interpreted_string_lit
  INTERPRETED_STRING_CHAR       = UNICODE_VALUE
  INTERPRETED_STRING_CHAR       = BYTE_VALUE
  INTERPRETED_STRING_CHAR       = "\"" {reject}
