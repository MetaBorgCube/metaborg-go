/**
 * Lexical elements -- https://golang.org/ref/spec#Lexical_elements
 */
module Lexical

imports

  Representation

lexical start-symbols

  ID
  INTLIT
  FLOATLIT
  IMAGINARYLIT
  RUNELIT
  STRINGLIT


/**
 * Comments -- https://golang.org/ref/spec#Comments
 */
lexical syntax

  NLEOF                       = [\n\r]
  NLEOF                       = EOF
  LAYOUT                      = "//" ~[\n\r]* NLEOF
  LAYOUT                      = "/*" INCOMMENT* "*/"
  INCOMMENT                   = ~[\*]
  INCOMMENT                   = COMMENTCHAR
  COMMENTCHAR                 = [\*]

lexical restrictions

  COMMENTCHAR                 -/- [\/]

context-free restrictions
  LAYOUT?                     -/- [\/].[\/]
  LAYOUT?                     -/- [\/].[\*]


/**
 * Tokens -- https://golang.org/ref/spec#Tokens
 */
lexical syntax

  LAYOUT                      = [\ \t\n\r]

context-free restrictions

  LAYOUT?                     -/- [\ \t\n\r]


/**
 * Identifiers -- https://golang.org/ref/spec#Identifiers
 */
lexical syntax

  ID                          = LETTER (LETTER | UNICODEDIGIT)*

lexical restrictions

  ID                          -/- [A-Za-z\_0-9]   // (LETTER | UNICODEDIGIT)


/**
 * Keywords -- https://golang.org/ref/spec#Keywords
 */
lexical syntax

  ID                          = "break"       {reject}
  ID                          = "case"        {reject}
  ID                          = "chan"        {reject}
  ID                          = "const"       {reject}
  ID                          = "continue"    {reject}
  ID                          = "default"     {reject}
  ID                          = "defer"       {reject}
  ID                          = "else"        {reject}
  ID                          = "fallthrough" {reject}
  ID                          = "for"         {reject}
  ID                          = "func"        {reject}
  ID                          = "go"          {reject}
  ID                          = "goto"        {reject}
  ID                          = "if"          {reject}
  ID                          = "import"      {reject}
  ID                          = "interface"   {reject}
  ID                          = "map"         {reject}
  ID                          = "package"     {reject}
  ID                          = "range"       {reject}
  ID                          = "return"      {reject}
  ID                          = "select"      {reject}
  ID                          = "struct"      {reject}
  ID                          = "switch"      {reject}
  ID                          = "type"        {reject}
  ID                          = "var"         {reject}


/**
 * Integer literals -- https://golang.org/ref/spec#Integer_literals
 */
lexical syntax

  INTLIT                      = DECIMALLIT                                  // int_lit
  INTLIT                      = BINARYLIT
  INTLIT                      = OCTALLIT
  INTLIT                      = HEXLIT
  DECIMALLIT                  = "0"                                         // decimal_lit
  DECIMALLIT                  = [1-9] ("_"? DECIMALDIGITS)?
  BINARYLIT                   = "0" ("b"|"B")  "_"? BINARYDIGITS            // binary_lit
  OCTALLIT                    = "0" ("o"|"O")? "_"? OCTALDIGITS             // octal_lit
  HEXLIT                      = "0" ("x"|"X")  "_"? HEXDIGITS               // hex_lit

  DECIMALDIGITS               = DECIMALDIGIT ("_"? DECIMALDIGIT)*           // decimal_digits
  BINARYDIGITS                = BINARYDIGIT ("_"? BINARYDIGIT)*             // binary_digits
  OCTALDIGITS                 = OCTALDIGIT ("_"? OCTALDIGIT)*               // octal_digits
  HEXDIGITS                   = HEXDIGIT ("_"? HEXDIGIT)*                   // hex_digits


lexical restrictions

  DECIMALLIT                  -/- [0-9\_\.]
  BINARYLIT                   -/- [0-1\_\.]
  OCTALLIT                    -/- [0-7\_\.]
  HEXLIT                      -/- [0-9a-fa-F\_\.]


/**
 * Floating-point literals -- https://golang.org/ref/spec#Floating-point_literals
 */
lexical syntax

  FLOATLIT                    = DECIMALFLOATLIT                             // float_lit
  FLOATLIT                    = HEX_FLOAT_LIT

  DECIMALFLOATLIT             = DECIMALDIGITS "." DECIMALDIGITS? DECIMALEXPONENT?    // decimal_float_lit
  DECIMALFLOATLIT             = DECIMALDIGITS DECIMALEXPONENT
  DECIMALFLOATLIT             = "." DECIMALDIGITS  DECIMALEXPONENT?
  DECIMALEXPONENT             = ("e"|"E") ("+"|"-")? DECIMALDIGITS          // decimal_exponent
  HEX_FLOAT_LIT               = "0" ("x"|"X") HEXMANTISSA HEXEXPONENT       // hex_float_lit
  HEXMANTISSA                 = "_"? HEXDIGITS "." HEXDIGITS?               // hex_mantissa
  HEXMANTISSA                 = "_"? HEXDIGITS
  HEXMANTISSA                 = "." HEXDIGITS
  HEXEXPONENT                 = ("p"|"P") ("+"|"-")? DECIMALDIGITS          // hex_exponent

lexical restrictions

  DECIMALFLOATLIT             -/- [0-9\_eE\.\+\-]
  DECIMALEXPONENT             -/- [0-9\_]
  HEX_FLOAT_LIT               -/- [0-9a-fA-F\_pP\.\+\-]
  HEXMANTISSA                 -/- [0-9a-fA-F\_]
  HEXEXPONENT                 -/- [0-9a-fA-F\_]


/**
 * Imaginary literals -- https://golang.org/ref/spec#Imaginary_literals
 */
lexical syntax

  IMAGINARYLIT                = (DECIMALDIGITS | INTLIT | FLOATLIT) "i"     // imaginary_lit


/**
 * Rune literals -- https://golang.org/ref/spec#Rune_literals
 */
lexical syntax

  RUNELIT                     = "'" (UNICODEVALUE | BYTEVALUE) "'"          // rune_lit
  UNICODEVALUE                = UNICODECHAR | LITTLE_U_VALUE | BIG_U_VALUE | ESCAPED_CHAR   // unicode_value
  UNICODEVALUE                = "\\"        {reject}
  BYTEVALUE                   = OCTAL_BYTE_VALUE | HEX_BYTE_VALUE           // byte_value
  OCTAL_BYTE_VALUE            = "\\" OCTALDIGIT OCTALDIGIT OCTALDIGIT       // octal_byte_value
  HEX_BYTE_VALUE              = "\\x" HEXDIGIT HEXDIGIT                     // hex_byte_value
  LITTLE_U_VALUE              = "\\u" HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT   // little_u_value
  BIG_U_VALUE                 = "\\U" HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT
                                      HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT   // big_u_value
  ESCAPED_CHAR                = "\\a"                                       // escaped_char
  ESCAPED_CHAR                = "\\b"
  ESCAPED_CHAR                = "\\f"
  ESCAPED_CHAR                = "\\n"
  ESCAPED_CHAR                = "\\r"
  ESCAPED_CHAR                = "\\t"
  ESCAPED_CHAR                = "\\v"
  ESCAPED_CHAR                = "\\\\"
  ESCAPED_CHAR                = "\\'"
  ESCAPED_CHAR                = "\\\""


/**
 * String literals -- https://golang.org/ref/spec#String_literals
 */
lexical syntax

  STRINGLIT                   = RAWSTRINGLIT | INTERPRETEDSTRINGLIT       // string_lit
  RAWSTRINGLIT                = "`" RAWSTRINGCHAR* "`"                    // raw_string_lit
  RAWSTRINGCHAR               = UNICODECHAR
  RAWSTRINGCHAR               = NEWLINE
  RAWSTRINGCHAR               = "`" {reject}

  INTERPRETEDSTRINGLIT        = "\"" INTERPRETEDSTRINGCHAR* "\""          // interpreted_string_lit
  INTERPRETEDSTRINGCHAR       = UNICODEVALUE
  INTERPRETEDSTRINGCHAR       = BYTEVALUE
  INTERPRETEDSTRINGCHAR       = "\"" {reject}

//// Strings
//sorts RawStringLit InterpStringLit RAWSTRINGCHARS INTERPSTRINGCHARS
//context-free syntax
//  StringLit           = RawStringLit
//  StringLit           = InterpStringLit
//
//syntax
//  RawStringLit-CF     = "`" RAWSTRINGCHARS-LEX "`"
//  InterpStringLit-CF  = "\"" INTERPSTRINGCHARS-LEX "\""
//
//lexical syntax
//  RAWSTRINGCHARS      = RAWSTRINGCHAR*
//  RAWSTRINGCHAR       = UNICODECHAR
//  RAWSTRINGCHAR       = NL
//  RAWSTRINGCHAR       = "`"         {reject}
//
//lexical syntax
//  INTERPSTRINGCHARS   = INTERPSTRINGCHAR*
//  INTERPSTRINGCHAR    = UNICODERUNE
//  INTERPSTRINGCHAR    = BYTERUNE
//  INTERPSTRINGCHAR    = "\""        {reject}


//context-free syntax
//
//  StringLit                  = RawStringLit
//  StringLit                  = InterpretedStringLit
//
//syntax
//
//  RawStringLit-CF            = "`" RawStringLit-Chars-LEX "`"
//  InterpretedStringLit-CF    = "\"" InterpretedStringLit-Chars-LEX "\""
//
//lexical syntax
//
//  RawStringLit-Chars = RawStringLit-Char*
//  RawStringLit-Char  = UNICODECHAR
//  RawStringLit-Char  = NL
//  RawStringLit-Char  = "`" {reject}
//
//  InterpretedStringLit-Chars = InterpretedStringLit-Char*
//  InterpretedStringLit-Char  = UnicodeValue
//  InterpretedStringLit-Char  = ByteValue
//  InterpretedStringLit-Char  = "\"" {reject}
