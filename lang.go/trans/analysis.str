module analysis

imports

  statixruntime
  statix/api
  statix/runtime/analysis // private, for get-type
  statix/runtime/ast // private, for get-type

  desugar

  pp

  analysis/-

rules // Analysis

  editor-analyze =
    stx-editor-analyze(desugar-and-explicate|"analysis/statics", "programOK")

  desugar-and-explicate = explicate-injections;desugar-all

  explicate-injections =
    explicate-injections(inj-name)

  inj-name: (sort, into-sort) -> $[[sort']2[into-sort']]
    with sort' := <camel-abbr> sort
    with into-sort' := <camel-abbr> into-sort

  camel-abbr = explode-string; filter(is-upper); implode-string

//  get-type: node -> type
//    where a := <stx--get-ast-analysis> node
//        ; type := <stx--get-ast-property(|a,Prop("type"))> node

rules // Debugging

  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"aterm")> path
       ; result   := selected

  // Prints the desugared abstract syntax ATerm of a selection.
  debug-show-aterm-desugar:
    (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"aterm")> path
       ; result   := <desugar-all> selected


  // Prints the pre-analyzed abstract syntax ATerm of a selection.
  debug-show-pre-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"pre-analyzed.aterm")> path
       ; result   := <desugar-and-explicate> selected

  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"analyzed.aterm")> path
       ; result   := selected