module analysis

imports

  statixruntime
  statix/api
  statix/runtime/analysis // private, for get-type
  statix/runtime/ast // private, for get-type

  desugar

  pp

  analysis/-
  injections/-
  signatures/-

rules // Analysis

  editor-analyze = stx-editor-analyze(pre-analyze, post-analyze|"analysis/statics", "programOk")
  pre-analyze: x -> x'
  //desugar-all Should be desugared, but this changes the SourceFile term
  with x' := <try(desugar-testsource); explicate-injections-GoLang-SourceFile> x
//  with x' := <try(desugar-testsource); id> x

  post-analyze: x -> x'
  with x' := <implicate-injections-GoLang-SourceFile> x
//  with x' := <id> x

  desugar-testsource: TestSources([TestSourceFile(_, pkg, imports, decls)]) -> SourceFile(pkg, imports, decls)

//  desugar-and-explicate = explicate-injections;desugar-all
//
//  explicate-injections =
//    explicate-injections(inj-name)
//
//  inj-name: (sort, into-sort) -> $[[sort']2[into-sort']]
//    with sort' := <camel-abbr> sort
//    with into-sort' := <camel-abbr> into-sort
//
//  camel-abbr = explode-string; filter(is-upper); implode-string

//  get-type: node -> type
//    where a := <stx--get-ast-analysis> node
//        ; type := <stx--get-ast-property(|a,Prop("type"))> node

rules // Debugging

  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"aterm")> path
       ; result   := selected

  // Prints the desugared abstract syntax ATerm of a selection.
  debug-show-aterm-desugar:
    (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"aterm")> path
       ; result   := <desugar-all> selected


  // Prints the pre-analyzed abstract syntax ATerm of a selection.
  debug-show-pre-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"pre-analyzed.aterm")> path
       ; result   := <pre-analyze> selected

  // Prints the pre-analyzed post-analyze ATerm without analysis.
  debug-show-pre-post-without-analysis: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"prepost.aterm")> path
       ; result   := <pre-analyze; post-analyze> selected

  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"analyzed.aterm")> path
       ; result   := selected