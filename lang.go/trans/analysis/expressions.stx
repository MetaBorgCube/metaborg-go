module analysis/expressions

imports
  analysis/signatures
  // signatures/Blocks-sig
  // signatures/Declarations-sig
  // signatures/Expressions-sig
  // signatures/GoLang-sig
  // signatures/Lexical-sig
  // signatures/Packages-sig
  // signatures/Representation-sig
  // signatures/SortNames-sig
  // signatures/Statements-sig
  // signatures/Types-sig

imports
  analysis/types
  analysis/declarations
  analysis/name-resolution


//signature
//  sorts
//    CONSTVAL
//  constructors
//    CINT    : int     -> CONSTVAL
//    CSTRING : string  -> CONSTVAL
////    CONSTFLOAT  : FLOAT_LIT   -> CONSTVAL
////    CONSTSTRING : STRING_LIT  -> CONSTVAL
////    CONSTBOOL   : BOOL    -> CONSTVAL
//    CDYN    : CONSTVAL
//
//rules typeOfPrimaryExpr2 : scope * PrimaryExpr -> (TYPE * CONSTVAL)
//
//  typeOfPrimaryExpr2(s, IntLit(v))       = (UNTYPED_INT, CINT(stringToInt(v))).
//
//
//
//rules typeOfExpr2 : scope * Expr -> (TYPE * CONSTVAL)
//
//  typeOfExpr2(s, PrimaryExpr2Expr(primaryExpr)) = T :-
//    typeOfPrimaryExpr2(s, primaryExpr) == T.
//
//  typeOfExpr2(s, Sum(e1, e2)) = TV :- {TV1 TV2}
//    typeOfExpr2(s, e1) == TV1,
//    typeOfExpr2(s, e2) == TV2,
//    addConst(TV1, TV2) == TV,
//    true.

//
//rules
//  stringToInt : string -> int

//  addConst : (TYPE * CONSTVAL) * (TYPE * CONSTVAL) -> (TYPE * CONSTVAL)
//
//  addConst((T, CDYN()), (T, _)) = (T, CDYN()).
//  addConst((T, _), (T, CDYN())) = (T, CDYN()).
//  addConst((T, CINT(i)), (T, CINT(j))) = (T, CINT(i #+ j)).

  // untypedint + int = int
  // untypedint + untypedint = untypedint
  // untypedint + int8 = int8



rules typeOfExpr : scope * Expr -> TYPE

  typesOfExprs maps typeOfExpr(*, list(*)) = list(*)

  typeOfExpr(s, IntLit(_))       = UNTYPED_INT().
  typeOfExpr(s, FloatLit(_))     = UNTYPED_FLOAT().
  typeOfExpr(s, ImaginaryLit(_)) = UNTYPED_COMPLEX().
  typeOfExpr(s, RuneLit(_))      = UNTYPED_RUNE().
  typeOfExpr(s, StringLit(_))    = UNTYPED_STRING().

  typeOfExpr(s, FunctionLit(sig, body)) = T :-
    // TODO
    true.

  typeOfExpr(s, CompositeLit(litType, litValue)) = T :-
    // TODO
    true.

  typeOfExpr(s, Index(expr, indexExpr)) = T :-
    // TODO
    true.

  typeOfExpr(s, SliceLH(expr, lowExpr, highExpr)) = T :-
    // TODO
    true.

  typeOfExpr(s, SliceLHM(expr, lowExpr, highExpr, maxExpr)) = T :-
    // TODO
    true.

  typeOfExpr(s, TypeAssertion(expr, type)) = T :-
    // TODO
    true.

  typeOfExpr(s, Call(member, arguments)) = TRETS :- {TARGS}
    typesOfExprOrTypes(s, arguments) == TARGS,
    typeOfExprOrType(s, member) == TYPE(_, FUN(TARGS, TRETS)) | error $[[member] is not a method or function, or not found.].

  // Conversions are now part of Call()
//  typeOfExpr(s, Conversion(type, expr)) = T :-
//    // TODO
//    true.

  // MethodExpr are now part of Selector
  // QualifiedOperandName are now part of Selector
  // MemberAccess are now part of Selector
  // Given a selector `x.y`:
  // - if x is a package name of an imported package, y denotes a member of that package
  // - if x is a value of type T or *T, where T is not a pointer or interface type, y denotes a field or method of T or *T
  // - if x is a value of type T, where T is an interface type, y denotes a method in the method set of T
  // - if x is a value of type T, where T is a pointer type, y denotes a field of deref x (i.e., `(*x).y`)
  // - if x is a type T, y denotes a method of T with an explicit receiver as the first argument

  // A selector can select a field or method of a
  typeOfExpr(s, Selector(expr, name)) = T :-
    // TODO
    true.

//  typeOfExpr(s, MethodExpr(type, name)) = T :-
//    // TODO
//    true.

  typeOfExpr(s, OperandName(name)) = T :-
    resolveVar(s, name) == T.

//  typeOfExpr(s, QualifiedOperandName(x, y)) = T :-
//    // TODO
//    true.

//  typeOfExpr(s, MemberAccess(receiverName, memberName)) = T :-
//    // TODO
//    true.

  typeOfExpr(s, True()) = UNTYPED_BOOL().
  typeOfExpr(s, False()) = UNTYPED_BOOL().
  typeOfExpr(s, Iota()) = UNTYPED_INT().
  typeOfExpr(s, Nill()) = _ :-
    false | error $[Nil is not yet supported.].

rules

  typeOfExpr(s, Positive(e)) = T :-
    typeOfExpr(s, e) == T,
    isArithmeticType(T) | error $[Cannot do arithmetic operations on type [T]].

  typeOfExpr(s, Negation(e)) = T :-
    typeOfExpr(s, e) == T,
    isArithmeticType(T) | error $[Cannot do arithmetic operations on type [T]].

  typeOfExpr(s, Not(e)) = T :-
    typeOfExpr(s, e) == T,
    isBoolType(T) | error $[Cannot do logical operations on non-bool type [T]].

  typeOfExpr(s, BitwiseComplement(e)) = T :-
    typeOfExpr(s, e) == T,
    isIntType(T) | error $[Cannot do bitwise operations on non-bool type [T]].

  typeOfExpr(s, Deref(e)) = T :-
    typeOfExpr(s, e) == TYPE(_, PTR(T)) | error $[Cannot dereference non-pointer type [T]].

  typeOfExpr(s, Ref(e)) = TYPE("", PTR(T)) :-
    typeOfExpr(s, e) == T.
    // TODO: Verify that e is addressable: a variable, pointer indirection, slice indexing operation,
    // field selector of an addressable struct operand, or array indexing operation of an addressable array,
    // or a possibly parenthesized composite literal.
    //false | error $[Cannot create a reference to non-addressable type [T]].

  typeOfExpr(s, Receive(e)) = TE :- {T}
    typeOfExpr(s, e) == T,
    T == TYPE(_, CHANNEL(TE)) | error $[Cannot receive from non-channel type [T]].



  typeOfExpr(s, Equal(e1, e2)) = UNTYPED_BOOL :- {T1 T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    isTypeEquatable(T1, T2) | error $[Cannot compare expressions of types [T1] and [T2].].

  typeOfExpr(s, NotEqual(e1, e2)) = UNTYPED_BOOL :- {T1 T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    isTypeEquatable(T1, T2) | error $[Cannot compare expressions of types [T1] and [T2].].



  typeOfExpr(s, Less(e1, e2)) = UNTYPED_BOOL :- {T1 T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    isTypeComparable(T1, T2) | error $[Cannot compare expressions of types [T1] and [T2].].

  typeOfExpr(s, LessOrEqual(e1, e2)) = UNTYPED_BOOL :- {T1 T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    isTypeComparable(T1, T2) | error $[Cannot compare expressions of types [T1] and [T2].].

  typeOfExpr(s, Greater(e1, e2)) = UNTYPED_BOOL :- {T1 T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    isTypeComparable(T1, T2) | error $[Cannot compare expressions of types [T1] and [T2].].

  typeOfExpr(s, GreaterOrEqual(e1, e2)) = UNTYPED_BOOL :- {T1 T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    isTypeComparable(T1, T2) | error $[Cannot compare expressions of types [T1] and [T2].].



  typeOfExpr(s, BitwiseAnd(e1, e2)) = T :- {T1 T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    typeOfBinOp(T1, T2) == T,
    isIntType(T) | error $[Cannot do bitwise operations on non-integer type [T]].

  typeOfExpr(s, BitwiseOr(e1, e2)) = T :- {T1 T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    typeOfBinOp(T1, T2) == T,
    isIntType(T) | error $[Cannot do bitwise operations on non-integer type [T]].

  typeOfExpr(s, BitwiseXor(e1, e2)) = T :- {T1 T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    typeOfBinOp(T1, T2) == T,
    isIntType(T) | error $[Cannot do bitwise operations on non-integer type [T]].

  typeOfExpr(s, BitClear(e1, e2)) = T :- {T1 T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    typeOfBinOp(T1, T2) == T,
    isIntType(T) | error $[Cannot do bitwise operations on non-integer type [T]].



  typeOfExpr(s, LeftShift(e1, e2)) = T1 :- {T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    isIntType(T1) | error $[Cannot shift non-integer type [T1]],
    isIntType(T2) | error $[Cannot shift by non-integer number of bits of type [T2]].

  typeOfExpr(s, RightShift(e1, e2)) = T1 :- {T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    isIntType(T1) | error $[Cannot shift non-integer type [T1]],
    isIntType(T2) | error $[Cannot shift by non-integer number of bits of type [T2]].



  typeOfExpr(s, Sum(e1, e2)) = T :- {T1 T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    typeOfBinOp(T1, T2) == T,
    isArithmeticOrStringType(T) | error $[Cannot do arithmetic operations on type [T]].

  typeOfExpr(s, Difference(e1, e2)) = T :- {T1 T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    typeOfBinOp(T1, T2) == T,
    isArithmeticType(T) | error $[Cannot do arithmetic operations on type [T]].

  typeOfExpr(s, Product(e1, e2)) = T :- {T1 T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    typeOfBinOp(T1, T2) == T,
    isArithmeticType(T) | error $[Cannot do arithmetic operations on type [T]].

  typeOfExpr(s, Quotient(e1, e2)) = T :- {T1 T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    typeOfBinOp(T1, T2) == T,
    isArithmeticType(T) | error $[Cannot do arithmetic operations on type [T]].

  typeOfExpr(s, Remainder(e1, e2)) = T :- {T1 T2}
    typeOfExpr(s, e1) == T1,
    typeOfExpr(s, e2) == T2,
    typeOfBinOp(T1, T2) == T,
    isIntType(T) | error $[Cannot do arithmetic operations on type [T]].



rules typeOfBinOp : TYPE * TYPE -> TYPE

  typeOfBinOp(TYPE("", K1), TYPE("", K2)) = TYPE("", K) :-
    kindOfBinOp(K1, K2) == K.

// int > rune > float > complex
rules kindOfBinOp : KIND * KIND -> KIND

  kindOfBinOp(K1, K2)                               = K :-
    // TODO: Can the kinds be different, e.g. subtypes of a common kind?
    K1 == K2 | error $[Invalid binary operation on values of kinds [K1] and [K2].],
    K == K1.

  kindOfBinOp(UNTYPED_COMPLEX(), K)                 = T :-
    familyOfKind(K) == COMPLEX_FAMILY() | error $[Invalid binary operation on complex constant and value of kind [K].].

  kindOfBinOp(UNTYPED_COMPLEX(), UNTYPED_COMPLEX()) = UNTYPED_COMPLEX().

  kindOfBinOp(UNTYPED_COMPLEX(), UNTYPED_FLOAT())   = UNTYPED_COMPLEX().

  kindOfBinOp(UNTYPED_COMPLEX(), UNTYPED_RUNE())    = UNTYPED_COMPLEX().

  kindOfBinOp(UNTYPED_COMPLEX(), UNTYPED_INT())     = UNTYPED_COMPLEX().

  kindOfBinOp(UNTYPED_COMPLEX(), UNTYPED_BOOL())    = _ :-
    false | error $[Invalid binary operation on complex and bool constants.].

  kindOfBinOp(UNTYPED_COMPLEX(), UNTYPED_STRING())  = _ :-
    false | error $[Invalid binary operation on complex and string constants.].

  kindOfBinOp(UNTYPED_FLOAT(), K)                   = K :-
    familyOfKind(K) == FLOAT_FAMILY() | error $[Invalid binary operation on float constant and value of kind [K].].

  kindOfBinOp(UNTYPED_FLOAT(), UNTYPED_COMPLEX())   = UNTYPED_COMPLEX().

  kindOfBinOp(UNTYPED_FLOAT(), UNTYPED_FLOAT())     = UNTYPED_FLOAT().

  kindOfBinOp(UNTYPED_FLOAT(), UNTYPED_RUNE())      = UNTYPED_FLOAT().

  kindOfBinOp(UNTYPED_FLOAT(), UNTYPED_INT())       = UNTYPED_FLOAT().

  kindOfBinOp(UNTYPED_FLOAT(), UNTYPED_BOOL())      = _ :-
    false | error $[Invalid binary operation on float and bool constants.].

  kindOfBinOp(UNTYPED_FLOAT(), UNTYPED_STRING())    = _ :-
    false | error $[Invalid binary operation on float and string constants.].

  kindOfBinOp(UNTYPED_RUNE(), K)                    = T :-
    familyOfKind(K) == INT_FAMILY() | error $[Invalid binary operation on rune constant and value of kind [K].].

  kindOfBinOp(UNTYPED_RUNE(), UNTYPED_COMPLEX())    = UNTYPED_COMPLEX().

  kindOfBinOp(UNTYPED_RUNE(), UNTYPED_FLOAT())      = UNTYPED_FLOAT().

  kindOfBinOp(UNTYPED_RUNE(), UNTYPED_RUNE())       = UNTYPED_RUNE().

  kindOfBinOp(UNTYPED_RUNE(), UNTYPED_INT())        = UNTYPED_RUNE().

  kindOfBinOp(UNTYPED_RUNE(), UNTYPED_BOOL())       = _ :-
    false | error $[Invalid binary operation on rune and bool constants.].

  kindOfBinOp(UNTYPED_RUNE(), UNTYPED_STRING())     = _ :-
    false | error $[Invalid binary operation on rune and string constants.].


  kindOfBinOp(UNTYPED_INT(), K)                     = K :-
    familyOfKind(K) == INT_FAMILY() | error $[Invalid binary operation on int constant and value of kind [K].].

  kindOfBinOp(UNTYPED_INT(), UNTYPED_COMPLEX())     = UNTYPED_COMPLEX().

  kindOfBinOp(UNTYPED_INT(), UNTYPED_FLOAT())       = UNTYPED_FLOAT().

  kindOfBinOp(UNTYPED_INT(), UNTYPED_RUNE())        = UNTYPED_RUNE().

  kindOfBinOp(UNTYPED_INT(), UNTYPED_INT())         = UNTYPED_INT().

  kindOfBinOp(UNTYPED_INT(), UNTYPED_BOOL())        = _ :-
    false | error $[Invalid binary operation on int and bool constants.].

  kindOfBinOp(UNTYPED_INT(), UNTYPED_STRING())      = _ :-
    false | error $[Invalid binary operation on int and string constants.].


  kindOfBinOp(UNTYPED_BOOL(), K)                    = T :-
    K == BOOL() | error $[Invalid binary operation on bool constant and value of kind [K].].

  kindOfBinOp(UNTYPED_BOOL(), UNTYPED_COMPLEX())    = _ :-
    false | error $[Invalid binary operation on bool and complex constants.].

  kindOfBinOp(UNTYPED_BOOL(), UNTYPED_FLOAT())      = _ :-
    false | error $[Invalid binary operation on bool and float constants.].

  kindOfBinOp(UNTYPED_BOOL(), UNTYPED_RUNE())       = _ :-
    false | error $[Invalid binary operation on bool and rune constants.].

  kindOfBinOp(UNTYPED_BOOL(), UNTYPED_INT())        = _ :-
    false | error $[Invalid binary operation on bool and int constants.].

  kindOfBinOp(UNTYPED_BOOL(), UNTYPED_BOOL())       = UNTYPED_BOOL().

  kindOfBinOp(UNTYPED_BOOL(), UNTYPED_STRING())     = _ :-
    false | error $[Invalid binary operation on bool and string constants.].

  kindOfBinOp(UNTYPED_STRING(), K)                    = K :-
    K == STRING() | error $[Invalid binary operation on string constant and value of kind [K].].

  kindOfBinOp(UNTYPED_STRING(), UNTYPED_COMPLEX())    = _ :-
    false | error $[Invalid binary operation on string and complex constants.].

  kindOfBinOp(UNTYPED_STRING(), UNTYPED_FLOAT())      = _ :-
    false | error $[Invalid binary operation on string and float constants.].

  kindOfBinOp(UNTYPED_STRING(), UNTYPED_RUNE())       = _ :-
    false | error $[Invalid binary operation on string and rune constants.].

  kindOfBinOp(UNTYPED_STRING(), UNTYPED_INT())        = _ :-
    false | error $[Invalid binary operation on string and int constants.].

  kindOfBinOp(UNTYPED_STRING(), UNTYPED_BOOL())       = _ :-
    false | error $[Invalid binary operation on string and bool constants.].

  kindOfBinOp(UNTYPED_STRING(), UNTYPED_STRING())     = UNTYPED_STRING().



rules typeOfLiteralType : scope * LiteralType -> TYPE

  typeOfLiteralType(s, TypeName2LiteralType(TypeName(typeName))) = T :-
    // TODO
    true.

  typeOfLiteralType(s, TypeName2LiteralType(QualifiedTypeName(x, y))) = T :-
    // TODO
    true.

  typeOfLiteralType(s, StructTypeLiteral(elements)) = T :-
    // TODO
    true.

  typeOfLiteralType(s, ArrayTypeLiteral(lengthExpr, type)) = T :-
    // TODO
    true.

  typeOfLiteralType(s, AutoArrayTypeLiteral(type)) = T :-
    // TODO
    true.

  typeOfLiteralType(s, SliceTypeLiteral(type)) = T :-
    // TODO
    true.

  typeOfLiteralType(s, MapTypeLiteral(keyType, valueType)) = T :-
    // TODO
    true.


//rules typeOfArgument : scope * ExprOrType) -> TYPE)
//  // Each argument must be a single-valued expression;
//  // or, as a special case, there can be a single argument and its multiple return values
//  // are assigned as the values to the call.
//
//  typeOfArgumentsOpt(s, NoArguments()) = [].
//
//  typeOfArgumentsOpt(s, Arguments(ExprArguments(exprs))) = [].  // TODO
//  typeOfArgumentsOpt(s, Arguments(TypeArgument(type))) = [].  // TODO
//  typeOfArgumentsOpt(s, Arguments(TypedArguments(type, exprs))) = [].  // TODO
//
//  typeOfArgumentsOpt(s, ArgumentsExplode(ExprArguments(exprs))) = [].  // TODO
//  typeOfArgumentsOpt(s, ArgumentsExplode(TypeArgument(type))) = [].  // TODO
//  typeOfArgumentsOpt(s, ArgumentsExplode(TypedArguments(type, exprs))) = [].  // TODO

// An addressable expression is:
// - a variable,
// - pointer indirection,
// - slice indexing operation,
// - field selector of an addressable struct operand
// - array indexing operation of an addressable array

rules typeOfAddressableExpr : scope * Expr -> TYPE

  typeOfAddressableExpr(_, _) = _ :-
    // TODO
    true.

rules typeOfAddressableOrCompositeLiteralExpr : scope * Expr -> TYPE

  typeOfAddressableOrCompositeLiteralExpr(_, _) = _ :-
    // TODO
    true.

rules typeOfAddressableOrMapIndexExpr : scope * Expr -> TYPE

  typeOfAddressableOrMapIndexExpr(_, _) = _ :-
    // TODO
    true.

rules typeOfMethodOrFunctionExpr : scope * Expr -> TYPE

  typeOfMethodOrFunctionExpr(_, _) = _ :-
    // TODO
    true.



rules typeOfExprOrType : scope * ExprOrType -> TYPE

  typesOfExprOrTypes maps typeOfExprOrType(*, list(*)) = list(*)

  typeOfExprOrType(s, Expr2ExprOrType(expr)) = T :-
    typeOfExpr(s, expr) == T.

  typeOfExprOrType(s, Type2ExprOrType(type)) = T :- //TYPE(T) :-
    true.
    //typeOfType(s, type) == T.

  typeOfExprOrType(s, ExprOrTypeSelector(exprOrType, member)) = T :-
    // TODO
    true.

  typeOfExprOrType(s, ExprOrTypeName(name)) = T :-
    // TODO
    true.

//  typeOfMethodOrFunctionCallExpr(s, MethodExpr(type, name)) = T :-
//    // TODO
//    true.
//
//  typeOfMethodOrFunctionCallExpr(s, MethodExpr(type, name)) = T :-
//    // TODO
//    true.

//
//  typeOfPrimaryExpr(s, Selector(expr, name)) = T :- {TE}
//    typeOfPrimaryExpr(s, expr) == TE,
//    // TE == NamedT(d_ty), // FIXME Hardcoded for this one case
//    // d_ty ?=FM=> s_ty,
//    // new s_fld,
//    // s_fld ---> s_ty,
//    // VarRef[[ name ^ (s_fld) : ty ]],
//    // false | note "TODO: Selector/2".
//    true.

//rules
//  typeOfOperandName : scope * OperandName -> TYPE
//
//  // Qualified identifiers
//  typeOfOperandName(s, OperandName(name)) = T :-
//    // Var{name} -> s,
//    // Var{name} |-> d,
//    // d : ty.
//    true.
//
//  typeOfOperandName(s, QualifiedIdent2OperandName(ident)) = T :-
//    typeOfQualifiedIdent(s, ident) == T.
//
//  typeOfOperandName(_, OperandName-Plhdr()) = _.
//
//rules
//  typeOfQualifiedIdent : scope * QualifiedIdent -> TYPE
//
//  typeOfQualifiedIdent(s, QualifiedIdent(ID2PackageName(pkg), name)) = T :-
//    // Pkg{pkg} -> s,
//    // new s_qual,
//    // Pkg{pkg} <=PUB= s_qual,
//    // Var{name} -> s_qual,
//    // Var{name} |-> d,
//    // d : ty.
//    true.
//
//  typeOfQualifiedIdent(_, QualifiedIdent-Plhdr()) = _.
//
//
//
//  typeOfArguments(_, Arguments-Plhdr()) = _.
//
//  // [[ Arguments(expr,args) ^ (s) : ty ]] :=
//  //   [[ expr ^ (s) : FunT(ty_params,ty) ]],
//  //   Map1T[[ args ^ (s) : ty_args ]],
//  //   // check ty_args against ty_params
//  //   false | note "TODO: Arguments/2".
//


////////////////////////////////////////////////////////////////////////////////