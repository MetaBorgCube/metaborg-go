module analysis/main

imports
  analysis/signatures
  // signatures/Blocks-sig
  // signatures/Declarations-sig
  // signatures/Expressions-sig
  // signatures/GoLang-sig
  // signatures/Lexical-sig
  // signatures/Packages-sig
  // signatures/Representation-sig
  // signatures/SortNames-sig
  // signatures/Statements-sig
  // signatures/Types-sig

imports
  analysis/types
  analysis/name-resolution

rules
 // Initializes the scope graph with built-in types
 init : scope

 init(s_univ) :-
   // Declarations of built-in types
   declareTypeRaw(s_univ, "uint",       UINT()),
   declareTypeRaw(s_univ, "uint8",      UINT8()),
   declareTypeRaw(s_univ, "uint16",     UINT16()),
   declareTypeRaw(s_univ, "uint32",     UINT32()),
   declareTypeRaw(s_univ, "uint64",     UINT64()),
   declareTypeRaw(s_univ, "uintptr",    UINTPTR()),

   declareTypeRaw(s_univ, "int",        INT()),
   declareTypeRaw(s_univ, "int8",       INT8()),
   declareTypeRaw(s_univ, "int16",      INT16()),
   declareTypeRaw(s_univ, "int32",      INT32()),
   declareTypeRaw(s_univ, "int64",      INT64()),
   //declareTypeRaw(s_univ, "intptr",     INTPTR()),

   declareTypeRaw(s_univ, "float64",    FLOAT64()),
   declareTypeRaw(s_univ, "float128",   FLOAT128()),

   declareTypeRaw(s_univ, "complex64",  COMPLEX64()),
   declareTypeRaw(s_univ, "complex128", COMPLEX128()),

   declareTypeRaw(s_univ, "byte",       UINT8()),
   declareTypeRaw(s_univ, "rune",       INT32()),
   declareTypeRaw(s_univ, "string",     STRING()).

// See: https://golang.org/ref/spec#Predeclared_identifiers
