module analysis/main

imports
  signatures/Blocks-sig
  signatures/Declarations-sig
  signatures/Expressions-sig
  signatures/GoLang-sig
  signatures/Lexical-sig
  signatures/Packages-sig
  signatures/Representation-sig
  signatures/SortNames-sig
  signatures/Statements-sig
  signatures/Types-sig

imports
  analysis/types

rules
 // Initializes the scope graph with built-in types
 init : scope

 init(s) :-
   // Declarations of built-in types
   declareTypeRaw(s, "uint",       UINT()),
   declareTypeRaw(s, "uint8",      UINT8()),
   declareTypeRaw(s, "uint16",     UINT16()),
   declareTypeRaw(s, "uint32",     UINT32()),
   declareTypeRaw(s, "uint64",     UINT64()),
   declareTypeRaw(s, "uintptr",    UINTPTR()),

   declareTypeRaw(s, "int",        INT()),
   declareTypeRaw(s, "int8",       INT8()),
   declareTypeRaw(s, "int16",      INT16()),
   declareTypeRaw(s, "int32",      INT32()),
   declareTypeRaw(s, "int64",      INT64()),
   declareTypeRaw(s, "intptr",     INTPTR()),

   declareTypeRaw(s, "float64",    FLOAT64()),
   declareTypeRaw(s, "float128",   FLOAT128()),

   declareTypeRaw(s, "complex64",  COMPLEX64()),
   declareTypeRaw(s, "complex128", COMPLEX128()),

   declareTypeRaw(s, "byte",       UINT8()),
   declareTypeRaw(s, "rune",       INT32()),
   declareTypeRaw(s, "string",     STRING()).

rules

 // Used to declare built-in types
 declareTypeRaw : scope * string * TYPE

 declareTypeRaw(s, x, T) :-
   s -> Type{x} with typeOfDecl T,
   // Assert that the declaration is distinct
   typeOfDecl of Type{x} in s |-> [(_, (_, T))].
