module analysis/packages

imports
  signatures/Blocks-sig
  signatures/Declarations-sig
  signatures/Expressions-sig
  signatures/GoLang-sig
  signatures/Lexical-sig
  signatures/Packages-sig
  signatures/Representation-sig
  signatures/SortNames-sig
  signatures/Statements-sig
  signatures/Types-sig

rules
  testSourceFileOk : scope * TestSourceFile
  testSourceFilesOk maps testSourceFileOk(*, list(*))

  testSourceFileOk(s_univ, TestSourceFile(ImportPath-LEX2ImportPath(pkg_path), PackageClause(PackageName(ID2PackageName(ID-LEX2ID(pkg_name)))), imports, decls)) :-
    // // define package public and private, and file scopes
    // new s_pkg_pub s_pkg_prv s_file,
    // s_pkg_pub ---> s_univ,
    // s_pkg_prv ---> s_pkg_pub,
    // s_file ---> s_pkg_prv,
    // PkgPath{pkg_path} <- s_univ,
    // PkgPath{pkg_path} =PUB=> s_pkg_pub,
    // PkgPath{pkg_path} =PRV=> s_pkg_pub,

    // // implicitly import other files from the same package
    // PkgPath{pkg_path} -> s_univ,
    // PkgPath{pkg_path} <=PRV= s_pkg_prv,

    // // define scope for default imports
    // new s_pkg_imp,
    // PkgPath{pkg_path} =IMP=> s_pkg_imp,
    // Pkg{pkg_name} <- s_pkg_imp,
    // Pkg{pkg_name} =PUB=> s_pkg_pub,

    // Map2[[ imports ^ (s_univ, s_file) ]],
    // Map2[[ decls ^ (s_pkg_pub, s_file) ]].
    true.

rules
  importDecl-ELEMOk : scope * scope * ImportDecl-ELEM
  importDecl-ELEMsOk maps importDecl-ELEMOk(*, *, list(*))

  importDecl-ELEMOk(s_univ, s_file, ImportDecl2ImportDecl-ELEM(importDecl)) :-
    importDeclOk(s_univ, s_file, importDecl).
  
  importDecl-ELEMOk(_, _, ImportDecl-ELEM-Plhdr()).

rules
  importDeclOk : scope * scope * ImportDecl
  
  importDeclOk(s_univ, s_file, ImportDecl(importSpec-ELEMs)) :-
    importSpec-ELEMsOk(s_univ, s_file, importSpec-ELEMs).

  importDeclOk(_, _, ImportDecl-Plhdr()).

rules
  importSpec-ELEMOk : scope * scope * ImportSpec-ELEM
  importSpec-ELEMsOk maps importSpec-ELEMOk(*, *, list(*))

  importSpec-ELEMOk(s_univ, s_file, ImportSpec2ImportSpec-ELEM(importSpec)) :-
    importSpecOk(s_univ, s_file, importSpec).

  importSpec-ELEMOk(_, _, ImportSpec-ELEM-Plhdr()).

rules
  importSpecOk : scope * scope * ImportSpec

  importSpecOk(s_univ, s_file, ImportSpec(Qual(), ImportPath-LEX2ImportPath(pkg_path))) :-
    // PkgPath{pkg_path} -> s_univ,
    // PkgPath{pkg_path} <=IMP= s_file.
    true.

  importSpecOk(s_univ, s_file, ImportSpec(Unqual(), ImportPath-LEX2ImportPath(pkg_path))) :-
    // PkgPath{pkg_path} -> s_univ,
    // PkgPath{pkg_path} <=PUB= s_file.
    true.

  importSpecOk(s_univ, s_file, ImportSpec(Alias(PackageName(ID2PackageName(ID-LEX2ID("_")))), ImportPath-LEX2ImportPath(pkg_path))).

  importSpecOk(s_univ, s_file, ImportSpec(Alias(PackageName(ID2PackageName(ID-LEX2ID(pkg_name)))), ImportPath-LEX2ImportPath(pkg_path))) :-
    // new s_imp,
    // Pkg{pkg_name} <- s_file,
    // Pkg{pkg_name} =PUB=> s_imp,

    // PkgPath{pkg_path} -> s_univ,
    // PkgPath{pkg_path} <=PUB= s_imp.
    true.

  importSpecOk(_, _, ImportSpec-Plhdr()).
