module analysis/name-resolution

signature

  sorts TYPE

  namespaces
    Type    : string
    Pkg     : string
    Lbl     : string

  relations
    typeOfDecl  : occurrence -> TYPE
    lblOfStmt   : occurrence

  name-resolution
    labels
      P     // lexical parent
      IMP
      PUB
      PRV
      FM

    // TODO: Is this correct?
    resolve Type  filter P* (IMP? PUB? PUB? | PRV?) FM* min $ < P, P < PRV, P < PUB, P < FM
    resolve Lbl   filter P*                             min $ < P

rules lookupType : scope * string -> TYPE

  lookupType(s, x) = T :- {dx}
    @x.ref := dx,
    typeOfDecl of Type{x} in s |-> [(_, (Type{dx}, T))].

//rules declareLabel : scope * string
//
// declareLabel(s, name) :-
//   s -> Lbl{name} with lblOfStmt _,
//   // Assert that the label is distinct
//   lblOfStmt of Lbl{name} in s |-> [(_, (_, _))].
//
//rules lookupLabel : scope * string
//
//  lookupLabel(s, refName) :- {defName}
//    lblOfStmt of Lbl{refName} in s |-> [(_, (Lbl{defName}, _))],
//    @refName.ref := defName.
