module analysis/statements

imports
  analysis/signatures
  // signatures/Blocks-sig
  // signatures/Declarations-sig
  // signatures/Expressions-sig
  // signatures/GoLang-sig
  // signatures/Lexical-sig
  // signatures/Packages-sig
  // signatures/Representation-sig
  // signatures/SortNames-sig
  // signatures/Statements-sig
  // signatures/Types-sig

imports
  analysis/declarations
  analysis/expressions
  analysis/blocks
  analysis/name-resolution
  analysis/types

rules stmtOk : scope * Stmt

  stmtsOk maps stmtOk(*, list(*))

  stmtOk(s, DeclarationStmt(declaration)) :-
    declarationOk(s, declaration).

  stmtOk(s, SimpleStmt2Stmt(simpleStmt)) :-
    simpleStmtOk(s, simpleStmt).

  stmtOk(s, Block2Stmt(block)) :-
    blockOk(s, block).

  stmtOk(s, IfStmt2Stmt(ifStmt)) :-
    ifStmtOk(s, ifStmt).

  stmtOk(s, LabeledStmt(label, stmt)) :-
    declareLabel(s, label),
    stmtOk(s, stmt).

  stmtOk(s, ExprSwitchStmt(stmtInit, NoExpr(), clauses)) :- {T}
    stmtInitOk(s, stmtInit),
    UNTYPED_BOOL() == T,  // expr defaults to true
    exprCaseClausesOk(s, clauses, T).

  stmtOk(s, ExprSwitchStmt(stmtInit, Expr2Expr-OPT(expr), clauses)) :- {T}
    stmtInitOk(s, stmtInit),
    typeOfExpr(s, expr) == T,
    exprCaseClausesOk(s, clauses, T).

  stmtOk(s, TypeSwitchStmt(stmtInit, guard, clauses)) :-
    stmtInitOk(s, stmtInit),
    typeSwitchGuardOk(s, guard),
    typeCaseClausesOk(s, clauses).

  stmtOk(s, ForStmt(clause, block)) :-
    forStmtClauseOk(s, clause),
    blockOk(s, block).

  stmtOk(s, FallthroughStmt()) :-
    // TODO: only allowed as the last non-empty statement in an expression switch clause
    true.

  stmtOk(s, GoStmt(expr)) :-
    // TODO: expr must be a function or method call
    true.

  stmtOk(s, DeferStmt(_)) :-
    // TODO: expr must be a function or method call
    true.

  stmtOk(s, SelectStmt(clauses)) :-
    commClausesOk(s, clauses).

  stmtOk(s, ReturnStmt(exprs)) :- {TS}
    typesOfExprs(s, exprs) == TS,
    // TODO: Compare return types to expected return types
    true.

  stmtOk(s, BreakStmt()) :-
    // TODO: must have an enclosing for, switch, or select
    true.

  stmtOk(s, BreakLabeledStmt(label)) :-
    // TODO: find label, must be of an enclosing for, switch, or select
    true.

  stmtOk(s, ContinueStmt()) :-
    // TODO: must have an enclosing for
    true.

  stmtOk(s, ContinueLabeledStmt(label)) :-
    // TODO: find label, must be of an enclosing for
    true.

  stmtOk(s, GotoStmt(label)) :-
    // TODO: find label, check for validity
    true.

rules simpleStmtOk : scope * SimpleStmt

  simpleStmtOk(s, EmptyStmt()).

  simpleStmtOk(s, SendStmt2SimpleStmt(sendStmt)) :-
    sendStmtOk(s, sendStmt).

  simpleStmtOk(s, ExprStmt(expr)) :-
    typeOfExpr(s, expr) == _.

  simpleStmtOk(s, IncStmt(expr)) :- {T1 T2}
    typeOfAddressableOrMapIndexExpr(s, expr) == T1 | error $[The expression must be addressable or a map index expression.],
    // TODO: Relate T1 and T2?
    typeOfExpr(s, expr) == T2,
    isArithmeticType(T2) | error $[Cannot do arithmetic operations on type [T2]].

  simpleStmtOk(s, DecStmt(expr)) :- {T1 T2}
    typeOfAddressableOrMapIndexExpr(s, expr) == T1 | error $[The expression must be addressable or a map index expression.],
    // TODO: Relate T1 and T2?
    typeOfExpr(s, expr) == T2,
    isArithmeticType(T2) | error $[Cannot do arithmetic operations on type [T2]].

  simpleStmtOk(s, SingleVarDecl(VarSpecNoType(ids, es))) :- // Desugared from ShortVarDecl(_, _)
    true.

  simpleStmtOk(s, AssignStmt(exprs1, exprs2)) :-
    // TODO: exprs1 must all be addressable or a map index expression or a blank identifier
    // TODO: exprs1 must be compatible with the types of exprs2
    true.

  simpleStmtOk(s, SumAssignStmt(exprs1, exprs2)) :-
    // TODO: exprs1 must all be addressable or a map index expression
    // TODO: exprs1 must be compatible with the types of exprs2
    true.

  simpleStmtOk(s, DifferenceAssignStmt(exprs1, exprs2)) :-
    // TODO: exprs1 must all be addressable or a map index expression
    // TODO: exprs1 must be compatible with the types of exprs2
    true.

  simpleStmtOk(s, BitwiseOrAssignStmt(exprs1, exprs2)) :-
    // TODO: exprs1 must all be addressable or a map index expression
    // TODO: exprs1 must be compatible with the types of exprs2
    true.

  simpleStmtOk(s, BitwiseXorAssignStmt(exprs1, exprs2)) :-
    // TODO: exprs1 must all be addressable or a map index expression
    // TODO: exprs1 must be compatible with the types of exprs2
    true.

  simpleStmtOk(s, ProductAssignStmt(exprs1, exprs2)) :-
    // TODO: exprs1 must all be addressable or a map index expression
    // TODO: exprs1 must be compatible with the types of exprs2
    true.

  simpleStmtOk(s, QuotientAssignStmt(exprs1, exprs2)) :-
    // TODO: exprs1 must all be addressable or a map index expression
    // TODO: exprs1 must be compatible with the types of exprs2
    true.

  simpleStmtOk(s, RemainderAssignStmt(exprs1, exprs2)) :-
    // TODO: exprs1 must all be addressable or a map index expression
    // TODO: exprs1 must be compatible with the types of exprs2
    true.

  simpleStmtOk(s, LeftShiftAssignStmt(exprs1, exprs2)) :-
    // TODO: exprs1 must all be addressable or a map index expression
    // TODO: exprs1 must be compatible with the types of exprs2
    true.

  simpleStmtOk(s, RightShiftAssignStmt(exprs1, exprs2)) :-
    // TODO: exprs1 must all be addressable or a map index expression
    // TODO: exprs1 must be compatible with the types of exprs2
    true.

  simpleStmtOk(s, BitwiseAndAssignStmt(exprs1, exprs2)) :-
    // TODO: exprs1 must all be addressable or a map index expression
    // TODO: exprs1 must be compatible with the types of exprs2
    true.

  simpleStmtOk(s, BitClearAssignStmt(exprs1, exprs2)) :-
    // TODO: exprs1 must all be addressable or a map index expression
    // TODO: exprs1 must be compatible with the types of exprs2
    true.


rules ifStmtOk : scope * IfStmt

  ifStmtOk(s, IfStmt(stmtInit, expr, thenBlock, rest)) :- {T}
    stmtInitOk(s, stmtInit),
    typeOfExpr(s, expr) == T,
    isBoolType(T) | error $[Expected boolean expression, got [T].],
    blockOk(s, thenBlock),
    ifStmtElseOk(s, rest).

rules ifStmtElseOk : scope * IfStmtElse

  ifStmtElseOk(_, NoElse()).
  ifStmtElseOk(s, ElseBlock(block)) :-
    blockOk(s, block).
  ifStmtElseOk(s, ElseIf(ifStmt)) :-
    ifStmtOk(s, ifStmt).

rules stmtInitOk : scope * StmtInit

  stmtInitOk(_, NoStmtInit()).
  stmtInitOk(s, StmtInit(simpleStmt)) :-
    simpleStmtOk(s, simpleStmt).

rules exprCaseClauseOk : scope * ExprCaseClause * TYPE

  exprCaseClausesOk maps exprCaseClauseOk(*, list(*), *)

  exprCaseClauseOk(s, ExprCase(exprs, stmts), T) :- {TS}
    typesOfExprs(s, exprs) == TS,
    // TODO: Ensure each TYPE in TS can be converted (implicitly) to T (that is, compatibility)
    stmtsOk(s, stmts).

  exprCaseClauseOk(s, ExprCaseDefault(stmts), T) :-
    stmtsOk(s, stmts).

rules typeSwitchGuardOk : scope * TypeSwitchGuard

  typeSwitchGuardOk(s, TypeSwitchGuard(name, expr)) :-
    true.
  typeSwitchGuardOk(s, TypeSwitchGuardNoID(expr)) :-
    true.

rules typeCaseClauseOk : scope * TypeCaseClause

  typeCaseClausesOk maps typeCaseClauseOk(*, list(*))

  typeCaseClauseOk(s, TypeCase(types, stmts)) :-
    // TODO
    stmtsOk(s, stmts),
    true.

  typeCaseClauseOk(s, TypeCaseDefault(stmts)) :-
    stmtsOk(s, stmts).

rules forStmtClauseOk : scope * ForStmtClause

  forStmtClauseOk(s, ForNoClause()).

  forStmtClauseOk(s, ForExprClause(conditionExpr)) :- {T}
    typeOfExpr(s, conditionExpr) == T,
    isBoolType(T) | error $[Expected boolean expression, got [T].].

  forStmtClauseOk(s, ForClause(initStmt, condition, postStmt)) :- {T}
    forInitStmtOk(s, initStmt),
    forConditionOk(s, condition),
    forPostStmtOk(s, postStmt).

  forStmtClauseOk(s, ForRangeClause(ExprListEq(exprs), expr)) :-
    true.

  forStmtClauseOk(s, ForRangeClause(IdListEq(exprs), expr)) :-
    true.

rules forInitStmtOk : scope * ForInitStmt

  forInitStmtOk(_, NoInitStmt()).

  forInitStmtOk(s, SimpleStmt2ForInitStmt(simpleStmt)) :-
    simpleStmtOk(s, simpleStmt).

rules forConditionOk : scope * ForCondition

  forConditionOk(_, NoCondition()).

  forConditionOk(s, Expr2ForCondition(expr)) :- {T}
    typeOfExpr(s, expr) == T,
    isBoolType(T) | error $[Expected boolean expression, got [T].].

rules forPostStmtOk : scope * ForPostStmt

  forPostStmtOk(_, NoPostStmt()).

  forPostStmtOk(s, SimpleStmt2ForPostStmt(simpleStmt)) :-
    simpleStmtOk(s, simpleStmt).

rules commClauseOk : scope * CommClause

  commClausesOk maps commClauseOk(*, list(*))

  commClauseOk(s, CommClause(case, stmts)) :-
    commCaseOk(s, case),
    stmtsOk(s, stmts).

rules commCaseOk : scope * CommCase

  commCaseOk(s, CommCaseSend(sendStmt)) :-
    sendStmtOk(s, sendStmt).
  commCaseOk(s, CommCaseRecv(recvStmt)) :-
    recvStmtOk(s, recvStmt).
  commCaseOk(s, CommCaseDefault()).

rules sendStmtOk : scope * SendStmt

  sendStmtOk(s, SendStmt(channelExpr, expr)) :- {T TC}
    typeOfExpr(s, expr) == T,
    typeOfExpr(s, channelExpr) == TC,
    TC == CHANNEL(T) | error $[Expected channel of type [T], got [TC]].

rules recvStmtOk : scope * RecvStmt

  recvStmtOk(s, RecvStmt(ExprListEq(exprs), channelExpr)) :- {T TC}
    // TODO: What is T?
    typeOfExpr(s, channelExpr) == TC,
    TC == CHANNEL(T) | error $[Expected channel of type [T], got [TC]],
    true.
  recvStmtOk(s, RecvStmt(IdListEq(ids), channelExpr)) :- {T TC}
    // TODO: What is T?
    typeOfExpr(s, channelExpr) == TC,
    TC == CHANNEL(T) | error $[Expected channel of type [T], got [TC]],
    true.


//
//// Statements
//rules
//  stmtListOk : scope * StmtList
//
//  stmtListOk(s, StmtList(stmtListELEMs)) :-
//    stmtListELEMsOk(s, stmtListELEMs).
//
//rules
//  stmtListELEMOk : scope * StmtList-ELEM
//  stmtListELEMsOk maps stmtListELEMOk(*, list(*))
//
//  stmtListELEMOk(s, Stmt2StmtList-ELEM(stmt)) :-
//    stmtOk(s, stmt).
//
//rules
//  stmtOk : scope * Stmt
//  stmtsOk maps stmtOk(*, list(*))
//
//  stmtOk(s, DeclarationStmt(decl)) :-
//    declOk(s, decl).
//
//  stmtOk(s, SimpleStmt2Stmt(simpleStmt)) :-
//    simpleStmtOk(s, simpleStmt).
//  stmtOk(s, LabeledStmt2Stmt(labeledStmt)) :-
//    labeledStmtOk(s, labeledStmt).
//  stmtOk(s, GoStmt2Stmt(goStmt)) :-
//    goStmtOk(s, goStmt).
//  stmtOk(s, ReturnStmt2Stmt(returnStmt)) :-
//    returnStmtOk(s, returnStmt).
//  stmtOk(s, BreakStmt2Stmt(breakStmt)) :-
//    breakStmtOk(s, breakStmt).
//  stmtOk(s, ContinueStmt2Stmt(continueStmt)) :-
//    continueStmtOk(s, continueStmt).
//  stmtOk(s, GotoStmt2Stmt(gotoStmt)) :-
//    gotoStmtOk(s, gotoStmt).
//  stmtOk(s, FallthroughStmt2Stmt(fallthroughStmt)) :-
//    fallthroughStmtOk(s, fallthroughStmt).
//  stmtOk(s, DeferStmt2Stmt(deferStmt)) :-
//    deferStmtOk(s, deferStmt).
//  stmtOk(s, Block2Stmt(block)) :-
//    blockOk(s, block).
//  stmtOk(s, IfStmt2Stmt(ifStmt)) :-
//    ifStmtOk(s, ifStmt).
//  stmtOk(s, SwitchStmt2Stmt(switchStmt)) :-
//    switchStmtOk(s, switchStmt).
//  stmtOk(s, SelectStmt2Stmt(selectStmt)) :-
//    selectStmtOk(s, selectStmt).
//  stmtOk(s, ForStmt2Stmt(forStmt)) :-
//    forStmtOk(s, forStmt).
//
//  stmtOk(_, Stmt-Plhdr()).
//
//rules
//  declOk : scope * Declaration
//
//  declOk(s, ConstDecl2Declaration(constDecl)) :-
//    constDeclOk(s, s, constDecl).
//  declOk(s, TypeDecl2Declaration(typeDecl)) :-
//    typeDeclOk(s, s, typeDecl).
//  declOk(s, VarDecl2Declaration(varDecl)) :-
//    varDeclOk(s, s, varDecl).
//
//  declOk(_, Declaration-Plhdr()).
//
//rules
//  simpleStmtOk : scope * SimpleStmt
//
//  simpleStmtOk(s, EmptyStmt2SimpleStmt(emptyStmt)) :-
//    emptyStmtOk(s, emptyStmt).
//  simpleStmtOk(s, ExprStmt2SimpleStmt(exprStmt)) :-
//    exprStmtOk(s, exprStmt).
//  simpleStmtOk(s, SendStmt2SimpleStmt(sendStmt)) :-
//    sendStmtOk(s, sendStmt).
//  simpleStmtOk(s, IncDecStmt2SimpleStmt(incDecStmt)) :-
//    incDecStmtOk(s, incDecStmt).
//  simpleStmtOk(s, Assignment2SimpleStmt(assignment)) :-
//    assignmentOk(s, assignment).
//
//  simpleStmtOk(_, SimpleStmt-Plhdr()).
//
//rules
//  emptyStmtOk : scope * EmptyStmt
//
//  emptyStmtOk(s, EmptyStmt()).
//
//  emptyStmtOk(s, EmptyStmt-Plhdr()).
//
//rules
//  exprStmtOk : scope * ExprStmt
//
//  exprStmtOk(s, ExprStmt(expr)) :-
//    typeOfExpr(s, expr) == _.
//
//  exprStmtOk(_, ExprStmt-Plhdr()).
//
//rules
//  sendStmtOk : scope * SendStmt
//
//  sendStmtOk(s, SendStmt(channel, expr)) :-
//    channelOk(s, channel),
//    typeOfExpr(s, expr) == _.
//
//  sendStmtOk(_, SendStmt-Plhdr()).
//
//rules
//  incDecStmtOk : scope * IncDecStmt
//
//  incDecStmtOk(s, IncStmt(expr)) :-
//    typeOfExpr(s, expr) == _.
//
//  incDecStmtOk(s, DecStmt(expr)) :-
//    typeOfExpr(s, expr) == _.
//
//  incDecStmtOk(_, IncDecStmt-Plhdr()).
//
//rules
//  assignmentOk : scope * Assignment
//
//  assignmentOk(s, AssignStmt(exprs1, exprs2)) :- {LTS RTS}
//    typesOfExprList(s, exprs1) == LTS,
//    typesOfExprList(s, exprs2) == RTS,
//    // lhs_tys <`assignable`? rhs_tys.
//    true.
//
//  // add_op
//  assignmentOk(s, SumAssignStmt(exprs1, exprs2)) :-
//    typesOfExprList(s, exprs1) == _,
//    typesOfExprList(s, exprs2) == _.
//  assignmentOk(s, DifferenceAssignStmt(exprs1, exprs2)) :-
//    typesOfExprList(s, exprs1) == _,
//    typesOfExprList(s, exprs2) == _.
//  assignmentOk(s, BitwiseOrAssignStmt(exprs1, exprs2)) :-
//    typesOfExprList(s, exprs1) == _,
//    typesOfExprList(s, exprs2) == _.
//  assignmentOk(s, BitwiseXorAssignStmt(exprs1, exprs2)) :-
//    typesOfExprList(s, exprs1) == _,
//    typesOfExprList(s, exprs2) == _.
//
//  // mul_op
//  assignmentOk(s, ProductAssignStmt(exprs1, exprs2)) :-
//    typesOfExprList(s, exprs1) == _,
//    typesOfExprList(s, exprs2) == _.
//  assignmentOk(s, QuotientAssignStmt(exprs1, exprs2)) :-
//    typesOfExprList(s, exprs1) == _,
//    typesOfExprList(s, exprs2) == _.
//  assignmentOk(s, RemainderAssignStmt(exprs1, exprs2)) :-
//    typesOfExprList(s, exprs1) == _,
//    typesOfExprList(s, exprs2) == _.
//  assignmentOk(s, LeftShiftAssignStmt(exprs1, exprs2)) :-
//    typesOfExprList(s, exprs1) == _,
//    typesOfExprList(s, exprs2) == _.
//  assignmentOk(s, RightShiftAssignStmt(exprs1, exprs2)) :-
//    typesOfExprList(s, exprs1) == _,
//    typesOfExprList(s, exprs2) == _.
//  assignmentOk(s, BitwiseAndAssignStmt(exprs1, exprs2)) :-
//    typesOfExprList(s, exprs1) == _,
//    typesOfExprList(s, exprs2) == _.
//  assignmentOk(s, BitClearAssignStmt(exprs1, exprs2)) :-
//    typesOfExprList(s, exprs1) == _,
//    typesOfExprList(s, exprs2) == _.
//
//
//rules
//  labeledStmtOk : scope * LabeledStmt
//
//  labeledStmtOk(s, LabeledStmt(label, stmt)) :-
//    labelDeclOk(s, label),
//    stmtOk(s, stmt).
//
//  labeledStmtOk(_, LabeledStmt-Plhdr()).
//
//rules
//  goStmtOk : scope * GoStmt
//
//  goStmtOk(s, GoStmt(expr)) :-
//    typeOfExpr(s, expr) == _.
//
//  goStmtOk(_, GoStmt-Plhdr()).
//
//rules
//  returnStmtOk : scope * ReturnStmt
//
//  returnStmtOk(s, ReturnStmt(exprs)) :-
//    typesOfExprListOPT(s, exprs) == _.
//
//  returnStmtOk(_, ReturnStmt-Plhdr()).
//
//rules
//  breakStmtOk : scope * BreakStmt
//
//  breakStmtOk(s, BreakStmt(label)) :-
//    labelRefOPTOk(s, label).
//
//  breakStmtOk(_, BreakStmt-Plhdr()).
//
//rules
//  continueStmtOk : scope * ContinueStmt
//
//  continueStmtOk(s, ContinueStmt(label)) :-
//    labelRefOPTOk(s, label).
//
//  continueStmtOk(_, ContinueStmt-Plhdr()).
//
//rules
//  gotoStmtOk : scope * GotoStmt
//
//  gotoStmtOk(s, GotoStmt(label)) :-
//    labelRefOk(s, label).
//
//  gotoStmtOk(_, GotoStmt-Plhdr()).
//
//rules
//  fallthroughStmtOk : scope * FallthroughStmt
//
//  fallthroughStmtOk(s, FallthroughStmt()).
//
//  fallthroughStmtOk(_, FallthroughStmt-Plhdr()).
//
//rules
//  deferStmtOk : scope * DeferStmt
//
//  deferStmtOk(s, DeferStmt(expr)) :-
//    typeOfExpr(s, expr) == _.
//
//  deferStmtOk(_, DeferStmt-Plhdr()).
//
//rules
//  ifStmtOk : scope * IfStmt
//  // TODO
//  ifStmtOk(s, IfStmt(_, _, _, _)).
//
//  ifStmtOk(_, IfStmt-Plhdr()).
//
//rules
//  switchStmtOk : scope * SwitchStmt
//
//  switchStmtOk(s, ExprSwitchStmt2SwitchStmt(exprSwitchStmt)) :-
//    exprSwitchStmtOk(s, exprSwitchStmt).
//  switchStmtOk(s, TypeSwitchStmt2SwitchStmt(typeSwitchStmt)) :-
//    typeSwitchStmtOk(s, typeSwitchStmt).
//
//  switchStmtOk(_, SwitchStmt-Plhdr()).
//
//rules
//  selectStmtOk : scope * SelectStmt
//  // TODO
//  selectStmtOk(s, Select(_)).
//
//  selectStmtOk(_, SelectStmt-Plhdr()).
//
//rules
//  forStmtOk : scope * ForStmt
//  // TODO
//  forStmtOk(s, ForStmt(_, _)).
//
//  forStmtOk(_, ForStmt-Plhdr()).
//
//// Label declarations
//rules
//  labelDeclOk : scope * Label
//
//  labelDeclOk(s, Label(name)).
//    // Lbl{name} <- s.
//
//  labelDeclOk(_, Label-Plhdr()).
//
//// Label references
//rules
//  labelRefOPTOk : scope * Label-OPT
//
//  labelRefOPTOk(s, NoLabel()).
//
//  labelRefOPTOk(s, Label2Label-OPT(label)) :-
//    labelRefOk(s, label).
//
//
//  labelRefOPTOk(_, Label-OPT-Plhdr()).
//rules
//  labelRefOk : scope * Label
//
//  labelRefOk(s, Label(name)).
//    // Lbl{name} -> s,
//    // Lbl{name} |-> _.
//
//  labelRefOk(_, Label-Plhdr()).
//
//
//rules
//  exprSwitchStmtOk : scope * ExprSwitchStmt
//  // TODO
//  exprSwitchStmtOk(s, ExprSwitch(_, _, _)).
//
//  exprSwitchStmtOk(_, ExprSwitchStmt-Plhdr()).
//
//rules
//  typeSwitchStmtOk : scope * TypeSwitchStmt
//  // TODO
//  typeSwitchStmtOk(s, TypeSwitch(_, _, _)).
//
//  typeSwitchStmtOk(_, TypeSwitchStmt-Plhdr()).
//
//rules
//  channelOk : scope * Channel
//
//  // TODO
//  channelOk(s, Expr2Channel(expr)).
//
//  channelOk(_, Channel-Plhdr()).